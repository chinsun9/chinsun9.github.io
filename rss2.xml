<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Fri, 30 Jul 2021 00:38:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>git config by workspace</title>
      <link>https://chinsun9.github.io/2021/07/30/git-config-by-workspace/</link>
      <guid>https://chinsun9.github.io/2021/07/30/git-config-by-workspace/</guid>
      <pubDate>Fri, 30 Jul 2021 00:38:10 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;보통 global로 설정된 user.name, uesr.email이 있을 것이다&lt;/li&gt;
&lt;li&gt;깃 프로젝트 워크스페이스 별로 다른 계정을 사용해보자&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcap</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>보통 global로 설정된 user.name, uesr.email이 있을 것이다</li><li>깃 프로젝트 워크스페이스 별로 다른 계정을 사용해보자</li></ul><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git config user.name &#123;username&#125;</span></span><br><span class="line">git config user.name chinsun9</span><br><span class="line"></span><br><span class="line"><span class="comment"># git config user.email &#123;email&#125;</span></span><br><span class="line">git config user.email chin_sung@naver.com</span><br></pre></td></tr></table></figure><ul><li>글로벌로 설정된 이름, 이메일 대신, 다른 계정을 사용하고 싶은 워크스페이스로 가서 위 명령을 실행한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/8801729/is-it-possible-to-have-different-git-configuration-for-different-projects">https://stackoverflow.com/questions/8801729/is-it-possible-to-have-different-git-configuration-for-different-projects</a></li><li>경로 패턴에 따라 config를 다르게 구성하는 방법도 있다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/30/git-config-by-workspace/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에 깃, 도커 설치하기</title>
      <link>https://chinsun9.github.io/2021/07/29/install-git-docker-on-raspberrypi/</link>
      <guid>https://chinsun9.github.io/2021/07/29/install-git-docker-on-raspberrypi/</guid>
      <pubDate>Thu, 29 Jul 2021 08:57:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/install-git-docker-on-raspberrypi20210729/preview.png&quot; al</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/install-git-docker-on-raspberrypi20210729/preview.png" alt=" "></p><h3 id="git-설치"><a href="#git-설치" class="headerlink" title="git 설치"></a>git 설치</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="docker-설치"><a href="#docker-설치" class="headerlink" title="docker 설치"></a>docker 설치</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%84%A4%EC%B9%98">https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%84%A4%EC%B9%98</a></li><li><a href="https://docs.docker.com/engine/install/debian/">https://docs.docker.com/engine/install/debian/</a></li><li><a href="/2021/07/29/how-to-install-raspberrypi-os/">라즈베리파이에 라즈비안 설치 및 설정</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/docker/">docker</category>
      
      <category domain="https://chinsun9.github.io/tags/raspberrypi/">raspberrypi</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/29/install-git-docker-on-raspberrypi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에 라즈비안 설치 및 설정</title>
      <link>https://chinsun9.github.io/2021/07/29/how-to-install-raspberrypi-os/</link>
      <guid>https://chinsun9.github.io/2021/07/29/how-to-install-raspberrypi-os/</guid>
      <pubDate>Thu, 29 Jul 2021 08:49:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;라즈베리파이에 &lt;strong&gt;Raspberry Pi OS Lite&lt;/strong&gt; 를 설치해보자&lt;/p&gt;
&lt;h2 id=&quot;라즈비안-이미지-받기&quot;&gt;&lt;a href=&quot;#라즈비안-이미지-받기&quot; class=&quot;headerlink&quot; title=&quot;라즈비안 이미지 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>라즈베리파이에 <strong>Raspberry Pi OS Lite</strong> 를 설치해보자</p><h2 id="라즈비안-이미지-받기"><a href="#라즈비안-이미지-받기" class="headerlink" title="라즈비안 이미지 받기"></a>라즈비안 이미지 받기</h2><ul><li><a href="https://www.raspberrypi.org/software/operating-systems/">https://www.raspberrypi.org/software/operating-systems/</a></li><li><code>Raspberry Pi OS Lite</code>를 다운로드한다</li></ul><h2 id="sd-카드-준비"><a href="#sd-카드-준비" class="headerlink" title="sd 카드 준비"></a>sd 카드 준비</h2><ul><li><a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></li><li><code>balenaEtcher</code> 설치한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/how-to-install-raspberrypi-os20210729/preview.png" alt=" "></p><ul><li>라즈비안 이미지를 선택하고</li><li>인스톨한 sd카드를 선택하여 os를 설치한다</li></ul><h2 id="와이파이로-인터넷-연결하기"><a href="#와이파이로-인터넷-연결하기" class="headerlink" title="와이파이로 인터넷 연결하기"></a>와이파이로 인터넷 연결하기</h2><ul><li>sd카드를 꼽고,</li><li>hdmi로 모니터와 키보드를 연결하고 전원을 켠다</li><li>기본 계정은 pi / raspberry 이다</li><li>와이파이로 인터넷을 연결해주겠다</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><ul><li>system option -&gt; wireless lan -&gt; GB (영국) -&gt; 와이파이명 -&gt; 와이파이 비밀번호 -&gt; 리부트</li><li>재부팅 후에 인터넷 연결을 확인하기 위해 <code>ifconfig</code> 명령을 실행하여 확인해준다</li></ul><h2 id="ssh-설정하기"><a href="#ssh-설정하기" class="headerlink" title="ssh 설정하기"></a>ssh 설정하기</h2><p>외부에서 리모트로 개발하기 위해 ssh 설정을 해줘야 한다</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><ul><li>interface option -&gt; ssh -&gt; enable</li><li>이제 리모트 할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.raspberrypi.org/software/operating-systems/">https://www.raspberrypi.org/software/operating-systems/</a></li><li><a href="/2021/07/29/install-git-docker-on-raspberrypi/">라즈베리파이에 깃, 도커 설치하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/raspberrypi/">raspberrypi</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/29/how-to-install-raspberrypi-os/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>postgresql commands</title>
      <link>https://chinsun9.github.io/2021/07/28/postgresql-commands/</link>
      <guid>https://chinsun9.github.io/2021/07/28/postgresql-commands/</guid>
      <pubDate>Wed, 28 Jul 2021 01:13:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;SQL Shell (psql)&lt;/strong&gt; 에서 명령&lt;br&gt;postgreql 처음 써보는 데 사용한 명령어 및 커넥션 설정 정리&lt;/p&gt;
&lt;h2 id=&quot;psql&quot;&gt;&lt;a href=&quot;#psql&quot; class=&quot;headerlink&quot; ti</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>SQL Shell (psql)</strong> 에서 명령<br>postgreql 처음 써보는 데 사용한 명령어 및 커넥션 설정 정리</p><h2 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h2><figure class="highlight sql"><figcaption><span>psql commands</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 데이터베이스 생성</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 유저 생성</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> sung <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 권한 부여</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE student <span class="keyword">TO</span> sung;</span><br></pre></td></tr></table></figure><ul><li>대소문자 구분은 안 해도 된다</li></ul><h2 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h2><figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:postgresql://localhost:5432/student</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">sung</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">1234</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">create-drop</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.PostgreSQLDialect</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h2><ul><li><a href="https://jdbc.postgresql.org/download.html">https://jdbc.postgresql.org/download.html</a></li><li>최신 버전의 postgresql을 사용하면 4.2를 다운로드하면 된다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtu.be/9SGDpanrc8U">https://youtu.be/9SGDpanrc8U</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/postgresql/">postgresql</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/28/postgresql-commands/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>eclipse command palette</title>
      <link>https://chinsun9.github.io/2021/07/28/eclipse-command-palette/</link>
      <guid>https://chinsun9.github.io/2021/07/28/eclipse-command-palette/</guid>
      <pubDate>Wed, 28 Jul 2021 00:39:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;Ctrl 3&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vscode에서 명령 팔레트를 자주 쓰는데, 이클립스에서도 같은 기능이 있는지 확인해보았다&lt;/li&gt;
&lt;li&gt;이클립스에서 빠르게 파일을 열어보고 싶은데 vscode에서 &lt;code&gt;Ctrl </description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>Ctrl 3</code></p><ul><li>vscode에서 명령 팔레트를 자주 쓰는데, 이클립스에서도 같은 기능이 있는지 확인해보았다</li><li>이클립스에서 빠르게 파일을 열어보고 싶은데 vscode에서 <code>Ctrl P</code> 같은 명령어가 있는지 확인해보았다</li><li>Open resource, 단축키 <code>Ctrl Shift R</code>로 파일을 빠르게 열어볼 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/10370567/choose-command-popup-in-eclipse/23310954">https://stackoverflow.com/questions/10370567/choose-command-popup-in-eclipse/23310954</a></li><li><a href="https://stackoverflow.com/questions/3859632/what-is-the-keyboard-shortcut-to-go-to-a-file-in-eclipse-on-mac-os-x">https://stackoverflow.com/questions/3859632/what-is-the-keyboard-shortcut-to-go-to-a-file-in-eclipse-on-mac-os-x</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/java/">java</category>
      
      
      <category domain="https://chinsun9.github.io/tags/java/">java</category>
      
      <category domain="https://chinsun9.github.io/tags/eclipse/">eclipse</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/28/eclipse-command-palette/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>일렉트론 타입스크립트로 시작하기</title>
      <link>https://chinsun9.github.io/2021/07/22/create-electron-app-with-typescript/</link>
      <guid>https://chinsun9.github.io/2021/07/22/create-electron-app-with-typescript/</guid>
      <pubDate>Thu, 22 Jul 2021 07:34:13 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;terminal&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create electron-app my-new-app --template=typescript</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.electronforge.io/templates/typescript-template">https://www.electronforge.io/templates/typescript-template</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/electron/">electron</category>
      
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/electron/">electron</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/22/create-electron-app-with-typescript/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>yarn create</title>
      <link>https://chinsun9.github.io/2021/07/22/yarn-create/</link>
      <guid>https://chinsun9.github.io/2021/07/22/yarn-create/</guid>
      <pubDate>Thu, 22 Jul 2021 07:22:40 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;terminal&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npx create-react-app my-app</span></span><br><span class="line">yarn create react-app my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># npx create-electron-app my-app</span></span><br><span class="line">yarn create electron-app my-app</span><br></pre></td></tr></table></figure><ul><li>보통 보일러플레이트로 프로젝트를 시작할 때 <code>npx</code>를 사용한다</li><li><code>yarn create</code>는 <code>create</code>로 시작하는 패키지를 설치할 때 <code>npx</code>와 동일하게 동작한다</li></ul><h2 id="npx-vs-npm-i-g"><a href="#npx-vs-npm-i-g" class="headerlink" title="npx vs. npm i -g"></a>npx vs. npm i -g</h2><ul><li>보일러플레이트로 시작할 때 크게 두 가지 방법이 있는데,</li><li><code>npx</code>로 시작하는 방법과, 글로벌 설치 후 cli로 시작하는 방법이 있다</li><li>보통 보일러플레이트 패키지는 <code>npx</code>를 권장하는데, 이유는 <code>npx</code>는 항상 최신 버전으로 설치해준다</li><li>반면 글로벌로 설치해서 사용하는 경우, 시간이 지나면 구버전이 되고, 업데이트는 하려면 수동으로 해줘야 한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://classic.yarnpkg.com/en/docs/cli/create/">https://classic.yarnpkg.com/en/docs/cli/create/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/boilerplate/">boilerplate</category>
      
      <category domain="https://chinsun9.github.io/tags/yarn/">yarn</category>
      
      <category domain="https://chinsun9.github.io/tags/npx/">npx</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/22/yarn-create/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>powershell로 환경변수 추가하기</title>
      <link>https://chinsun9.github.io/2021/07/20/add-environment-variable-using-powershell/</link>
      <guid>https://chinsun9.github.io/2021/07/20/add-environment-variable-using-powershell/</guid>
      <pubDate>Tue, 20 Jul 2021 08:23:27 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight ps1&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용자 변수로 추가</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;GH_TOKEN&quot;</span>,<span class="string">&quot;&lt;YOUR_TOKEN_HERE&gt;&quot;</span>,<span class="string">&quot;User&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시스템 변수로 추가 (관리자 권한 필요)</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;GH_TOKEN&quot;</span>,<span class="string">&quot;&lt;YOUR_TOKEN_HERE&gt;&quot;</span>,<span class="string">&quot;Machine&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>파워쉘 명령어 한 줄로 환경변수를 쉽게 추가할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.microsoft.com/ko-kr/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.1#using-systemenvironment-methods">https://docs.microsoft.com/ko-kr/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.1#using-systemenvironment-methods</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/cmd/">cmd</category>
      
      
      <category domain="https://chinsun9.github.io/tags/cmd/">cmd</category>
      
      <category domain="https://chinsun9.github.io/tags/powershell/">powershell</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/20/add-environment-variable-using-powershell/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>electron 카테고리 생성</title>
      <link>https://chinsun9.github.io/2021/07/19/create-electron-category/</link>
      <guid>https://chinsun9.github.io/2021/07/19/create-electron-category/</guid>
      <pubDate>Mon, 19 Jul 2021 06:16:13 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;일렉트론 공부&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>일렉트론 공부</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/electron/">electron</category>
      
      
      <category domain="https://chinsun9.github.io/tags/category/">category</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/19/create-electron-category/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js coercion</title>
      <link>https://chinsun9.github.io/2021/07/19/js-coercion/</link>
      <guid>https://chinsun9.github.io/2021/07/19/js-coercion/</guid>
      <pubDate>Mon, 19 Jul 2021 00:41:55 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;서로 다른 타입끼리 연산을 할 때, 타입 캐스팅이 일어난다&lt;/li&gt;
&lt;li&gt;js에서는 이를 &lt;code&gt;coercion&lt;/code&gt; 이라고 부르는 것 같다&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;js에서 서로 다른 타입 간의 연산을 하더라도</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>서로 다른 타입끼리 연산을 할 때, 타입 캐스팅이 일어난다</li><li>js에서는 이를 <code>coercion</code> 이라고 부르는 것 같다</li></ul><ul><li>js에서 서로 다른 타입 간의 연산을 하더라도 웬만하면 에러가 안 뜬다</li><li>어느 한쪽을 기준으로 자동 캐스팅되어서 js를 처음 배울 때 너무 편했다</li><li>이런 강제 형변환이 직관적이라고 생각할 때도 있지만, 가끔 실수할 때가 있다</li><li>나는 처음 js를 배울 때 <code>var</code>보다는 <code>const</code>, <code>let</code></li><li><code>==</code>보다는 <code>===</code>를 사용하라고 배워서 그냥 그런가 보다 하고 따랐었는데,</li><li>특히 조건문에서 강제 형변환은 예상하지 못한 동작들을 많이 만들어내는 것 같다</li><li><code>===</code>, <code>!==</code>를 사용함으로써 강제 형변환 없이 비교해 볼 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://jihyehwang09.github.io/2019/04/05/33-js-type-coercion/">https://jihyehwang09.github.io/2019/04/05/33-js-type-coercion/</a></li><li><a href="https://github.com/leonardomso/33-js-concepts">https://github.com/leonardomso/33-js-concepts</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/19/js-coercion/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js fetch 요청 취소, 중단하기</title>
      <link>https://chinsun9.github.io/2021/07/18/cancel-fetch/</link>
      <guid>https://chinsun9.github.io/2021/07/18/cancel-fetch/</guid>
      <pubDate>Sun, 18 Jul 2021 02:13:19 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchData = <span class="keyword">async</span> (pram) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fetchData`</span>);</span><br><span class="line">    <span class="keyword">if</span> (controller) controller.abort();</span><br><span class="line">    controller = <span class="keyword">new</span> AbortController();</span><br><span class="line">    <span class="keyword">const</span> &#123; signal &#125; = controller;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`<span class="subst">$&#123;API_END_POINT&#125;</span>/<span class="subst">$&#123;pram&#125;</span>`</span>, &#123; signal &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!res.ok) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;no ok error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> res.json();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;server error&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>AbortController</code>를 사용해서 기존에 요청이 있으면</li><li>취소하고 새로운 요청을 보내는 예제이다</li></ul><ul><li>버튼을 눌러서 <code>fetchData</code>를 실행시킨다고 하자</li><li>유저가 빠르게 버튼 10번을 눌러서 <code>fetchData</code>가 10번 실행되었다</li><li>이런 입력에 대한 아무런 방지를 않았으면, fetch 결과에 대한 콜백이 10번 실행될 것이다</li><li><code>AbortController</code>을 사용하면 버튼을 연속적으로 누르더라도 콜백이 마지막 결과에 대해서만 한번 동작할 것이다</li><li>하지만 <code>AbortController</code>를 사용한다고 해서 API를 콜하는 비용이 덜 드는 것은 아니다</li><li>단순히 해당 fetch에 대한 결과를 핸들하지 않겠다는 것이기 때문에,</li><li>지금의 예처럼 동일한 API를 중복해서 호출하는 것을 막기 위해서는</li><li>최초에 버튼을 누르면 버튼을 비활성화하는 것이 좋다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/AbortController/abort">https://developer.mozilla.org/ko/docs/Web/API/AbortController/abort</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/fetch/">fetch</category>
      
      <category domain="https://chinsun9.github.io/tags/AbortController/">AbortController</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/18/cancel-fetch/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>깃허브 템플릿 저장소 만들기</title>
      <link>https://chinsun9.github.io/2021/07/17/github-template-repo/</link>
      <guid>https://chinsun9.github.io/2021/07/17/github-template-repo/</guid>
      <pubDate>Sat, 17 Jul 2021 05:29:10 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;템플릿 레포를 만들어보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/preview</description>
        
      
      
      
      <content:encoded><![CDATA[<p>템플릿 레포를 만들어보자</p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/preview.png" alt=" "></p><ul><li>리액트 프로젝트를 진행할 때, CRA 같은 보일러플레이트로 프로젝트를 시작할 수 있다</li><li>근데 자신만의 린트 설정이나, 따로 설치하는 패키지들이 있다</li><li>이런 것들을 매번 새로운 프로젝트를 생성할 때마다 해준다면 귀찮을 것이다</li><li>이때 깃허브에서는 템플릿 저장소 기능을 활용할 수 있다</li></ul><h2 id="템플릿-저장소-하나-만들기"><a href="#템플릿-저장소-하나-만들기" class="headerlink" title="템플릿 저장소 하나 만들기"></a>템플릿 저장소 하나 만들기</h2><ul><li>템플릿으로 만들 저장소를 만들고,</li><li>원하는 초기 상태를 세팅한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/1.png" alt=" "></p><ul><li>Settings 탭에 들어가면 레포명 설정 아래 바로 템플릿 레포로 지정할 수 있는 체크박스가 있다</li><li>체크 박스를 체크하면 템플릿 레포 완성이다</li></ul><h2 id="템플릿을-사용해서-새-저장소-생성하기"><a href="#템플릿을-사용해서-새-저장소-생성하기" class="headerlink" title="템플릿을 사용해서 새 저장소 생성하기"></a>템플릿을 사용해서 새 저장소 생성하기</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/preview.png" alt=" "></p><ul><li>템플릿으로 설정한 저장소를 선택할 수 있다</li></ul><h2 id="다른-사람이-만들어둔-템플릿-사용하기"><a href="#다른-사람이-만들어둔-템플릿-사용하기" class="headerlink" title="다른 사람이 만들어둔 템플릿 사용하기"></a>다른 사람이 만들어둔 템플릿 사용하기</h2><ul><li>다른 사람이 만들어 둔 템플릿 레포가 있을 수 있는데,</li><li>포크해서 내 저장소로 가져오면 바로 사용이 가능하다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/creating-a-template-repository">https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/creating-a-template-repository</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/template/">template</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/17/github-template-repo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js event loop</title>
      <link>https://chinsun9.github.io/2021/07/16/js-event-loop/</link>
      <guid>https://chinsun9.github.io/2021/07/16/js-event-loop/</guid>
      <pubDate>Fri, 16 Jul 2021 08:07:58 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/8aGhZQkoFbQ&quot;&gt;https://youtu.be/8aGhZQkoFbQ&lt;/a&gt; 을 보고 정리&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;video-containe</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p><a href="https://youtu.be/8aGhZQkoFbQ">https://youtu.be/8aGhZQkoFbQ</a> 을 보고 정리</p></blockquote><div class="video-container"><iframe src="https://www.youtube.com/embed/8aGhZQkoFbQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>비동기 코드는 webapi에서 실행된다</li><li>실행이 완료되면 큐에 들어간다</li><li>큐에서 스택에 아무것도 없기를 기다렸다가</li><li>스택에 들어가고 실행된다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫 번째로 스택에 들어감</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두 번쨰로 스택에 들어가고 바로 webapi로 들어감</span></span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line">  <span class="comment">// webapi에서 큐로 던져짐. console.log(3)이 끝나고 스택이 텅텅 비워져서야 네 번째로 스택에 들어감</span></span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 세 번째로 스택에 들어감</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 3 2</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtu.be/8aGhZQkoFbQ">https://youtu.be/8aGhZQkoFbQ</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/js-event-loop/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js hoisting 호이스팅</title>
      <link>https://chinsun9.github.io/2021/07/16/js-hoisting/</link>
      <guid>https://chinsun9.github.io/2021/07/16/js-hoisting/</guid>
      <pubDate>Fri, 16 Jul 2021 07:41:56 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;javascript에서는 선언 전에 변수를 사용할 수 있는 경우가 있는데, 호이스팅 때문이다&lt;/em&gt;&lt;br&gt;&lt;em&gt;근데 호이스팅은 나쁜거다&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>javascript에서는 선언 전에 변수를 사용할 수 있는 경우가 있는데, 호이스팅 때문이다</em><br><em>근데 호이스팅은 나쁜거다</em></p><figure class="highlight js"><figcaption><span>var</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.trace(A); <span class="comment">// undefined</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">console</span>.trace(A); <span class="comment">// undefined</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">console</span>.trace(A); <span class="comment">// undefined</span></span><br><span class="line">      <span class="keyword">var</span> A = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.trace(A); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.trace(A); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="comment">// console.trace(A) // not work</span></span><br></pre></td></tr></table></figure><ul><li><code>var</code> 키워드를 사용하면 함수 최상위 스코프로 간다</li><li>변수 A는 선언도 안되었는데 잘 실행되는 이유이다</li></ul><figure class="highlight js"><figcaption><span>함수 호이스팅</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f();</span><br><span class="line"><span class="comment">// g(); // not work</span></span><br><span class="line"><span class="comment">// h(); // not work</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>특히 함수는 함수 선언식? 일 때 호이스팅 된다</li><li>나는 처음 js를 배울 때, <code>var</code>을 <code>const</code>, <code>let</code>으로 대체해라고 해서</li><li>일단은 var을 안 쓰면서 공부를 해왔었는데,</li><li>그래선지 호이스팅 관련해서 골머리 아픈 적이 없었던 것 같다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/var">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/var</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/js-hoisting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>defer vs DOMContentLoaded</title>
      <link>https://chinsun9.github.io/2021/07/16/defer-vs-DOMContentLoaded/</link>
      <guid>https://chinsun9.github.io/2021/07/16/defer-vs-DOMContentLoaded/</guid>
      <pubDate>Fri, 16 Jul 2021 06:58:57 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;defer&lt;/code&gt;이 먼저 실행된다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;defer-여러개-실행-순서&quot;&gt;&lt;a href=&quot;#defer-여러개-실행-순서&quot; class=&quot;headerlink&quot; title=&quot;defer 여러개 실행 순</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><code>defer</code>이 먼저 실행된다</li></ul><h2 id="defer-여러개-실행-순서"><a href="#defer-여러개-실행-순서" class="headerlink" title="defer 여러개 실행 순서"></a>defer 여러개 실행 순서</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./defer.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./defer2.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>여러개의 defer가 있으면 위에서 아래로 순서대로 실행된다</li><li>defer.js 실행 -&gt; defer2.js 실행</li></ul><h2 id="async와-DOMContentLoaded는-서로-무관하다"><a href="#async와-DOMContentLoaded는-서로-무관하다" class="headerlink" title="async와 DOMContentLoaded는 서로 무관하다"></a>async와 DOMContentLoaded는 서로 무관하다</h2><ul><li>DOMContentLoaded 먼저 실행될수도 async가 먼저 실행될수도 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.javascript.info/script-async-defer">https://ko.javascript.info/script-async-defer</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/async/">async</category>
      
      <category domain="https://chinsun9.github.io/tags/defer/">defer</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/defer-vs-DOMContentLoaded/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>이미지 레이지로딩</title>
      <link>https://chinsun9.github.io/2021/07/16/lazy-loading-images/</link>
      <guid>https://chinsun9.github.io/2021/07/16/lazy-loading-images/</guid>
      <pubDate>Fri, 16 Jul 2021 06:44:03 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/the-complete-guide-to-lazy-loading-images/&quot;&gt;https://css-tricks.com/the-complete-guide-to-laz</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p><a href="https://css-tricks.com/the-complete-guide-to-lazy-loading-images/">https://css-tricks.com/the-complete-guide-to-lazy-loading-images/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/lazy-loading-images20210716/preview.png" alt=" "></p><h2 id="레이지로딩"><a href="#레이지로딩" class="headerlink" title="레이지로딩"></a>레이지로딩</h2><ul><li>페이지에 이미지가 너무 많으면 로딩 속도가 느리다</li><li>일반적으로 페이지가 로드되고 페이지에 포함된 모든 이미지가 로드된다</li><li>레이지 로딩을 사용하면 로드를 뒤로 미룰 수 있고, 원하는 타이밍에 로드할 수 있다</li><li>이를 통해 페이지를 빠르게 로딩할 수 있다</li><li>콘텐츠를 제공하는 서버 비용을 아낄 수 있다</li></ul><h2 id="src-대신-data-src사용"><a href="#src-대신-data-src사용" class="headerlink" title="src 대신 data-src사용"></a>src 대신 data-src사용</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;img src=&quot;https://via.placeholder.com/468x200?text=1&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://via.placeholder.com/468x200?text=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>를 사용하면 이미지가 로드되기 때문에, <code>src</code>는 사용하지 않는다</li><li>대신 이미지 주소를 <code>data-src</code>에 저장한다</li><li><code>data-</code>를 사용하면 js에서 <code>dataset</code>을 통해 접근할 수 있다</li></ul><h2 id="Observer-API-사용"><a href="#Observer-API-사용" class="headerlink" title="Observer API 사용"></a>Observer API 사용</h2><figure class="highlight js"><figcaption><span>public/js/method2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lazyloadImages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;IntersectionObserver&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  lazyloadImages = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.lazy&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> imageObserver = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">entries, observer</span>) </span>&#123;</span><br><span class="line">      entries.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">          <span class="keyword">const</span> image = entry.target;</span><br><span class="line">          image.src = image.dataset.src;</span><br><span class="line">          image.classList.remove(<span class="string">&#x27;lazy&#x27;</span>);</span><br><span class="line">          imageObserver.unobserve(image);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      root: <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.container&#x27;</span>),</span><br><span class="line">      rootMargin: <span class="string">&#x27;0px 0px 500px 0px&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  lazyloadImages.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">image</span>) </span>&#123;</span><br><span class="line">    imageObserver.observe(image);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Observer API를 통해 이미지가 뷰포트에 들어오면</li><li>그제야 src를 초기화해서 이미지를 로드한다</li><li>로드된 이미지는 더 이상 옵저버가 관찰하지 않도록 <code>unobserve()</code> 해준다</li><li><code>IntersectionObserver</code> 생성자 두 번째 인자로 rootMargin을 설정해줄 수 있는데,</li><li>사용하지 않았을 때, 뷰포트에 들어오면 이미지 로드가 시작되어 불러오는 반면</li><li>rootMargin을 설정해주면, 설정한 값만큼 미리 옵저버가 반응해서 이미지를 로드할 수 있도록 한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://css-tricks.com/the-complete-guide-to-lazy-loading-images/">https://css-tricks.com/the-complete-guide-to-lazy-loading-images/</a></li><li><a href="https://github.com/chinsun9/lazy-loading-images-practice">https://github.com/chinsun9/lazy-loading-images-practice</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/lazy-loading-images/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gh-pages 사용하기</title>
      <link>https://chinsun9.github.io/2021/07/16/gh-pages/</link>
      <guid>https://chinsun9.github.io/2021/07/16/gh-pages/</guid>
      <pubDate>Fri, 16 Jul 2021 06:17:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/gh-pages20210716/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;열심히 만든 </description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/gh-pages20210716/preview.png" alt=" "></p><p><em>열심히 만든 웹을 Github Pages를 통해 자랑해보자</em><br><em>이때 사용할 수 있는 간편한 패키지가 있다</em></p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i -D gh-pages</span><br><span class="line">gh-pages -d dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">npx gh-pages -d dist</span><br></pre></td></tr></table></figure><h2 id="gh-pages"><a href="#gh-pages" class="headerlink" title="gh-pages"></a>gh-pages</h2><ul><li>Github Pages 기능을 통해 정적 웹을 호스팅 할 수 있다</li><li>gh-pages라는 패키지를 사용하면 간편하게 배포할 수 있다</li><li>gh-pages를 설치하고 <code>gh-pages -d &#123;빌드 디렉터리&#125;</code> 명령을 하면,</li><li>gh-pages라는 브랜치가 자동으로 생성되고 빌드 디렉터리의 내용이 깃헙 저장소에 올라간다</li><li>github pages 세팅도 자동으로 된다</li></ul><ul><li>package.json이 프로젝트 루트 디렉터리에 존재해야 한다</li><li>바닐라 웹 프로젝트를 진행한 경우에도 gh-pages를 사용하고 싶다면,</li><li><code>npm init -y</code> 명령으로 임시로 pacakage.json을 생성하고</li><li><code>npx</code>로 gh-pages를 실행하면 된다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/tschaub/gh-pages">https://github.com/tschaub/gh-pages</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/github-pages/">github pages</category>
      
      <category domain="https://chinsun9.github.io/tags/gh-pages/">gh-pages</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/gh-pages/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>깃허브에 있는 파이썬 프로젝트 돌려보기</title>
      <link>https://chinsun9.github.io/2021/07/15/try-running-python-project-in-github/</link>
      <guid>https://chinsun9.github.io/2021/07/15/try-running-python-project-in-github/</guid>
      <pubDate>Thu, 15 Jul 2021 04:12:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;파이썬 초보가 처음 깃허브에 있는 파이썬 프로젝트들을 돌려보면서 막혔던 부분과 알게 된 부분을 정리한 글&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;내-파이썬-지식&quot;&gt;&lt;a href=&quot;#내-파이썬-지식&quot; class=&quot;headerlink&quot; title=&quot;내</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>파이썬 초보가 처음 깃허브에 있는 파이썬 프로젝트들을 돌려보면서 막혔던 부분과 알게 된 부분을 정리한 글</em></p><h2 id="내-파이썬-지식"><a href="#내-파이썬-지식" class="headerlink" title="내 파이썬 지식"></a>내 파이썬 지식</h2><ul><li>인공지능 관련 프로젝트들이 대부분 파이썬으로 작성되어 있어서</li><li>관련 프로젝트를 돌려보기 위해서는 파이썬 지식을 필요로 했다</li><li>1 ~ 2년 전에 학교 수업으로 데이터분석처리라는 과목을 들으면서 파이썬을 사용해봤는데,</li><li>os는 윈도우, 도구는 주피터 노트북으로 테이블 데이터 전처리, 데이터 시각화와 분석을 해보았었다</li><li>사용해본 모듈로는 pandas, seaborn, matplotlib, numpy, statsmodels, scipy 등이 있다</li><li>각 모듈들에 대한 숙련도는 치트 시트를 확인한 정도이다</li></ul><h2 id="리눅스에서-돌리기"><a href="#리눅스에서-돌리기" class="headerlink" title="리눅스에서 돌리기"></a>리눅스에서 돌리기</h2><ul><li>윈도우에서 프로젝트를 돌려보려고 시도했지만,</li><li>종속성을 설치하는 과정에서 불편한 것이 많아서 리눅스에서 돌려보기로 한다</li><li>WSL로 윈도우에서 쉽게 리눅스 환경을 사용할 수 있다</li><li>나는 WSL2 Ubuntu-18.04 LTS 환경에서 진행했다</li><li>vscode remote - WSL을 통해 작업했다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/try-running-python-project-in-github20210715/preview.png" alt=" "></p><h3 id="종속성-설치"><a href="#종속성-설치" class="headerlink" title="종속성 설치"></a>종속성 설치</h3><ul><li><code>apt-get</code>을 통해 필요한 종속성을 설치하는 경우,</li><li>먼저 apt를 최신 상태로 업데이트해줘야 한다</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h4 id="sudo-pip-command-not-found"><a href="#sudo-pip-command-not-found" class="headerlink" title="sudo: pip: command not found"></a>sudo: pip: command not found</h4><ul><li>pip 커맨드가 없다고 하는데, 설치해줘야 한다</li><li>pip3를 설치하고, pip 커맨드는 pip3로 대체하여 사용한다</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install python3-pip</span><br></pre></td></tr></table></figure><h4 id="requirements-txt-설치-도중-오류"><a href="#requirements-txt-설치-도중-오류" class="headerlink" title="requirements.txt 설치 도중 오류"></a>requirements.txt 설치 도중 오류</h4><ul><li><code>pip3 install -r requirements.txt</code>로 종속성을 설치하는데,</li></ul><blockquote><p>ModuleNotFoundError: No module named ‘skbuild’</p></blockquote><ul><li><p>사용하는 파이썬 버전에 따라서 설치가 안 되는 경우가 있다</p></li><li><p>나는 파이썬 3.6 버전을 사용하고 있었는데, 구글링해보니 3.7 이상이 필요하다 했다</p></li><li><p>파이썬 버전에 따라 설치할 수 있는 모듈 버전이 제한된다는 것을 알았다</p></li><li><p><a href="https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild">https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild</a></p></li><li><p>파이썬을 3.7 이상으로 업데이트한다</p></li><li><p><a href="https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/">https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/</a></p></li><li><p>업데이트 방법은 위 링크에 친절하게 나와있다</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/try-running-python-project-in-github20210715/1.png" alt=" "></p><ul><li>이런 경우 말고도 <code>no matching distribution found for numpy==1.20.0</code>처럼 버전을 가져올 수 없다는 오류도 마찬가지로 파이썬 버전을 올려주니 해결됐다</li></ul><h2 id="프로젝트-파악하기"><a href="#프로젝트-파악하기" class="headerlink" title="프로젝트 파악하기"></a>프로젝트 파악하기</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 main.py</span><br></pre></td></tr></table></figure><ul><li>기능을 추가하려면 코드가 어떻게 동작하는지 알아야 한다</li><li>여기저기 print문을 작성해보면서 차근차근 알아가 보자</li><li>파이썬 문법을 자세하게 몰라도 잘할 수 있다</li></ul><ul><li><a href="https://chinsun9.github.io/2021/07/15/python/">https://chinsun9.github.io/2021/07/15/python/</a></li><li>앞으로 위 링크에 유용한 명령어를 정리해서 업데이트할 것이다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild">https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild</a></li><li><a href="https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/">https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/wsl/">wsl</category>
      
      <category domain="https://chinsun9.github.io/tags/python/">python</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/try-running-python-project-in-github/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python 초보가 어제 오늘 배운 몇가지 명령어 모음</title>
      <link>https://chinsun9.github.io/2021/07/15/python/</link>
      <guid>https://chinsun9.github.io/2021/07/15/python/</guid>
      <pubDate>Thu, 15 Jul 2021 02:54:59 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;py&quot;&gt;&lt;a href=&quot;#py&quot; class=&quot;headerlink&quot; title=&quot;py&quot;&gt;&lt;/a&gt;py&lt;/h2&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="py"><a href="#py" class="headerlink" title="py"></a>py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 타입 알아내기</span></span><br><span class="line">print(<span class="built_in">type</span>(<span class="number">1</span>)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 앞뒤 공백 없애기 trim</span></span><br><span class="line">print(<span class="string">&#x27;      안녕      &#x27;</span>.strip()) <span class="comment"># 안녕</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열 길이 알아내기</span></span><br><span class="line">print(<span class="built_in">len</span>(<span class="string">&#x27;안녕&#x27;</span>)) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 숫자 문자열로 캐스팅</span></span><br><span class="line">print(<span class="built_in">type</span>(<span class="built_in">str</span>(<span class="number">1</span>))) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print 출력 파일로 저장하기</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout = <span class="built_in">open</span>(<span class="string">&#x27;/txt.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;안녕하세요요&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;반갑습니다&#x27;</span>)</span><br><span class="line">sys.stdout.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 텍스트 파일 저장하기</span></span><br><span class="line">text_file = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">text_file.write(<span class="string">&quot;%s&quot;</span> % <span class="string">&#x27;안녕하세요를레이&#x27;</span>)</span><br><span class="line">text_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 1 또는 0으로 초기화 된 배열 얻기</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.ones((<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">np.zeros((<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 인버트하기 ; 각 원소에 not 연산 수행</span></span><br><span class="line">np.invert(np.ones((<span class="number">10</span>,<span class="number">10</span>))) <span class="comment"># === np.zeros((10,10))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 배열 크기 확인</span></span><br><span class="line">np.ones((<span class="number">10</span>,<span class="number">10</span>)).shape <span class="comment"># (10, 10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 원소값 더하기</span></span><br><span class="line">np.ones((<span class="number">10</span>,<span class="number">10</span>)).<span class="built_in">sum</span>() <span class="comment"># 100.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 행렬 더하기</span></span><br><span class="line">(np.ones((<span class="number">10</span>,<span class="number">10</span>)) + np.ones((<span class="number">10</span>,<span class="number">10</span>))).<span class="built_in">sum</span>() <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 행렬 곱하기 ; 마스크로 쓸 수 있겠다</span></span><br><span class="line">(np.ones((<span class="number">10</span>,<span class="number">10</span>)) * np.zeros((<span class="number">10</span>,<span class="number">10</span>))).<span class="built_in">sum</span>() <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 유닉스 타임 얻기</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.time()</span><br><span class="line"><span class="built_in">str</span>(<span class="built_in">round</span>(time.time())) <span class="comment"># 파일명으로 쓸 때</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지 저장</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image <span class="comment"># PIL image</span></span><br><span class="line">image.save(<span class="string">&#x27;imageOutput.bmp&#x27;</span>,<span class="string">&#x27;BMP&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 객체 생략없이 print</span></span><br><span class="line"><span class="comment"># row 생략 없이 출력</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># col 생략 없이 출력</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 버전 확인</span></span><br><span class="line">python3 -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip 버전 확인</span></span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/python/">python</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/python/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python type</title>
      <link>https://chinsun9.github.io/2021/07/15/python-type/</link>
      <guid>https://chinsun9.github.io/2021/07/15/python-type/</guid>
      <pubDate>Thu, 15 Jul 2021 01:03:30 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line">print(<span class="built_in">type</span>(num)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>야매로 python 코드에 손을 대기 위해서 필요한 첫 번째 관문</li><li>무슨 타입인지 알아야 구글링할 수 있다</li></ul><h2 id="파이썬-기본-자료형"><a href="#파이썬-기본-자료형" class="headerlink" title="파이썬 기본 자료형"></a>파이썬 기본 자료형</h2><ul><li>bool</li><li>int / float</li><li>str</li><li>list</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/python/">python</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/python-type/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
