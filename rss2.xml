<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Sat, 10 Jul 2021 13:25:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>vscode extension insertdatestring</title>
      <link>https://chinsun9.github.io/2021/07/10/vscode-extension-insertdatestring/</link>
      <guid>https://chinsun9.github.io/2021/07/10/vscode-extension-insertdatestring/</guid>
      <pubDate>Sat, 10 Jul 2021 13:25:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-extension-insertdatestring20210710/preview.png&quot; al</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-extension-insertdatestring20210710/preview.png" alt=" "></p><ul><li>메모장에서 F5를 누르면 현재 시각이 찍힌다</li><li>vscode에서도 그런 기능이 있나 살펴보았다</li><li>없으면 확장도구!</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=jsynowiec.vscode-insertdatestring">https://marketplace.visualstudio.com/items?itemName=jsynowiec.vscode-insertdatestring</a></li><li><a href="https://github.com/jsynowiec/vscode-insertdatestring">https://github.com/jsynowiec/vscode-insertdatestring</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/extension/">extension</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/10/vscode-extension-insertdatestring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>update to wsl2</title>
      <link>https://chinsun9.github.io/2021/07/10/update-to-wsl2/</link>
      <guid>https://chinsun9.github.io/2021/07/10/update-to-wsl2/</guid>
      <pubDate>Sat, 10 Jul 2021 13:24:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;오후 9:53 2021-07-10 작성됨&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl22021</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>오후 9:53 2021-07-10 작성됨</em></p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/preview.png" alt=" "></p><ul><li><strong>Remote - WSL</strong> 확장도구가 너는 WSL1을 사용 중인데, WSL2로 업그레이드해라 알려줘서 업데이트했다</li></ul><h2 id="WSL2로-업데이트하기"><a href="#WSL2로-업데이트하기" class="headerlink" title="WSL2로 업데이트하기"></a>WSL2로 업데이트하기</h2><ul><li><code>Read More</code> 버튼을 누른다<ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions">https://docs.microsoft.com/en-us/windows/wsl/compare-versions</a></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/1.png" alt=" "></p><ul><li><p>둘 버전이 어떤 차이가 있는지 알려주는 페이지가 켜진다</p></li><li><p><code>Install WSL 1 and update to WSL 2</code> 버튼을 누른다</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps">https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps</a></li></ul></li><li><p>Windows Insiders는 간편하게 명령어 하나로 업그레이드 가능하다고 한다</p></li><li><p><code>wsl --install</code> 해보고 안되면 수동 설치를 하면 된다</p></li><li><p>수동 설치도 명령어 4번으로 간편하다</p></li><li><p>중간에 WSL2를 위한 요구사항을 체크해야 하는데,</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/2.png" alt=" "></p><ul><li>Ctrl + R <code>msinfo32</code> 또는 윈도우키로 시작 메뉴를 열고 <code>시스템 정보</code>를 입력해서 요구사항을 확인한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/4.png" alt=" "></p><figure class="highlight ps1"><figcaption><span>PowerShell (Administrator)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ul><li>위 명령어 입력 후 컴퓨터 재부팅</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/3.png" alt=" "></p><ul><li>step4에서 리눅스 커널 업데이트 패키지라는 것을 다운로드하고 실행한다<ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package</a></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/5.png" alt=" "></p><figure class="highlight ps1"><figcaption><span>PowerShell (Administrator)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br><span class="line">wsl -<span class="literal">-list</span> <span class="comment"># 설치된 배포판 이름 확인</span></span><br><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> &#123;배포판 이름&#125; <span class="number">2</span> <span class="comment"># wsl --set-version Ubuntu-20.04 2</span></span><br></pre></td></tr></table></figure><ul><li>갑자기 cmd를 썼는데, 중간에 재부팅해서 일관적으로 캡처하지 못했다 ㅠ (뭘 쓰던 상관은 없다.)</li><li>기존에 WSL을 사용하고 있는 사람에 한해서 <code>wsl --set-version</code> 명령을 실행해줘야 한다</li><li>가이드 문서를 다 따라 했는데, vscode를 켜고 Remote WSL를 사용하면 여전히 WSL1을 쓰고 있다고 말한다</li><li>알고 보니까 기존 배포판은 그대로 버전 1이 적용되고 있다</li><li>기존 배포판에 WSL2를 적용하려면 <code>wsl --set-version &#123;배포판 이름&#125; &#123;타깃 버전&#125;</code>까지 실행해줘야 한다</li><li>5분 정도 걸렸나? 시간이 조금 걸리는 작업이다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions">https://docs.microsoft.com/en-us/windows/wsl/compare-versions</a></li><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps">https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/windows/">windows</category>
      
      
      <category domain="https://chinsun9.github.io/tags/windows/">windows</category>
      
      <category domain="https://chinsun9.github.io/tags/wsl/">wsl</category>
      
      <category domain="https://chinsun9.github.io/tags/wsl2/">wsl2</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/10/update-to-wsl2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js spread syntax `...` 연산자</title>
      <link>https://chinsun9.github.io/2021/07/07/js-spread-syntax/</link>
      <guid>https://chinsun9.github.io/2021/07/07/js-spread-syntax/</guid>
      <pubDate>Wed, 07 Jul 2021 06:29:24 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(...arr); <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log([...arr]); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr === [...arr]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>리액트를 처음 공부할 때 자주 접하면서 알게 된 연산자다</li><li>상태를 변경하려면, 완전히 새로운 객체를 대입시켜줘야 한다</li><li>(참조하는 주소를 이전이랑 다르게 해야 state 갱신이 일어났다고 판단하고 화면을 갱신한다)</li><li>자바스크립트에는 괴랄한 문법이 많구나 느꼈었다</li></ul><ul><li>한 꺼풀 벗겨내는 연산자라고 생각하면 쉽다</li></ul><h2 id="배열에서-사용"><a href="#배열에서-사용" class="headerlink" title="배열에서 사용"></a>배열에서 사용</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 인자 넘기기</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> pram = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(...pram); <span class="comment">// === add(1, 2); // 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 파라미터</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> pram = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result1 = add2(...pram);</span><br><span class="line">  <span class="built_in">console</span>.log(result1);</span><br><span class="line">  <span class="keyword">const</span> result2 = add2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 이어 붙이기</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = <span class="number">111</span>;</span><br><span class="line">  <span class="keyword">const</span> subfix = <span class="number">999</span>;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">const</span> newArr = [prefix, ...arr, subfix];</span><br><span class="line">  <span class="built_in">console</span>.log(newArr); <span class="comment">// [111, 1, 2, 3, 999]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="객체에서-사용"><a href="#객체에서-사용" class="headerlink" title="객체에서 사용"></a>객체에서 사용</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 복사 및 값 일부 수정</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    b: <span class="number">10</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(obj === newObj); <span class="comment">// false</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj); <span class="comment">// b===2</span></span><br><span class="line">  <span class="built_in">console</span>.log(newObj); <span class="comment">// b===10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/spread-syntax/">spread syntax</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/07/js-spread-syntax/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js array.sort()가 원본을 바꾼다</title>
      <link>https://chinsun9.github.io/2021/07/07/js-array-api-mutate-origin/</link>
      <guid>https://chinsun9.github.io/2021/07/07/js-array-api-mutate-origin/</guid>
      <pubDate>Wed, 07 Jul 2021 05:53:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/js-array-api-mutate-origin20210707/preview.png&quot; alt=&quot; &quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/js-array-api-mutate-origin20210707/preview.png" alt=" "></p><ul><li>가끔 원본이 바뀌어서 예상치 못한 동작을 할 때가 있다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본인 arr 이 정렬됨</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">const</span> sortedArr = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line">  <span class="built_in">console</span>.log(arr === sortedArr); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 원본인 arr를 살리면서 정렬된 새 배열 얻기</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">const</span> sortedArr = [...arr].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line">  <span class="built_in">console</span>.log(arr === sortedArr); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>[...arr]</code> 이런 식으로 배열을 복사할 수 있다</li></ul><h2 id="하나-더-배열-복사할-때-주의할-점"><a href="#하나-더-배열-복사할-때-주의할-점" class="headerlink" title="하나 더, 배열 복사할 때 주의할 점"></a>하나 더, 배열 복사할 때 주의할 점</h2><ul><li>그런데 <code>number[]</code> 타입이 아니라 <code>&#123;...&#125;[]</code>같은 객체 배열이라면</li><li><code>[...arr]</code> 연산으로 새로운 배열이 만들어지기는 하지만</li><li>원소 하나하나는 여전히 <code>call by reference</code> 이기 때문에</li><li>완전한 복사본(깊은 복사)을 얻은 게 아니라는 점을 유의해야 한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/array/">array</category>
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/07/js-array-api-mutate-origin/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>perssonal access token으로 비공개 레포 git clone 하기</title>
      <link>https://chinsun9.github.io/2021/07/06/git-clone-using-pat/</link>
      <guid>https://chinsun9.github.io/2021/07/06/git-clone-using-pat/</guid>
      <pubDate>Tue, 06 Jul 2021 04:09:10 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@github.com&#x2F;chinsun9&#x2F;my-private-repo.git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;chinsun9&#x2F;my-private-repo.git</span><br><span class="line">Cloning into &#39;my-private-repo&#39;...</span><br><span class="line">Username for &#39;https:&#x2F;&#x2F;github.com&#39;: chinsun9</span><br><span class="line">Password for &#39;https:&#x2F;&#x2F;chinsun9@github.com&#39;: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><ul><li>이런 식으로 패드워드 대용으로 사용해도 되지만,</li><li>github.com 앞에 <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@</code></li><li><code>토큰@</code>를 붙여서 cli에서 입력하는 과정을 스킵할 수 있다</li><li>이때 사용하는 토큰은 <strong>repo: Full control of private repositories</strong> 권한이 필요하다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/pat/">pat</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/06/git-clone-using-pat/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>regexp lastIndex</title>
      <link>https://chinsun9.github.io/2021/07/06/regexp-lastIndex/</link>
      <guid>https://chinsun9.github.io/2021/07/06/regexp-lastIndex/</guid>
      <pubDate>Tue, 06 Jul 2021 00:57:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;정규식 test는 true인데 exec가 동작하지 않는다?!&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;work!&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>정규식 test는 true인데 exec가 동작하지 않는다?!</em></p><figure class="highlight js"><figcaption><span>work!</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (regexp.test(line)) &#123;</span><br><span class="line">  <span class="comment">// 내부 포인터 재설정</span></span><br><span class="line">  regexp.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> match = regexp.exec(line);</span><br><span class="line">  <span class="keyword">while</span> (match) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>regexp.lastIndex = 0</code></li></ul><h2 id="잘못된-코드"><a href="#잘못된-코드" class="headerlink" title="잘못된 코드"></a>잘못된 코드</h2><figure class="highlight js"><figcaption><span>not work!</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (regexp.test(line)) &#123;          <span class="comment">// 여기서 lastIndex 갱신</span></span><br><span class="line">  <span class="keyword">let</span> match = regexp.exec(line);  <span class="comment">// 갱신된 lastIndex부터 검색을 시작해서 첫번째 결과가 스킵됨.</span></span><br><span class="line">  <span class="keyword">while</span> (match) &#123;                 <span class="comment">// 라인에 일치하는 패턴이 한개라면 반복문한 한번도 돌지 않음</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>처음에 작성한 코드다</li><li>파일의 라인 한 줄 한 줄 읽으면서</li><li>정규식 패턴과 일치하는 라인이라면</li><li>결괏값을 받도록 만들었는데, 이상하게도 제대로 동작하지 않았다</li><li>알고 보니까 <code>test()</code> 메서드도 lastIndex를 갱신했었다…</li><li>사실 저 <code>if (regexp.test(line)) &#123;</code>은 필요 없는 코드 같다</li><li><code>test</code>와 <code>exec</code>를 같이 쓸 때 주의가 필요하다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/regexp/">regexp</category>
      
      <category domain="https://chinsun9.github.io/tags/lastIndex/">lastIndex</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/06/regexp-lastIndex/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vscode 나만의 스니펫 만들어서 사용하기</title>
      <link>https://chinsun9.github.io/2021/07/02/vscode-custom-snippet/</link>
      <guid>https://chinsun9.github.io/2021/07/02/vscode-custom-snippet/</guid>
      <pubDate>Fri, 02 Jul 2021 00:44:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;상황&quot;&gt;&lt;a href=&quot;#상황&quot; class=&quot;headerlink&quot; title=&quot;상황&quot;&gt;&lt;/a&gt;상황&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;여러 테스트 파일을 만드는데, 기본적으로 작성해야 하는 틀이 있다&lt;/li&gt;
&lt;li&gt;기본 틀이 되는 코드를 &lt;em&gt;s</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>여러 테스트 파일을 만드는데, 기본적으로 작성해야 하는 틀이 있다</li><li>기본 틀이 되는 코드를 <em>scaffold.test.ts</em> 파일로 만들어서 내용을 복사해서 사용하거나, 복사본을 만들면서 새로운 테스트 파일들을 생성했다</li><li>반복하다 보니까 이마저도 불편했다</li><li>그러다가 커스텀 스니펫을 만들기로 한다</li></ul><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-custom-snippet20210701/preview.gif" alt=" "></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  test(<span class="string">&#x27;should &#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(solution(prams)).toEqual(er);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>내 목표는 <code>te</code>를 입력하면 내가 등록한 스니펫을 통해 위 코드를 완성시킬 것이다</li></ul><h2 id="스니펫-만들기"><a href="#스니펫-만들기" class="headerlink" title="스니펫 만들기"></a>스니펫 만들기</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-custom-snippet20210701/1.png" alt=" "></p><ul><li>상단바에서</li><li><code>File &gt; Preferences &gt; User Snippets</code> 을 선택한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-custom-snippet20210701/2.png" alt=" "></p><ul><li>어떤 언어에서 만들 것인지 선택한다</li><li>나는 타입스크립트에서 사용할 것이다</li><li>그러면 <code>%userprofile%\AppData\Roaming\Code\User\snippets\typescript.json</code>이라는 파일이 생성되고</li><li>설명과 예제가 나와있다</li></ul><figure class="highlight json"><figcaption><span>%userprofile%\AppData\Roaming\Code\User\snippets\typescript.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line">  <span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">  <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span></span><br><span class="line">  <span class="comment">// same ids are connected.</span></span><br><span class="line">  <span class="comment">// Example:</span></span><br><span class="line">  <span class="attr">&quot;cotejs test&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;te&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;/**&quot;</span>,</span><br><span class="line">      <span class="string">&quot;* $&#123;1:problem&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;*/&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;describe(&#x27;$&#123;2:id&#125;&#x27;, () =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;$0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  test(&#x27;should &#x27;, () =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    expect(solution($&#123;3:prams&#125;)).toEqual(er);&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &#125;);&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;);&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;base&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prefix ; 나는 <code>te</code>로 설정했다. 스니펫이 어떤 문자열에 추천될지 설정하는 곳이다</li><li>body ; 내가 완성시키고 싶은 스니펫을 등록한다. 줄 바꿈을 기준으로 배열로 쪼개 줘야 한다</li><li>description ; 스니펫에 대한 설명을 적는다</li></ul><ul><li>특히 자동 완성할 때 tab를 누르면 커서가 원하는 순서로 이동하게 할 수 있다</li><li><code>$1, $2, $3,..., $n, $0</code>을 통해서 가능하다</li><li>각 커서에 기본값을 추가하고 싶으면 <code>$&#123;1:one&#125;</code> 이런 식으로 가능하다</li><li><code>$0</code>은 마지막 커서 위치를 설정할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/snippet/">snippet</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/02/vscode-custom-snippet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>모바일 크롬 개발자 도구 사용, 포트포워딩해서 localhost 환경 만들기</title>
      <link>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/</link>
      <guid>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/</guid>
      <pubDate>Thu, 01 Jul 2021 04:26:39 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;모바일에서 동작하는 &lt;code&gt;devicemotion&lt;/code&gt; 이벤트 등 디버깅하기 위해 개발자 도구를 봐야 했다&lt;/li&gt;
&lt;li&gt;모바일에서 개발자 도구를 어떻게 켜는지 등 찾아보다가&lt;/li&gt;
&lt;li&gt;핸드폰을 데탑에 연결하고&lt;/li</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>모바일에서 동작하는 <code>devicemotion</code> 이벤트 등 디버깅하기 위해 개발자 도구를 봐야 했다</li><li>모바일에서 개발자 도구를 어떻게 켜는지 등 찾아보다가</li><li>핸드폰을 데탑에 연결하고</li><li>데탑의 크롬에서 console의 출력 결과를 확인할 수 있다</li><li>그리고 모바일 화면을 미러링 해준다</li></ul><h2 id="하는-법"><a href="#하는-법" class="headerlink" title="하는 법"></a>하는 법</h2><blockquote><p>“[Android 개발] 크롬 개발자 도구 모바일 디버깅/Mobile Debugging/ PC에서 모바일 디버깅 / 모바일 개발환경 구축”<br><a href="https://backstreet-programmer.tistory.com/30">https://backstreet-programmer.tistory.com/30</a></p></blockquote><ul><li>위 블로그를 참고해서 핸드폰과 데탑을 연결했다</li></ul><h2 id="포트포워딩-하기"><a href="#포트포워딩-하기" class="headerlink" title="포트포워딩 하기"></a>포트포워딩 하기</h2><ul><li><code>devicemotion</code>, <code>geolocation</code> 등 보안 컨텍스트가 필요한 Web API의 경우 localhost로 만들어줘야 한다</li><li>내부IP:PORT 해서 접속은 할 수 있지만,</li><li><code>devicemotion</code>가 정상 동작하려면 localhost여야 한다</li></ul><h3 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h3><ul><li><p>데탑에서 웹 개발 진행 중</p></li><li><p>로컬에서 5500 포트로 웹서버가 열려있음</p></li><li><p>모바일에서 위 웹서버에 접속하려면 <code>내부아이피:포트</code>를 입력해야함</p></li><li><p>모바일에서 <code>localhost:5500</code>을 입력해서 접속할 수 있도록 해보자</p></li><li><p>chrome://inspect/#devices 에 접속한다</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/1.png" alt=" "></p><ul><li>내 핸드폰이 잘 연결되었는지 확인한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/preview.png" alt=" "></p><ul><li>포트 포워딩 버튼을 누른다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/2.png" alt=" "></p><ul><li>5500 포트와 localhost:5500을 매칭시켰다</li><li>이제 핸드폰 크롬에서 localhost:5500으로 접속하면 웹서버에 접속할 수 있다!</li><li>물론 Web API도 모두 잘 동작한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://backstreet-programmer.tistory.com/30">https://backstreet-programmer.tistory.com/30</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/chrome/">chrome</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js empty array</title>
      <link>https://chinsun9.github.io/2021/07/01/js-empty-array/</link>
      <guid>https://chinsun9.github.io/2021/07/01/js-empty-array/</guid>
      <pubDate>Thu, 01 Jul 2021 01:58:05 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;new Array(n)&lt;/code&gt;으로 초기화한 배열에 array api가 동작하지 않았다&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>new Array(n)</code>으로 초기화한 배열에 array api가 동작하지 않았다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.length, arr); <span class="comment">// 5 [ &lt;5 empty items&gt; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">1</span>), arr); <span class="comment">// 6 [ &lt;5 empty items&gt;, 1 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">2</span>), arr); <span class="comment">// 7 [ &lt;5 empty items&gt;, 1, 2 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.map(<span class="function">(<span class="params">v</span>) =&gt;</span> v * <span class="number">2</span>)); <span class="comment">// [ &lt;5 empty items&gt;, 2, 4 ]</span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`-----------`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = arr[index];</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">  arr[index] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`-----------`</span>);</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>위에 map이나 forEach를 보면 array api가 초기화하지 않은 인덱스에 대해 동작하지 않는 것을 확인할 수 있다</li><li>직접 for문으로 찍어보면 undefined이라 나온다</li><li>그러면서 undefined으로 전부 초기화해줬다</li><li>직접 초기화해주니까 array api forEach가 동작하는 것을 확인할 수 있다</li></ul><ul><li>array api를 동작하지 않는 것을 경험했다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>).fill(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>이런 식으로 특정 값으로 직접 초기화를 해줘야 스킵되지 않고 정상적으로 api를 사용할 수 있다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/array/">array</category>
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/js-empty-array/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>공식문서가 어려운 이유</title>
      <link>https://chinsun9.github.io/2021/07/01/why-official-docs-difficult/</link>
      <guid>https://chinsun9.github.io/2021/07/01/why-official-docs-difficult/</guid>
      <pubDate>Thu, 01 Jul 2021 01:27:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;처음 웹 개발을 공부하기 시작할 때 mdn보다 w3school을 가게되는지…&lt;/p&gt;
&lt;h2 id=&quot;공식문서가-어려운-이유&quot;&gt;&lt;a href=&quot;#공식문서가-어려운-이유&quot; class=&quot;headerlink&quot; title=&quot;공식문서가 어려운 이유&quot;&gt;&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>처음 웹 개발을 공부하기 시작할 때 mdn보다 w3school을 가게되는지…</p><h2 id="공식문서가-어려운-이유"><a href="#공식문서가-어려운-이유" class="headerlink" title="공식문서가 어려운 이유"></a>공식문서가 어려운 이유</h2><ul><li>모르는 걸 모르게 설명한다</li><li>엄청 디테일해서 TMI다</li><li>엄청 생략된 예제</li><li>영어</li></ul><h3 id="모르는-걸-모르게-설명한다"><a href="#모르는-걸-모르게-설명한다" class="headerlink" title="모르는 걸 모르게 설명한다"></a>모르는 걸 모르게 설명한다</h3><ul><li>공식 문서를 작성하시는 분들은 당연히도 그 기술에 대해 빠삭하신 분들이다</li><li>해당 기술을 잘 알고 있는 사람들한테는 최고의 문서일 것이다</li><li>하지만 초보가 문서를 읽었을 때 개발 경험 부족으로 센스가 부족해서</li><li>아주 간단한 것일지라도 막힐 때가 있다</li></ul><ul><li>사전에서 어떤 단어를 찾았는데 그 단어가 또다시 모르는 단어로 설명되어 있는 느낌</li></ul><h3 id="엄청-디테일해서-TMI다"><a href="#엄청-디테일해서-TMI다" class="headerlink" title="엄청 디테일해서 TMI다"></a>엄청 디테일해서 TMI다</h3><ul><li>나는 빨리 헬로월드를 출력하고 싶은데, 뭔가 글이 길고 복잡해 보인다</li><li>install 할 때 여러 옵션들, cli 명령어의 여러 옵션들 등</li><li>실행만 하는데도 너무 어려울 것 같은 인상을 준다</li><li>나는 보통 스크롤이 길고 빼곡한 줄글이 있으면 탈주가 하고 싶다</li></ul><h3 id="엄청-생략된-예제"><a href="#엄청-생략된-예제" class="headerlink" title="엄청 생략된 예제"></a>엄청 생략된 예제</h3><ul><li>프로젝트 세팅 및 디렉터리 구조 등 생략된 것이 많이 있다</li><li>처음 접할 때 내가 튜토리얼을 잘 따라가고 있는지 의문이 들 때가 많이 있다</li><li>명령어를 실행해야 하는 디렉터리가 어디인지</li><li>어디에 파일을 생성해야 하는지</li><li>프로젝트 세팅을 어떻게 해야 하는지</li><li>알고 보면 너무 당연한 베이스지만 초보라면 그것조차 너무 어렵다 ㅠㅠ</li></ul><h3 id="영어"><a href="#영어" class="headerlink" title="영어"></a>영어</h3><ul><li>안 그래도 무슨 말인지 잘 모르는데 영어 ㅠㅠ</li><li>기술 용어들이 많아서 번역을 써도 이상한 경우가 많이 있다</li></ul><h2 id="생각"><a href="#생각" class="headerlink" title="생각"></a>생각</h2><ul><li>공식문서를 보는 게 좋다 주변에서 들었지만</li><li>나는 공식문서 보다가 <code>ctrl w</code>를 누른 적이 너무 많다</li><li>요즘에야 많이 익숙해지고 센스도 늘어서 공식문서를 예전보다는 많이 읽는 편이다</li></ul><ul><li>하지만 요즘도 처음 사용하는 라이브러리라든가</li><li>빠른 프로젝트 적용 또는 시작을 위해 youtube를 참고한다</li><li>영상만큼 직관적인 게 없다고 생각한다</li><li>정적인 문서로는 초보자를 이해시키는 게 어렵다</li><li>영상은 변경사항을 업데이트하기가 어려운 단점이 있다</li><li>영상 제작은 아무래도 노력이 많이 필요하다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <category domain="https://chinsun9.github.io/tags/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/why-official-docs-difficult/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>unary plus</title>
      <link>https://chinsun9.github.io/2021/07/01/unary-plus/</link>
      <guid>https://chinsun9.github.io/2021/07/01/unary-plus/</guid>
      <pubDate>Thu, 01 Jul 2021 00:41:20 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;무엇이든 숫자로 캐스팅하는 연산자&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>무엇이든 숫자로 캐스팅하는 연산자</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+-<span class="number">1</span>);</span><br><span class="line"><span class="comment">// expected output: -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;12&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: 12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0xff</span>);</span><br><span class="line"><span class="comment">// expected output: 255</span></span><br></pre></td></tr></table></figure><ul><li>전에 <a href="https://chinsun9.github.io/2020/12/21/string-to-number-%EC%9A%94%EC%83%81%ED%95%9C-%EB%AC%B8%EB%B2%95-js/">string to number 요상한 문법 (js)</a>이라고 올린 적 있다</li><li>그때 사용 했던 <code>+</code>연산자를 <strong>unary plus</strong>라고 부르는 것을 알게 되었다</li></ul><ul><li>이 연산의 반환 값은 숫자다</li><li>보통 10진 숫자로 된 문자열을 숫자로 바꿀 때 사용하지만</li><li>true, false, null, 16진수 등 다양한 인풋을 지원한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/unary-plus/">unary plus</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/unary-plus/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>eslint prefer-destructuring</title>
      <link>https://chinsun9.github.io/2021/06/25/eslint-prefer-destructuring/</link>
      <guid>https://chinsun9.github.io/2021/06/25/eslint-prefer-destructuring/</guid>
      <pubDate>Fri, 25 Jun 2021 12:34:31 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;Use array destructuring.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Use array destructuring.</p></blockquote><ul><li>???</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> arrarr = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">11</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">21</span>],</span><br><span class="line">];</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">time = arrarr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line">[[time]] = arrarr; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">time = arrarr[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line">[, [, time]] = arrarr; <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><ul><li>홀리…</li><li>배열과 오브젝트는 구조 분해 할당할 수 있다</li><li>오브젝트의 경우 자주 사용하지만, 배열의 경우는 별로 사용해본적이 없다</li><li>리액트를 쓰면서 useState에서 state와 setState함수를 받을 때 주로 사용했지,</li><li>이렇게 이미 선언해서 쓰던 변수에 값을 덮어쓸 때 사용해서 약간 충격이다</li><li>배열에 변수가 아닌 정적인 상수 인덱스를 통해서 꺼내는 경우 구조 분해 할당을 사용하라고 추천해줘서 알게 되었다</li></ul><ul><li>근데 상수 인덱스가 너무 큰 경우에는 오히려 가독성이 떨어질 것 같다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://eslint.org/docs/rules/prefer-destructuring">https://eslint.org/docs/rules/prefer-destructuring</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/eslint/">eslint</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/25/eslint-prefer-destructuring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>script태그 defer, async</title>
      <link>https://chinsun9.github.io/2021/06/24/script-defer-async/</link>
      <guid>https://chinsun9.github.io/2021/06/24/script-defer-async/</guid>
      <pubDate>Thu, 24 Jun 2021 13:56:38 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;처음 웹 프로그래밍을 배울 때 스크립트 태그는 body 최하단에 위치시키라고 배웠다&lt;/li&gt;
&lt;li&gt;스크립트 로드 타이밍을 뒤로 미뤄서 돔을 조작하는 스크립트가 잘 동작한다&lt;/li&gt;
&lt;li&gt;근데 요즘에는 스크립트 태그를 head 안에 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>처음 웹 프로그래밍을 배울 때 스크립트 태그는 body 최하단에 위치시키라고 배웠다</li><li>스크립트 로드 타이밍을 뒤로 미뤄서 돔을 조작하는 스크립트가 잘 동작한다</li><li>근데 요즘에는 스크립트 태그를 head 안에 선언하는 경우가 많다</li><li>defer를 사용하면 위에서 말한 효과를 볼 수 있다</li><li>근데 defer 말고도 async라는 속성을 줄 수 있다</li><li>둘이 차이는 뭘까?</li></ul><h2 id="default-blocking-further-parsing"><a href="#default-blocking-further-parsing" class="headerlink" title="default (blocking further parsing)"></a>default (blocking further parsing)</h2><ul><li>스크립트 태그를 만나면 파싱을 멈추고 스크립트를 로드하고 실행한다</li><li>이 때 HTML 파싱을 멈춘다</li><li>스크립트가 로드 다 끝나면 이어서 남은 파싱을 진행한다</li><li>스크립트가 헤비 하면 화면이 안 그려지고 사용자가 떠날 확률도 높아지겠다</li></ul><h2 id="defer-async-공통"><a href="#defer-async-공통" class="headerlink" title="defer, async 공통"></a>defer, async 공통</h2><ul><li>스크립트는 스크립트대로 로드하고 HTML 파싱은 계속된다</li><li>비동기적이다</li></ul><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><ul><li>스크립트 로드가 완료되었다고 바로 실행되지 않는다</li><li>HTML 파싱이 모두 끝나면 실행된다</li><li>주로 돔을 조작하는 스크립트를 로드할 때 사용하면 된다</li></ul><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><ul><li>스크립트가 로드되고 바로 실행된다</li><li>돔을 조작하는 스크립트가 없을 때 사용하는 것이 좋다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement">https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/async/">async</category>
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      <category domain="https://chinsun9.github.io/tags/defer/">defer</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/24/script-defer-async/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>promise async await 예제</title>
      <link>https://chinsun9.github.io/2021/06/23/promise-async-await-example/</link>
      <guid>https://chinsun9.github.io/2021/06/23/promise-async-await-example/</guid>
      <pubDate>Wed, 23 Jun 2021 09:16:38 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise는 선언과 동시에 실행된다</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunction</span>(<span class="params">delay, memo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`in`</span>, memo);</span><br><span class="line">  <span class="keyword">const</span> thisIsPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`done`</span>, memo);</span><br><span class="line">      resolve(delay);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> thisIsPromise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchData = asyncFunction.bind(<span class="literal">null</span>, <span class="number">1000</span>, <span class="string">&#x27;fetchData&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fetchHeavyData = asyncFunction.bind(<span class="literal">null</span>, <span class="number">3000</span>, <span class="string">&#x27;fetchHeavyData&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`start main`</span>);</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">`main`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">await</span> fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> fetchData();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = add(a, b);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`main result`</span>, result);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">`main`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`start main2`</span>);</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">`main2`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = fetchData();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promiseResultArr = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([a, b]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = add(...promiseResultArr);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`main2 result`</span>, result);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">`main2`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"><span class="comment">// main2();</span></span><br></pre></td></tr></table></figure><ul><li>친구한테 비동기에 대해 설명하면서 만든 예제 코드다</li></ul><h2 id="설명하기"><a href="#설명하기" class="headerlink" title="설명하기"></a>설명하기</h2><ul><li>비동기 초보 친구한테 설명하면서 어떤 부분을 설명했나?</li></ul><h3 id="await은-async함수-내부에서-사용-가능"><a href="#await은-async함수-내부에서-사용-가능" class="headerlink" title="await은 async함수 내부에서 사용 가능"></a>await은 async함수 내부에서 사용 가능</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 work</span></span><br><span class="line">fetchData().then(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 not work</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> fetchData();</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><ul><li>위는 동작하고, 아래는 동작하지 않는다고 해서</li><li>await 키워드 사용은 async 함수 내부에서만 가능하다고 말했다</li></ul><h3 id="express에서-비동기"><a href="#express에서-비동기" class="headerlink" title="express에서 비동기"></a>express에서 비동기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 work...</span></span><br><span class="line">router.get(<span class="string">&#x27;/async&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 work</span></span><br><span class="line">router.get(<span class="string">&#x27;/async&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  res.json(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>1로 했을 때 어떻게 동작하냐 해서</li><li>2로 하는 게 좋을 것 같다고 했다</li><li>실제로 테스트 결과 1, 2 모두 잘 동작했다</li><li>1의 경우 안될 줄 알았는데 express가 똑똑한 건가…</li></ul><h3 id="then-콜백-함수에서-return"><a href="#then-콜백-함수에서-return" class="headerlink" title="then 콜백 함수에서 return"></a>then 콜백 함수에서 return</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 not work</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 work</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1의 경우에서 함수 f의 반환 값이 없다 하여,</li><li>then 콜백 함수에서 return이 함수 f의 리턴을 의미하지 않는다고 말했다</li></ul><h3 id="체이닝"><a href="#체이닝" class="headerlink" title="체이닝"></a>체이닝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>) <span class="comment">// 1000</span></span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line">  &#125;) <span class="comment">// 2000</span></span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result + <span class="number">200</span>;</span><br><span class="line">  &#125;); <span class="comment">// 2200</span></span><br></pre></td></tr></table></figure><ul><li>then을 끝까지 수행한 후에 결괏값을 반환한다고 알려줬다</li><li>a에는 2200이 들어간다</li></ul><h3 id="생략-표현"><a href="#생략-표현" class="headerlink" title="생략 표현"></a>생략 표현</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(add1);</span><br><span class="line">asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> add1(res));</span><br></pre></td></tr></table></figure><ul><li>인자를 그대로 다른 함수에 넘겨주는 경우 생략이 가능하다</li></ul><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">await</span> fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> fetchData();</span><br><span class="line">  <span class="keyword">const</span> result = add(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> a = fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = fetchData();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promiseResultArr = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([a, b]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = add(...promiseResultArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>promise는 선언과 동시에 실행된다</li><li>1의 경우 서로 무관한 비동기 흐름을 순차적으로 처리한다</li><li>2의 경우 <code>Promise.all</code>을 사용해 병렬 처리하여 1보다 효율적이다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/23/promise-async-await-example/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>blog fix 카피 버튼이 안나오는 문제</title>
      <link>https://chinsun9.github.io/2021/06/22/blog-fix-copy-button-not-dispalyed/</link>
      <guid>https://chinsun9.github.io/2021/06/22/blog-fix-copy-button-not-dispalyed/</guid>
      <pubDate>Tue, 22 Jun 2021 08:35:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-fix-copy-button-not-dispalyed20210622/preview.gif&quot; a</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-fix-copy-button-not-dispalyed20210622/preview.gif" alt=" "></p><ul><li>블로그에 코드 스니펫 오른쪽 위에 카피 버튼이 나올 때도 있고 안 나올 때도 있었다</li><li>무한 새로고침하면 종종 모습을 비춘다… (이스터에그도 아닌 것이..)</li></ul><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><ul><li>hexo-theme-icarus v4.0.1</li></ul><h2 id="해결하기"><a href="#해결하기" class="headerlink" title="해결하기"></a>해결하기</h2><ul><li>일단 어디서 이 버튼을 생성하는지 알아내야 한다</li><li>버튼이 정상적으로 출력되었을 때 해당 버튼의 클래스명을 확인했다</li><li>그리고 <code>main.js</code>라는 곳에서 동적으로 버튼을 생성하고 있음을 알아냈다</li></ul><figure class="highlight js"><figcaption><span>themes\icarus\source\js\main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(clipboard, <span class="keyword">typeof</span> ClipboardJS);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> ClipboardJS !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; clipboard) &#123;</span><br><span class="line">  $(<span class="string">&#x27;figure.highlight&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="string">&#x27;code-&#x27;</span> + <span class="built_in">Date</span>.now() + ((<span class="built_in">Math</span>.random() * <span class="number">1000</span>) | <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> button =</span><br><span class="line">      <span class="string">&#x27;&lt;a href=&quot;javascript:;&quot; class=&quot;copy&quot; title=&quot;Copy&quot; data-clipboard-target=&quot;#&#x27;</span> +</span><br><span class="line">      id +</span><br><span class="line">      <span class="string">&#x27; .code&quot;&gt;&lt;i class=&quot;fas fa-copy&quot;&gt;&lt;/i&gt;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    $(<span class="built_in">this</span>).attr(<span class="string">&#x27;id&#x27;</span>, id);</span><br><span class="line">    $(<span class="built_in">this</span>).find(<span class="string">&#x27;figcaption div.level-right&#x27;</span>).append(button);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> ClipboardJS(<span class="string">&#x27;.highlight .copy&#x27;</span>); <span class="comment">// eslint-disable-line no-new</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>조건문에 <code>ClipboardJS</code>가 있으면 버튼을 생성하는데</li><li>main.js에는 ClipboardJS에 대해 따로 선언이 없었고, 외부 라이브러리라는 것을 알았다</li><li>이 ClipboardJS가 어디서 오는지 확인해야 했다</li></ul><figure class="highlight js"><figcaption><span>themes\icarus\layout\common\scripts.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  clipboard &amp;&amp; (</span><br><span class="line">    &lt;script</span><br><span class="line">      src=&#123;cdn(<span class="string">&#x27;clipboard&#x27;</span>, <span class="string">&#x27;2.0.4&#x27;</span>, <span class="string">&#x27;dist/clipboard.min.js&#x27;</span>)&#125;</span><br><span class="line">      <span class="comment">// async</span></span><br><span class="line">      defer</span><br><span class="line">    &gt;&lt;/script&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>layout\common\scripts.jsx</code>에서 가져오는 코드를 확인했는데</li><li><code>async</code>으로 가져오고 있었다</li><li>문제는 clipboardJS가 로드되기 전에 main.js가 먼저 실행되는 문제였다</li><li><code>defer</code>로 수정하니까 잘 동작했다!</li></ul><h2 id="최신-버전-확인"><a href="#최신-버전-확인" class="headerlink" title="최신 버전 확인"></a>최신 버전 확인</h2><ul><li>hexo-theme-icarus v4.2.0</li><li>최신 버전을 확인하니까 defer로 변경되어있었다… (이슈 검색했을 때는 못 찼았다…)</li><li>처음부터 최신 버전을 참고하면 좋았겠다</li></ul><ul><li>9개월 정도 나름대로 커스텀하면서 사용해왔는데,</li><li>나중에 시간 나면 커스텀한 내용을 유지하면서 최신 버전에 맞게 업데이트해줘야겠다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><h3 id="async-defer"><a href="#async-defer" class="headerlink" title="async, defer"></a>async, defer</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement">https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/blog-history/">blog history</category>
      
      
      <category domain="https://chinsun9.github.io/tags/blog-history/">blog history</category>
      
      <category domain="https://chinsun9.github.io/tags/async/">async</category>
      
      <category domain="https://chinsun9.github.io/tags/defer/">defer</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/blog-fix-copy-button-not-dispalyed/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github topic</title>
      <link>https://chinsun9.github.io/2021/06/22/github-topic/</link>
      <guid>https://chinsun9.github.io/2021/06/22/github-topic/</guid>
      <pubDate>Tue, 22 Jun 2021 04:59:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-topic20210622/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;저</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-topic20210622/preview.png" alt=" "></p><ul><li>저장소와 관련된 태그? 같은 것을 나열할 수 있는 기능이다</li><li>사용하면 무엇을 하는 저장소인지 나타내기 좋을 것 같다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/classifying-your-repository-with-topics">https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/classifying-your-repository-with-topics</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/github-topic/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>jest &#39;describe&#39; is not defined</title>
      <link>https://chinsun9.github.io/2021/06/22/eslint-with-jest/</link>
      <guid>https://chinsun9.github.io/2021/06/22/eslint-with-jest/</guid>
      <pubDate>Tue, 22 Jun 2021 04:31:50 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight json&quot;&gt;&lt;figcaption&gt;&lt;span&gt;.eslintrc.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight json"><figcaption><span>.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>env에 추가해준다</li></ul><ul><li>⚠️ 추가 해주고 <code>F1 &gt; eslint.restart</code> 명령을 실행해 eslint를 재부팅한다</li></ul><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>jest를 eslint와 처음 사용해본다</li></ul><blockquote><p>eslint(no-undef)</p></blockquote><blockquote><p>‘describe’ is not defined.<br>‘test’ is not defined.<br>‘expect’ is not defined.</p></blockquote><ul><li>위 에러가 나왔다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/44611190/using-jest-in-my-react-app-describe-is-not-defined">https://stackoverflow.com/questions/44611190/using-jest-in-my-react-app-describe-is-not-defined</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/eslint/">eslint</category>
      
      <category domain="https://chinsun9.github.io/tags/jest/">jest</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/eslint-with-jest/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>tldr</title>
      <link>https://chinsun9.github.io/2021/06/22/tldr/</link>
      <guid>https://chinsun9.github.io/2021/06/22/tldr/</guid>
      <pubDate>Tue, 22 Jun 2021 04:22:23 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;too long; didn’t read&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;tl;dr&lt;/li&gt;
&lt;li&gt;요약&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;참고&quot;&gt;&lt;a href=&quot;#참고&quot; class=&quot;headerlink&quot; t</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>too long; didn’t read</p></blockquote><ul><li>tl;dr</li><li>요약</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.wikipedia.org/wiki/TL;DR">https://ko.wikipedia.org/wiki/TL;DR</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/tldr/">tldr</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/tldr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>커밋 메시지 작성을 도와줄 확장도구 vscode-conventional-commits</title>
      <link>https://chinsun9.github.io/2021/06/22/vscode-conventional-commits/</link>
      <guid>https://chinsun9.github.io/2021/06/22/vscode-conventional-commits/</guid>
      <pubDate>Tue, 22 Jun 2021 02:15:28 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-conventional-commits20210622/preview.png&quot; alt=&quot; &quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-conventional-commits20210622/preview.png" alt=" "></p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>기존에 <strong>Visual Studio Code Commitizen Support</strong> 확장 도구를 사용하고 있었다</li><li>그런데 커밋 body에 적는 내용이 어째선지 반영되지 않았다…</li><li>관련해서 구글링을 해봤는데 도움되는 내용을 찾지 못했다</li><li>그러다가 다른 확장도구를 발견했다</li></ul><h2 id="Conventional-Commits"><a href="#Conventional-Commits" class="headerlink" title="Conventional Commits"></a>Conventional Commits</h2><ul><li><strong>Conventional Commits</strong>이라는 확장도구이다</li><li>사용법은 Commitizen과 동일하다</li><li>이 확장도구를 사용하면 body(description)가 정상적으로 등록된다!</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits">https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits</a></li><li><a href="https://github.com/vivaxy/vscode-conventional-commits">https://github.com/vivaxy/vscode-conventional-commits</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/extension/">extension</category>
      
      <category domain="https://chinsun9.github.io/tags/commit/">commit</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/vscode-conventional-commits/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>디바운스와 스로틀</title>
      <link>https://chinsun9.github.io/2021/06/21/debounce-throttle/</link>
      <guid>https://chinsun9.github.io/2021/06/21/debounce-throttle/</guid>
      <pubDate>Mon, 21 Jun 2021 05:28:15 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;스크롤 이벤트가 발생하면 &lt;code&gt;1&lt;/code&gt;을 출력하는 함수를 실행시킨다고 하자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;기본&quot;&gt;&lt;a href=&quot;#기본&quot; class=&quot;headerlink&quot; title=&quot;기본&quot;&gt;&lt;/a&gt;기본&lt;/h2&gt;&lt;ul&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>스크롤 이벤트가 발생하면 <code>1</code>을 출력하는 함수를 실행시킨다고 하자</li></ul><h2 id="기본"><a href="#기본" class="headerlink" title="기본"></a>기본</h2><ul><li>아날로그 신호처럼 콘솔창에 1이 찍힌다</li></ul><h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><ul><li>설정한 주기를 간격으로 1이 찍힌다</li></ul><ul><li>쓰로틀은 연속된 이벤트를 설정한 시간 간격</li><li>예) 스크롤중 300ms 마다 함수 실행</li><li>예) 네이버 검색창 자동완성</li></ul><h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><ul><li>스크롤 이벤트 도중에는 아무것도 일어나지 않는다</li><li>이벤트가 끝나고 설정한 1이 찍힌다</li></ul><ul><li>디바운스는 연속된 이벤트가 멈추고, 한번 실행한다</li><li>마지막 이벤트로부터 설정한 시간만큼 이벤트가 발생하지 않으면 실행한다</li><li>예) 스크롤이 멈추고 300ms 뒤에 함수 실행</li><li>예) 버튼을 연속적으로 여러 번 눌러도 한 번만 실행되는… (광클 방지)</li></ul><h2 id="쓰는-이유"><a href="#쓰는-이유" class="headerlink" title="쓰는 이유"></a>쓰는 이유</h2><ul><li>디바운스와 쓰로틀은 부하를 줄이기 위해 사용한다</li><li>매 이벤트마다 비싼 API를 호출하는 것을 방지할 수 있다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      <category domain="https://chinsun9.github.io/tags/debounce/">debounce</category>
      
      <category domain="https://chinsun9.github.io/tags/throttle/">throttle</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/21/debounce-throttle/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
