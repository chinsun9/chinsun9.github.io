<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Wed, 02 Jun 2021 00:05:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>blog update dark theme</title>
      <link>https://chinsun9.github.io/2021/06/01/blog-update-dark-theme/</link>
      <guid>https://chinsun9.github.io/2021/06/01/blog-update-dark-theme/</guid>
      <pubDate>Tue, 01 Jun 2021 14:21:19 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-update-dark-theme20210601/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-update-dark-theme20210601/preview.png" alt=" "></p><ul><li>캬캬캬</li><li>블로그 dark 테마 적용</li></ul><ul><li><strong>상단 오른쪽 검색 버튼 옆에서 토글 할 수 있다!!</strong></li></ul><h2 id="다크-테마를-적용한-이유"><a href="#다크-테마를-적용한-이유" class="headerlink" title="다크 테마를 적용한 이유"></a>다크 테마를 적용한 이유</h2><ul><li>github 프로필 메인에 dark theme를 토글하는 버튼이 있었는데</li><li>어느샌가 세팅 하위 메뉴로 들어가야 변경이 가능했다</li><li>세팅에서 테마를 고르는데 시스템 테마를 상속받아 보여주는 옵션이 있었다</li><li>궁금해서 공부해보고 블로그에도 적용하게 되었다</li></ul><ul><li>처음 C언어를 배울 때 visual studio 사용했다</li><li>기본 테마가 화이트였다</li><li>기본 테마를 쓰다가 웹 공부를 시작하면서 유튜버들 세팅을 따라 하다가 다크 테마를 쓰게 됐다</li><li>써보니까 괜찮고 좋은 것 같다!</li></ul><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><ul><li>나는 icarus default theme를 사용 중이다</li></ul><h2 id="적용-방법"><a href="#적용-방법" class="headerlink" title="적용 방법"></a>적용 방법</h2><ul><li>기본적으로 body에 dark class 가 있으면 다크 테마에 맞는 css로 오버라이드하는 방식이다</li></ul><h3 id="css-추가"><a href="#css-추가" class="headerlink" title="css 추가"></a>css 추가</h3><ul><li>dark theme에 맞게 새로 추가할 css는</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-update-dark-theme20210601/1.png" alt=" "></p><ul><li>icarus theme 디렉터리를 기준으로 <code>source/css</code> 아래에 <code>dark.styl</code>이름으로 파일을 하나 생성했다</li><li>앞으로 나오는 경로는 모두 icarus theme 디렉터리가 기준이다</li></ul><figure class="highlight scss"><figcaption><span>source/css/dark.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1e1e1e</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.navbar</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#3C3C3C</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#d4d4d4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.navbar-menu</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line"></span><br><span class="line">            <span class="selector-class">.navbar-item</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: inherit;</span><br><span class="line"></span><br><span class="line">                &amp;<span class="selector-pseudo">:hover</span>, &amp;<span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">                    <span class="attribute">background-color</span>: <span class="number">#37373D</span>;</span><br><span class="line">                    <span class="attribute">color</span>: <span class="number">#007acc</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><ul><li>어떤 테마 시스템이 있고 그런 게 아니라서 하나하나 수작업으로 바꿔주었다</li><li>body.dark 일 때 css를 오버라이드 할 수 있도록…</li></ul><figure class="highlight scss"><figcaption><span>source/css/style.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./dark.styl&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><code>dark.styl</code>을 <code>style.styl</code> 마지막에 임포트 해준다</li><li>그럼 css는 끝!</li></ul><h3 id="토글-버튼-추가"><a href="#토글-버튼-추가" class="headerlink" title="토글 버튼 추가"></a>토글 버튼 추가</h3><ul><li>이제 토글 버튼을 추가해보자</li><li>나는 navbar 상단 오른쪽 검색 버튼 옆에 추가했다</li></ul><figure class="highlight jsx"><figcaption><span>layout/common/navbar.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;navbar-end&quot;</span>&gt;</span><br><span class="line">  &lt;button type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;toggleTheme&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;navbar-item&quot;</span>&gt;</span><br><span class="line">    hi</span><br><span class="line">  &lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li><code>layout/common/navbar.jsx</code> 80라인에 <strong>toggleTheme</strong>라는 ID로 추가했다</li><li>이제 버튼에 기능을 넣어줘야 하는데 <code>navbar.jsx</code>에서 기능도 추가하고 싶었는데,</li><li>어떻게 빌드되는지 구조를 잘 몰라서 실패했다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-update-dark-theme20210601/2.png" alt=" "></p><ul><li>대신 <code>source/js</code> 디렉터리에 <code>theme.js</code> 파일을 하나 추가했다</li></ul><figure class="highlight js"><figcaption><span>theme.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;toggleTheme&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTheme</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// chk local storage</span></span><br><span class="line">  <span class="keyword">const</span> theme = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;theme&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (theme === <span class="string">&#x27;dark&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">    btn.innerText = <span class="string">&#x27;🌙&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (theme === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">    btn.innerText = <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   visit first time</span></span><br><span class="line">  <span class="keyword">const</span> isDark = <span class="built_in">window</span>.matchMedia(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (isDark) <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;theme&#x27;</span>, isDark ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">  btn.innerText = isDark ? <span class="string">&#x27;🌙&#x27;</span> : <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleTheme</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`toggle theme`</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.classList.toggle(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(</span><br><span class="line">    <span class="string">&#x27;theme&#x27;</span>,</span><br><span class="line">    <span class="built_in">document</span>.body.classList.contains(<span class="string">&#x27;dark&#x27;</span>) ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  btn.innerText = <span class="built_in">document</span>.body.classList.contains(<span class="string">&#x27;dark&#x27;</span>) ? <span class="string">&#x27;🌙&#x27;</span> : <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span></span><br><span class="line">  .matchMedia(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>)</span><br><span class="line">  .addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newColorScheme = e.matches ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span>;</span><br><span class="line">    <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;theme&#x27;</span>, newColorScheme);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newColorScheme === <span class="string">&#x27;dark&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">      btn.innerText = <span class="string">&#x27;🌙&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">    btn.innerText = <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  toggleTheme();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">initTheme();</span><br></pre></td></tr></table></figure><ul><li>셀럭터로 위에서 추가한 버튼을 가져와서 클릭 이벤트 리스너를 달아줬다</li><li>이제 hexo로 빌드하면서 생성되는 html에 해당 스크립트를 로드하도록 해야 한다</li></ul><h3 id="스크립트-파일-추가"><a href="#스크립트-파일-추가" class="headerlink" title="스크립트 파일 추가"></a>스크립트 파일 추가</h3><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-update-dark-theme20210601/3.png" alt=" "></p><ul><li><code>layout/common/scripts.jsx</code>에 위에서 만든 <code>theme.js</code>를 등록하면 된다</li></ul><figure class="highlight jsx"><figcaption><span>layout/common/scripts.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Fragment&gt;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &lt;script src=&#123;url_for(<span class="string">&#x27;/js/main.js&#x27;</span>)&#125; defer&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&#123;url_for(<span class="string">&#x27;/js/theme.js&#x27;</span>)&#125; defer&gt;&lt;/script&gt;</span><br><span class="line">&lt;/Fragment&gt;</span><br></pre></td></tr></table></figure><ul><li>56라인 정도 되는 부분에 <code>&lt;script src=&#123;url_for(&#39;/js/theme.js&#39;)&#125; defer&gt;&lt;/script&gt;</code> 추가한다</li><li>마지막으로 hexo 디렉터리로 돌아와서 <code>public/css</code> 하위에 있는 css를 삭제해준다</li><li>이제 <code>hexo generate</code> 하게 되면 css가 갱신되고, 테마 토글 버튼이 달려 있는 html이 생성될 것이다</li></ul><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><ul><li>뿌듯하다</li><li>다 완성하고 자려고 누워서 폰으로 내 블로그를 들어가 봤는데 눈이 편안했다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/blog/">blog</category>
      
      
      <category domain="https://chinsun9.github.io/tags/blog/">blog</category>
      
      <category domain="https://chinsun9.github.io/tags/dark-theme/">dark theme</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/01/blog-update-dark-theme/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github 404 page clone</title>
      <link>https://chinsun9.github.io/2021/06/01/github-404-page-clone/</link>
      <guid>https://chinsun9.github.io/2021/06/01/github-404-page-clone/</guid>
      <pubDate>Tue, 01 Jun 2021 13:48:54 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-404-page-clone20210601/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-404-page-clone20210601/preview.png" alt=" "></p><ul><li><a href="https://chinsun9.github.io/github-404-page-clone/">https://chinsun9.github.io/github-404-page-clone/</a></li></ul><ul><li>github 404 페이지를 클론해보았다</li><li>마우스 움직임에 따라 원근감 있게 움직이는 이미지들이 재밌었다</li></ul><ul><li>전에 3d 카드 이펙트 만들면서 perspective css 속성을 사용해보았는데, 그때 사용한 코드를 거의 그대로 사용해서 만들 수 있었다</li><li>3d card effect ; <a href="https://github.com/chinsun9/3d-card-effect">https://github.com/chinsun9/3d-card-effect</a></li></ul><ul><li>이미지는 직접 그렸다. 물론 바닥에 대고…</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/chinsun9/github-404-page-clone">https://github.com/chinsun9/github-404-page-clone</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/01/github-404-page-clone/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>깃허브 블로그 느린 웹 해결하기</title>
      <link>https://chinsun9.github.io/2021/05/31/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2021/05/31/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 31 May 2021 08:49:23 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B020210531/1.png" alt=" "></p><ul><li>2020.01.04 처음 느린 웹 보고서를 확인하고 그냥 방치 했는데…</li><li>나날이 늘어가는 느린 URL들…</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B020210531/preview.png" alt=" "></p><ul><li>jsdelivr 적용 후, 지금까지!</li></ul><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>구글 서치 콘솔에서 블로그에 대한 보고서를 보는데, 느린 웹 문제가 있었다</li><li>어떻게 블로그를 빠르게 할 수 있는지 고민해보았다</li></ul><ul><li><a href="https://derek-mun.com/contents/Contents-Github-page-image-loading-speed.html">https://derek-mun.com/contents/Contents-Github-page-image-loading-speed.html</a></li><li>그러다가 이미지에 cdn을 적용하면 속도를 개선할 수 있겠다는 생각을 하였다</li></ul><h2 id="내-환경"><a href="#내-환경" class="headerlink" title="내 환경"></a>내 환경</h2><ul><li>hexo 프레임워크로 블로그를 운영하고 있다</li><li>블로그 글이 점점 많아지고, 글에 많은 이미지를 포함하는 글도 있다</li></ul><h2 id="해결-jsdelivr-적용"><a href="#해결-jsdelivr-적용" class="headerlink" title="해결 : jsdelivr 적용"></a>해결 : jsdelivr 적용</h2><ul><li>jsdelivr는 npm과 github에서 사용할 수 있는 무료 CDN이다</li><li>오픈소스 프로젝트를 위한 CDN이라고 한다</li><li>jsdelivr는 아무런 설정 없이 누구나(npm, github 사용자) 사용할 수 있는 게 장점이다</li></ul><h3 id="jsdelivr-사용법"><a href="#jsdelivr-사용법" class="headerlink" title="jsdelivr 사용법"></a>jsdelivr 사용법</h3><blockquote><p><a href="https://chinsun9.github.io/images/web-dark-theme20210531/preview.png">https://chinsun9.github.io/images/web-dark-theme20210531/preview.png</a> (원본)<br><a href="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/web-dark-theme20210531/preview.png">https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/web-dark-theme20210531/preview.png</a> (CDN 적용)</p></blockquote><ul><li><a href="https://cdn.jsdelivr.net/gh/%60%7Busername%7D%60/%60%7Breponame%7D%60@%7B%60branch%60%7D/%60%7Bfilepath%7D%60">https://cdn.jsdelivr.net/gh/`{username}`/`{reponame}`@{`branch`}/`{filepath}`</a></li><li>사용 방법이 엄청나게 간단하다</li></ul><ul><li>참고 ; 변환도구 ; <a href="https://www.jsdelivr.com/github">https://www.jsdelivr.com/github</a></li></ul><h3 id="hexo에서-적용"><a href="#hexo에서-적용" class="headerlink" title="hexo에서 적용"></a>hexo에서 적용</h3><ul><li>포스트를 작성할 때 cdn을 적용한 url을 적어줘도 상관은 없지만,</li><li>이미 작성된 글들에 대해 수행해야 하는 불편함이 있다</li><li>hexo 모듈을 살펴보니 <code>node_modules/hexo/lib/plugins/filter/after_post_render/index.js</code>에서 추가적인 작업을 해줄 수 있다는 것을 알게 되었다</li></ul><figure class="highlight js"><figcaption><span>hexo/lib/plugins/filter/after_post_render/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filter &#125; = ctx.extend;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">lazyProcess</span>(<span class="params">htmlContent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rootUrl =</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> htmlContent.replace(</span><br><span class="line">      /<span class="xml">&lt;img(.*?)src=&quot;(.*?)&quot;(.*?)&gt;/gi,</span></span><br><span class="line"><span class="xml">      function (str, p1, p2) &#123;</span></span><br><span class="line"><span class="xml">        if (/src=&quot;data:image(.*?)/gi.test(str)) &#123;</span></span><br><span class="line"><span class="xml">          return str;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        if (p2.indexOf(&#x27;http&#x27;) === 0) &#123;</span></span><br><span class="line"><span class="xml">          return str;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return str.replace(p2, rootUrl + p2);</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    );</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  filter.register(&#x27;after_post_render&#x27;, require(&#x27;./external_link&#x27;));</span></span><br><span class="line"><span class="xml">  filter.register(&#x27;after_post_render&#x27;, require(&#x27;./excerpt&#x27;));</span></span><br><span class="line"><span class="xml">  filter.register(&#x27;after_post_render&#x27;, function (data) &#123;</span></span><br><span class="line"><span class="xml">    data.content = lazyProcess.call(this, data.content);</span></span><br><span class="line"><span class="xml">    return data;</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>코드 참고 ; <a href="https://github.com/zhepama/hexo-generator-cdn/blob/master/lib/process.js">https://github.com/zhepama/hexo-generator-cdn/blob/master/lib/process.js</a></li><li>생성된 html에서 이미지 태그 문자열을 정규식으로 뽑는다</li><li><code>rootUrl</code>로 선언한 cdn을 위한 이미지 prefix와 기존 filepath를 결합한다</li></ul><ul><li>node_modules 아래에 있는 파일을 수정한 것이라, 좋은 접근은 아닌 것 같다</li><li>이런 경우에 어떻게 노드 모듈 외부에서 함수를 오버라이딩할 수 있는지…</li><li>일단 나는 이렇게 해서 사용하고 있다</li></ul><h2 id="경과"><a href="#경과" class="headerlink" title="경과"></a>경과</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B020210531/2.png" alt=" "></p><ul><li>2021-03-12 이미지에 cdn 적용했다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B020210531/3.png" alt=" "></p><ul><li>10일 후에 점점 느린 URL이 없어지고 있는 것을 확인할 수 있다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B020210531/preview.png" alt=" "></p><ul><li>지금은 느린 웹이 없다!</li></ul><h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><ul><li>이미지를 수정해도 즉시 반영되지 않는다</li><li>즉시 반영을 원한다면 이름을 바꿔주자</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://derek-mun.com/contents/Contents-Github-page-image-loading-speed.html">https://derek-mun.com/contents/Contents-Github-page-image-loading-speed.html</a></li><li><a href="https://hexo.io/ko/api/filter.html">https://hexo.io/ko/api/filter.html</a></li><li><a href="https://github.com/zhepama/hexo-generator-cdn/blob/master/lib/process.js">https://github.com/zhepama/hexo-generator-cdn/blob/master/lib/process.js</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/blog/">blog</category>
      
      
      <category domain="https://chinsun9.github.io/tags/blog/">blog</category>
      
      <category domain="https://chinsun9.github.io/tags/github-pages/">github pages</category>
      
      <category domain="https://chinsun9.github.io/tags/cdn/">cdn</category>
      
      <category domain="https://chinsun9.github.io/tags/jsdelivr/">jsdelivr</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/31/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CDN</title>
      <link>https://chinsun9.github.io/2021/05/31/cdn/</link>
      <guid>https://chinsun9.github.io/2021/05/31/cdn/</guid>
      <pubDate>Mon, 31 May 2021 08:49:05 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;속도!&lt;/li&gt;
&lt;li&gt;웹프로그래밍 시간에서 bootstrap, jquery, fontawesome 등 외부라이브러리를 CDN을 통해 사용해았다&lt;/li&gt;
&lt;li&gt;데이터통신, 네트워크 관련 수업에서 CDN이 뭔지 배웠었다&lt;/li&gt;
&lt;/u</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>속도!</li><li>웹프로그래밍 시간에서 bootstrap, jquery, fontawesome 등 외부라이브러리를 CDN을 통해 사용해았다</li><li>데이터통신, 네트워크 관련 수업에서 CDN이 뭔지 배웠었다</li></ul><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><ul><li>콘텐츠 전송 네트워크, Content Delivery Network</li><li>나와 물리적으로 가까운 캐시 서버로부터 리소스를 가져온다</li><li>원래대로라면 원본 리소스를 가지고 있는 서버로부터 제공받는다</li><li>근데 원본 서버가 물리적으로 거리가 멀면 가져오는데 시간이 오래 걸린다</li><li>원본 서버의 부하도 줄여주고 속도도 빨라지도 좋다</li><li>보통 정적인 파일들(이미지, js, css)등을 CDN을 사용하여 배포한다</li></ul><ul><li>A, B가 같은 동네에 살고 있다</li><li>A가 <code>asdf</code>라는 파일을 다운로드하는데, 가장 가까운 캐시 서버에 <code>asdf</code>파일이 있는지 확인한다</li><li>없으면 하나 위로 가서 확인하고, 반복하다가 없으면 원본 서버까지 가서 받아온다</li><li>최초에 시간이 오래 걸렸지만, 이후 A가 <code>asdf</code>파일을 재요청했을 때 엄청 빨라졌음을 느꼈다</li><li>B도 <code>asdf</code>파일을 엄청 빨리 다운로드할 수 있었다</li></ul><h2 id="CDN-사용예"><a href="#CDN-사용예" class="headerlink" title="CDN 사용예"></a>CDN 사용예</h2><ul><li>jquery, font awesome 등 라이브러리들을 보면 CDN 형태로 제공을 하고 있어서</li><li>head에 한 줄 넣기만 하면 해당 라이브러리의 기능을 쉽게 사용할 수 있다</li><li>CDN 말고 직접 배포 파일(dist, build)을 받아서 사용할 수 있지만,</li><li>언디가 서비스를 할 때, 내 서버에서 해당 리소스를 제공해야 하으로 서버에 부하를 줄 수 있고, 느리다</li><li>라이브러리를 가져올 때, CDN을 사용했다면 이런 걱정을 할 필요가 없다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC">https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/cdn/">cdn</category>
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/31/cdn/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>web dark theme</title>
      <link>https://chinsun9.github.io/2021/05/31/web-dark-theme/</link>
      <guid>https://chinsun9.github.io/2021/05/31/web-dark-theme/</guid>
      <pubDate>Mon, 31 May 2021 07:14:46 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;깃허브 같은 웹페이지는 내가 다크 모드를 쓰는 걸 어떻게 알고, 자동으로 다크 테마를 지원하는 걸까?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;media-prefers-color-scheme-dark&quot;&gt;&lt;a href=&quot;#media-prefer</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>깃허브 같은 웹페이지는 내가 다크 모드를 쓰는 걸 어떻게 알고, 자동으로 다크 테마를 지원하는 걸까?</li></ul><h2 id="media-prefers-color-scheme-dark"><a href="#media-prefers-color-scheme-dark" class="headerlink" title="@media (prefers-color-scheme: dark)"></a>@media (prefers-color-scheme: dark)</h2><ul><li>미디어 쿼리로 시스템 테마를 읽어 올 수 있다</li></ul><h2 id="테마"><a href="#테마" class="headerlink" title="테마"></a>테마</h2><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --<span class="attribute">top</span>-bar: <span class="number">#dddddd</span>;</span><br><span class="line">  --activity-bar: <span class="number">#2c2c2c</span>;</span><br><span class="line">  --side-bar: <span class="number">#616161</span>30;</span><br><span class="line">  --editor: <span class="number">#ffffff</span>;</span><br><span class="line">  --editor-<span class="attribute">content</span>: <span class="number">#000000</span>;</span><br><span class="line">  --status-bar: <span class="number">#007acc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    --<span class="attribute">top</span>-bar: <span class="number">#3c3c3c</span>;</span><br><span class="line">    --activity-bar: <span class="number">#333333</span>;</span><br><span class="line">    --side-bar: <span class="number">#252526</span>;</span><br><span class="line">    --editor: <span class="number">#1e1e1e</span>;</span><br><span class="line">    --editor-<span class="attribute">content</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    --status-bar: <span class="number">#007acc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>테마는 이런 식으로 정의했다</li><li>미디어 쿼리에 걸리면 색상을 정의해둔 사용자 지정 속성들이 오버라이딩된다</li></ul><ul><li>색상은 vscode color theme default light, dark에서 가져왔다</li></ul><h2 id="테마-토글-버튼"><a href="#테마-토글-버튼" class="headerlink" title="테마 토글 버튼"></a>테마 토글 버튼</h2><ul><li>시스템 테마와 별개로 웹페이지에서 테마를 토글 하고 싶을 때는 어떻게 해야 할까?</li><li>body 태그에 <code>dark</code>라는 클래스를 유무에 따라 테마를 바꿔보자</li><li>테마 토글 버튼을 누르면 dark 클래스가 생기고 없어지면서 색상이 적용될 것이다</li></ul><h3 id="최초-접속자-테마-초기화"><a href="#최초-접속자-테마-초기화" class="headerlink" title="최초 접속자 테마 초기화"></a>최초 접속자 테마 초기화</h3><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   visit first time</span></span><br><span class="line"><span class="keyword">const</span> isDark = <span class="built_in">window</span>.matchMedia(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (isDark) <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;dark&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>미디어 쿼리로는 최초 웹페이지 접속자가 어떤 테마를 사용할지 판단할 때 사용하도록 했다</li></ul><h3 id="토글-버튼"><a href="#토글-버튼" class="headerlink" title="토글 버튼"></a>토글 버튼</h3><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleTheme</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`toggle theme`</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.classList.toggle(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;theme&#x27;</span>, <span class="built_in">document</span>.body.className ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>toggle은 있으면 없애고, 없으면 있게 만든다</li><li>toggle 후에는 현재 테마 상태를 localStorage에 저장한다</li><li>이후 접속 시 localStorage에서 <code>theme</code>에 값이 있는지 확인하고 있으면 해당 테마로 초기화한다</li></ul><h2 id="chrome에서-시스템-테마-쉽게-토글-하기"><a href="#chrome에서-시스템-테마-쉽게-토글-하기" class="headerlink" title="chrome에서 시스템 테마 쉽게 토글 하기"></a>chrome에서 시스템 테마 쉽게 토글 하기</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/web-dark-theme20210531/preview.png" alt=" "></p><ul><li>f12 개발자 도구에서 esc key 눌러서 하단 console 창을 뛰움</li><li>three dot (more tools) 눌러서 <code>Rendering</code> 탭 오픈</li><li>스크롤 중간 정도에 <strong>Emulate CSS media feature prefer-color-scheme</strong> 에서 테마 선택</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/">https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/</a></li><li><a href="https://github.com/chinsun9/dark-theme-practice">https://github.com/chinsun9/dark-theme-practice</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/dark-theme/">dark theme</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/31/web-dark-theme/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>windows dark mode 윈도우 다크 테마</title>
      <link>https://chinsun9.github.io/2021/05/31/windows-dark-mode/</link>
      <guid>https://chinsun9.github.io/2021/05/31/windows-dark-mode/</guid>
      <pubDate>Mon, 31 May 2021 02:00:55 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;다크 모드는 OS에서 설정할 수 있다&lt;/li&gt;
&lt;li&gt;최상위 (OS)에서 설정해두면 그 위에서 돌아가는 앱이 자동으로 테마를 스위치 한다&lt;/li&gt;
&lt;li&gt;깃허브 다크 모드가 크롬 프로필에 따라 풀려서 다크 모드로 설정을 하려는데&lt;/li</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>다크 모드는 OS에서 설정할 수 있다</li><li>최상위 (OS)에서 설정해두면 그 위에서 돌아가는 앱이 자동으로 테마를 스위치 한다</li><li>깃허브 다크 모드가 크롬 프로필에 따라 풀려서 다크 모드로 설정을 하려는데</li><li>시스템 기반으로 테마를 토글 하는 기능이 있음을 알게 되었다</li><li>그래서 윈도우에서 다크 모드 적용을 알아보았다</li></ul><h2 id="윈도우-다크-모드"><a href="#윈도우-다크-모드" class="headerlink" title="윈도우 다크 모드"></a>윈도우 다크 모드</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/windows-dark-mode20210526/preview.png" alt=" "></p><ul><li>win 키를 누르고 <code>theme</code>를 검색하면 <code>테마 컬러 선택</code> 설정으로 들어갈 수 있다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/windows-dark-mode20210526/1.png" alt=" "></p><ul><li>색 선택에서 어둡게를 선택하면</li><li>다크 모드 설정 완료이다</li></ul><ul><li>익스플로러나 브라우저를 보면 자동으로 다크 모드가 된 것을 확인할 수 있다</li><li>깃허브 사이트나 깃허브 데스크톱 앱도 자동으로 다크 모드로 전환되었다</li><li>앱또는 웹사이트마다 일일이 다크 모드 적용하기보다 OS 레벨에서 다크 모드를 적용하는 것이 훨씬 유용하다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/windows/">windows</category>
      
      
      <category domain="https://chinsun9.github.io/tags/windows/">windows</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/dark-mode/">dark mode</category>
      
      <category domain="https://chinsun9.github.io/tags/dark-theme/">dark theme</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/31/windows-dark-mode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>react ts context</title>
      <link>https://chinsun9.github.io/2021/05/25/react-context/</link>
      <guid>https://chinsun9.github.io/2021/05/25/react-context/</guid>
      <pubDate>Tue, 25 May 2021 06:09:01 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;react에서 상위에서 하위 컴포넌트로 어떤 값을 보내 줄 때 prop으로 넘겨주게 된다&lt;/li&gt;
&lt;li&gt;이게 1, 2단계 정도면 괜찮을 텐데, 더 깊어지면 엄청 불편해진다&lt;/li&gt;
&lt;li&gt;넘기고 넘기고 넘기고 반복되는 것을 &lt;stro</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>react에서 상위에서 하위 컴포넌트로 어떤 값을 보내 줄 때 prop으로 넘겨주게 된다</li><li>이게 1, 2단계 정도면 괜찮을 텐데, 더 깊어지면 엄청 불편해진다</li><li>넘기고 넘기고 넘기고 반복되는 것을 <strong>prop drilling</strong>이라고 한다</li></ul><ul><li>prop drilling으로 만들 때 긍정적인 점은 그만큼 각 컴포넌트가 느슨하게 연결되도록 만들었다는 게 아닐까..?</li><li>컴포넌트가 독립성을 가지게 해주는 것도 좋지만 재사용될지 모르는 것에 너무 힘을 쓰진 말자..</li></ul><ul><li>전역적인 state를 사용하고 싶을 때 사용할 수 있겠다</li><li>리액트를 처음 배울 때 무작정 튜토리얼을 따라 하다가 redux를 배웠고,</li><li>나중에 context api 만으로 충분하다는 것을 알게 되었다</li><li>일단 다른 라이브러리를 설치하지 않고 충분히 가능하다는 것에 주로 사용하게 되었다</li></ul><ul><li>사용 흐름은 redux나 context api 유사하다</li><li>전역 저장소(스토어)를 생성하고, 각 컴포넌트에서는 dispatch를 통해서 상태를 업데이트할 수 있다</li><li>생성, 삭제가 있다고 하면 생성 액션, 삭제 액션이 있고 dispatch 할 때 어떤 액션을 할지 정해서 업데이트를 수행한다</li><li>실제 업데이트는 리듀서에서 된다. 리듀서에는 액션의 구현부?가 있다</li></ul><h2 id="참고-소스-코드"><a href="#참고-소스-코드" class="headerlink" title="참고 소스 코드"></a>참고 소스 코드</h2><figure class="highlight ts"><figcaption><span>GlobalContext.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-case-declarations */</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; createContext, Dispatch, useContext, useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Comment &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> State = <span class="built_in">Map</span>&lt;<span class="built_in">number</span>, Comment&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: State = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">number</span>, Comment&gt;();</span><br><span class="line"></span><br><span class="line">initialState.set(<span class="number">0</span>, &#123;</span><br><span class="line">  id: <span class="number">0</span>,</span><br><span class="line">  avatar: <span class="string">&#x27;https://i.pravatar.cc/48&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">  publishedTime: <span class="string">&#x27;1주 전&#x27;</span>,</span><br><span class="line">  content: <span class="string">&#x27;hello world!&#x27;</span>,</span><br><span class="line">  likeCount: <span class="number">999</span>,</span><br><span class="line">  dislikeCount: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CommentAction = &#123; <span class="attr">type</span>: <span class="string">&#x27;ADD_COMMENT&#x27;</span>; comment: Comment &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CommentContext = createContext&lt;State&gt;(initialState);</span><br><span class="line"><span class="keyword">const</span> CommentDispatch = createContext&lt;Dispatch&lt;CommentAction&gt;&gt;(<span class="function">() =&gt;</span> <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state: State, action: CommentAction</span>): <span class="title">State</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD_COMMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">const</span> &#123; comment &#125; = action;</span><br><span class="line">      nextId += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Map</span>(state).set(nextId, &#123; ...comment, <span class="attr">id</span>: nextId &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Unhandled action&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">GlobalContextProvider</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  children,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;: &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  children: React.ReactNode;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;CommentContext.Provider value=&#123;state&#125;&gt;</span><br><span class="line">      &lt;CommentDispatch.Provider value=&#123;dispatch&#125;&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;/CommentDispatch.Provider&gt;</span><br><span class="line">    &lt;/CommentContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useCommentState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> useContext(CommentContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useCommentDispatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> useContext(CommentDispatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>컨텍스트를 만들고</li></ul><figure class="highlight ts"><figcaption><span>index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> GlobalContextProvider <span class="keyword">from</span> <span class="string">&#x27;./context/GlobalContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;GlobalContextProvider&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/GlobalContextProvider&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>index.tsx</code>에서 App을 감싸든 어디든 같은 컨텍스트로 묶어줄 상위 컴포넌트를 감싸준다</li></ul><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> comment = useCommentState();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Main&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div className=<span class="string">&quot;contents&quot;</span>&gt;</span><br><span class="line">        &#123;<span class="built_in">Array</span>.from(comment).map(<span class="function">(<span class="params">[id, data]</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;commentThread&quot;</span> key=&#123;id&#125;&gt;</span><br><span class="line">              &lt;Comment data=&#123;data&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Main&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>참조하여 사용할 때는 이렇게</li></ul><figure class="highlight ts"><figcaption><span>Header.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> commentDispatch = useCommentDispatch();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onSubmitHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    commentDispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">&#x27;ADD_COMMENT&#x27;</span>,</span><br><span class="line">      comment,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>상태를 업데이트하고 싶으면 이런 식으로 할 수 있겠다</li></ul><h2 id="참고-소스-코드-저장소"><a href="#참고-소스-코드-저장소" class="headerlink" title="참고 소스 코드 저장소"></a>참고 소스 코드 저장소</h2><ul><li><a href="https://github.com/chinsun9/youtube-comments-phoenix/blob/v1/src/context/GlobalContext.tsx">https://github.com/chinsun9/youtube-comments-phoenix/blob/v1/src/context/GlobalContext.tsx</a></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://react.vlpt.us/using-typescript/04-ts-context.html">https://react.vlpt.us/using-typescript/04-ts-context.html</a></li><li><a href="https://chatoo2412.github.io/javascript/react/react-context-as-a-state-management-tool/">https://chatoo2412.github.io/javascript/react/react-context-as-a-state-management-tool/</a></li><li><a href="https://medium.com/@ca3rot/%EC%95%84%EB%A7%88-%EC%9D%B4%EA%B2%8C-%EC%A0%9C%EC%9D%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B8%EA%B1%B8%EC%9A%94-react-redux-%ED%94%8C%EB%A1%9C%EC%9A%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-1585e911a0a6">https://medium.com/@ca3rot/%EC%95%84%EB%A7%88-%EC%9D%B4%EA%B2%8C-%EC%A0%9C%EC%9D%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B8%EA%B1%B8%EC%9A%94-react-redux-%ED%94%8C%EB%A1%9C%EC%9A%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-1585e911a0a6</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/react/">react</category>
      
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/context/">context</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/25/react-context/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>css 변수 사용하기</title>
      <link>https://chinsun9.github.io/2021/05/21/css-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2021/05/21/css-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 21 May 2021 02:45:12 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight css&quot;&gt;&lt;figcaption&gt;&lt;span&gt;style.css&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --<span class="selector-tag">a</span>: pink;</span><br><span class="line">  --<span class="selector-tag">b</span>: black;</span><br><span class="line">  --c: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 변수 --a 를 오버라이딩 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.override</span> &#123;</span><br><span class="line">  --<span class="selector-tag">a</span>: green;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>:root</code>는 전역 변수를 선언하는 곳이라고 생각하면 된다</li><li><code>--</code>을 앞에 붙여야 한다</li><li>대소문자를 구분한다</li><li><code>var()</code>함수로 변수를 가져다 사용할 수 있다</li><li>오버라이딩 가능하다</li></ul><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--a, red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>var()</code> 함수에 2번째 인자를 넣어서, 대안 값을 지정할 수 있다</li><li><code>--a</code>가 정의되지 않았을 때, 두 번째 인자 값을 사용한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_custom_properties">https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_custom_properties</a></li><li><code>:root</code>는 <strong>의사 클래스</strong>라고 한다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/css/">css</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/21/css-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>오버라이딩 vs. 오버로딩</title>
      <link>https://chinsun9.github.io/2021/05/21/%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-vs-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/</link>
      <guid>https://chinsun9.github.io/2021/05/21/%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-vs-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/</guid>
      <pubDate>Fri, 21 May 2021 02:34:57 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 오버로딩 //</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 오버라이딩 //</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// print super</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// print sub</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>예~~~전에 c++, java하면서 배운 헷갈리는 용어 정리!</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/etc/">etc</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/21/%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-vs-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>react table 연습</title>
      <link>https://chinsun9.github.io/2021/05/07/react-table-practice/</link>
      <guid>https://chinsun9.github.io/2021/05/07/react-table-practice/</guid>
      <pubDate>Fri, 07 May 2021 03:50:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://chinsun9.github.io/react-table-practice&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://chinsun9.github.io/react-table-practice"><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/react-table-practice20210507/preview.png" alt=" "></a></p><ul><li>표를 포함한 간단한 웹을 만들 때 부트스트랩 템플릿 안에 들어있는 <a href="https://datatables.net/">datatables</a>를 사용하곤 했었다</li><li>데이터가 쌓이지 않는 상황에서,</li><li>페이지네이션 및 필터링을 이미 제공하고 있기 때문에 내가 구현할 내용이 거의 없다는 게 장점이다</li></ul><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>나는 주로 리액트를 사용하는데, 이 부트스트랩 템플릿(html, js, css)을 그대로 리액트로 가져왔다</li><li>이 템플릿의 종속성인 <em>vendor</em> 디렉터리에 있는 내용들도 <em>public</em>으로 옮기고,</li><li>컴포넌트에서는 동적으로 이 종속성을 스크립트 태그로 로드하고</li><li>이 스크립트에서 사용하는 함수를 호출하기 위해서 <code>window</code> 객체에 담아서 실행하고..</li><li>하지만 테이블 관련 동작을 커스텀하기도 어렵고,, 좋지 못한 구조로 가는 느낌이 들었다</li><li>그래서 리액트에서 사용할 수 있는 테이블 라이브러리를 찾다가 <code>react-table</code>을 공부해보기로 했다</li></ul><h2 id="따라하기"><a href="#따라하기" class="headerlink" title="따라하기"></a>따라하기</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/videoseries?list=PLC3y8-rFHvwgWTSrDiwmUsl4ZvipOw9Cz" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li><strong>Codevolution React Table Tutorial</strong>을 보고 따라했다</li></ul><h2 id="타입스크립트로-따라하기"><a href="#타입스크립트로-따라하기" class="headerlink" title="타입스크립트로 따라하기"></a>타입스크립트로 따라하기</h2><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><ul><li><code>yarn add @types/react-table</code></li><li>타입스크립트로 진행하려면 필요하다</li></ul><h3 id="useTable"><a href="#useTable" class="headerlink" title="useTable()"></a>useTable()</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tableInstance = useTable(&#123;</span><br><span class="line">  columns, <span class="comment">// ts-err</span></span><br><span class="line">  data,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type &#39;(&#123; Header: string; Footer: string; accessor: string; columns?: undefined; &#125; | &#123; Header: string; Footer: string; columns: &#123; Header: string; Footer: string; accessor: string; &#125;[]; accessor?: undefined; &#125;)[]&#39; is not assignable to type &#39;Column&lt;&#123; ... &#125;&gt;[]&#39;.</span><br></pre></td></tr></table></figure><ul><li>위 에러 메시지가 나온다</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tableInstance = useTable(&#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  columns,</span><br><span class="line">  data,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>위처럼 주석을 추가한다</li><li>다른 react-table typescript example을 보니까 <code>// @ts-ignore</code>을 사용하는 걸 참고 했다</li></ul><h3 id="자동완성-안됨"><a href="#자동완성-안됨" class="headerlink" title="자동완성 안됨"></a>자동완성 안됨</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;thead&gt;</span><br><span class="line">  &#123;headerGroups.map((headerGroup) &#x3D;&gt; (</span><br><span class="line">    &lt;tr &#123;...headerGroup.getHeaderGroupProps()&#125;&gt;</span><br><span class="line">      &#123;headerGroup.headers.map((columns) &#x3D;&gt; (</span><br><span class="line">        &lt;th &#123;...columns.getHeaderProps()&#125;&gt;&#123;columns.render(&#39;Header&#39;)&#125;&lt;&#x2F;th&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">  ))&#125;</span><br><span class="line">&lt;&#x2F;thead&gt;</span><br></pre></td></tr></table></figure><ul><li>타입 추론이 안되고, 자동 완성도 안되고,,</li><li>해결 ; <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-table">https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-table</a></li><li>위 링크의 Example type file을 프로젝트 <em>src</em> 디렉터리에 추가하니 해결됐다</li></ul><h2 id="레포"><a href="#레포" class="headerlink" title="레포"></a>레포</h2><ul><li><a href="https://github.com/chinsun9/react-table-practice">https://github.com/chinsun9/react-table-practice</a></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/tannerlinsley/react-table">https://github.com/tannerlinsley/react-table</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/react/">react</category>
      
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/react-table/">react-table</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/07/react-table-practice/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>styled components highlighting</title>
      <link>https://chinsun9.github.io/2021/05/06/styled-components-highlighting/</link>
      <guid>https://chinsun9.github.io/2021/05/06/styled-components-highlighting/</guid>
      <pubDate>Thu, 06 May 2021 07:36:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/styled-components-highlighting20210506/preview.png&quot;&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/styled-components-highlighting20210506/preview.png"></p><ul><li><code>styled-components</code>를 사용하는데, 구문 강조가 없어서 확장 도구를 살펴보았다</li><li><code>vscode-styled-components</code>를 사용하면 하이라이트 및 스니펫을 사용이 가능하다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components">https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/extension/">extension</category>
      
      <category domain="https://chinsun9.github.io/tags/styled-components/">styled components</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/06/styled-components-highlighting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vscode 포맷팅 없이 저장하기</title>
      <link>https://chinsun9.github.io/2021/05/06/vscode-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EC%97%86%EC%9D%B4-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2021/05/06/vscode-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EC%97%86%EC%9D%B4-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 06 May 2021 00:49:03 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;F1 &amp;gt; File: Save without Formatting&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;format on save 를 사용할 때,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;크기가 큰 json 파일이 있을 수</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><p><code>F1 &gt; File: Save without Formatting</code></p></li><li><p>format on save 를 사용할 때,</p></li><li><p>크기가 큰 json 파일이 있을 수 있다</p></li></ul><ul><li>처음에는 <code>// prettier-ignore</code>을 최상단에 두어서 포맷팅 하지 않게 하였는데</li><li>주석을 넣으면 json파일을 읽지 못하게 되었다</li><li>그래서 명령 팔레트 열고 save 쳐보니까 포맷팅 없이 저장하는 방법이 있었다!</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li>특정 라인 prettier-ignore</li><li><a href="https://chinsun9.github.io/2020/11/24/prettier-ignore-line/">https://chinsun9.github.io/2020/11/24/prettier-ignore-line/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/06/vscode-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EC%97%86%EC%9D%B4-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>202104 검색 실적</title>
      <link>https://chinsun9.github.io/2021/05/04/202104-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/</link>
      <guid>https://chinsun9.github.io/2021/05/04/202104-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/</guid>
      <pubDate>Tue, 04 May 2021 02:32:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/202104-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%8120210504/prev</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/202104-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%8120210504/preview.png" alt=" "></p>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/blog-history/">blog history</category>
      
      
      <category domain="https://chinsun9.github.io/tags/blog-history/">blog history</category>
      
      
      <comments>https://chinsun9.github.io/2021/05/04/202104-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shell &gt; vs. &gt;&gt;</title>
      <link>https://chinsun9.github.io/2021/04/29/shell-redirection/</link>
      <guid>https://chinsun9.github.io/2021/04/29/shell-redirection/</guid>
      <pubDate>Thu, 29 Apr 2021 04:17:54 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">touch a.txt</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; a.txt</span><br><span class="line"><span class="comment"># 결과는 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 2 &gt; a.txt</span><br><span class="line"><span class="comment"># 결과는 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 3 &gt;&gt; a.txt</span><br><span class="line"><span class="comment"># 결과는 2\n3</span></span><br></pre></td></tr></table></figure><ul><li>&gt; 덮어쓰기</li><li>&gt;&gt; 추가</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98">https://ko.wikipedia.org/wiki/리다이렉션</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/bash/">bash</category>
      
      
      <category domain="https://chinsun9.github.io/tags/bash/">bash</category>
      
      
      <comments>https://chinsun9.github.io/2021/04/29/shell-redirection/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>내가 사랑하는 vscode 단축키, 명령, 확장도구 모음</title>
      <link>https://chinsun9.github.io/2021/04/29/%EB%82%B4%EA%B0%80-%EC%82%AC%EB%9E%91%ED%95%98%EB%8A%94-vscode-%EB%8B%A8%EC%B6%95%ED%82%A4-%EB%AA%85%EB%A0%B9-%ED%99%95%EC%9E%A5%EB%8F%84%EA%B5%AC-%EB%AA%A8%EC%9D%8C/</link>
      <guid>https://chinsun9.github.io/2021/04/29/%EB%82%B4%EA%B0%80-%EC%82%AC%EB%9E%91%ED%95%98%EB%8A%94-vscode-%EB%8B%A8%EC%B6%95%ED%82%A4-%EB%AA%85%EB%A0%B9-%ED%99%95%EC%9E%A5%EB%8F%84%EA%B5%AC-%EB%AA%A8%EC%9D%8C/</guid>
      <pubDate>Thu, 29 Apr 2021 04:04:59 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;vscode 관련 글을 여럿 썼는데, 검색해서 찾기에 조각조각인 내용들이 있어&lt;/li&gt;
&lt;li&gt;하나의 글에 정리하려고 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cli&quot;&gt;&lt;a href=&quot;#cli&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>vscode 관련 글을 여럿 썼는데, 검색해서 찾기에 조각조각인 내용들이 있어</li><li>하나의 글에 정리하려고 한다</li></ul><h2 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h2><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 현재 디렉터리에서 code 열기</span></span><br><span class="line">code .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 현재 디렉터리를 vscode현재창에서 열기</span></span><br><span class="line">code . -r</span><br></pre></td></tr></table></figure><h2 id="단축키"><a href="#단축키" class="headerlink" title="단축키"></a>단축키</h2><ul><li>⭐<code>F1</code> ; show all commands ; 명령 팔레트 열기</li><li>⭐<code>ctrl p</code> ; go to file ; 파일 열기</li><li>⭐<code>ctrl alft arrow</code> ; move editor into next group ; 분할창 이동</li><li>⭐<code>F2</code> ; rename symbol ; 변수명 변경</li><li>⭐<code>ctrl shift \</code> ; go to bracket ; 괄호로 이동</li><li>⭐<code>shift alt rifhtarrow</code> ; expand selection ; 확장 선택</li><li>⭐<code>shift alt leftarrow</code> ; shrink selection ; 축소 선택</li><li>⭐<code>ctrl rightarrow</code> ; cursor word end right ; 다음 단어로 이동</li><li>⭐<code>ctrl leftarrow</code> ; cursor word left ; 이전 단어로 이동</li><li>⭐<code>ctrl shift v</code> ; markdown preview ; 마크다운 미리보기</li><li>⭐<code>F12</code> ; go to definition ; 선언부로이동</li><li>⭐<code>ctrl leftclick</code> ; go to definition ; 선언부로이동</li><li><code>alt F12</code> ; peek definition / peek references ; 선언, 참조 보기</li><li><code>ctrl 0</code> ; focus into side bar ; 사이드바 포커스</li><li><code>ctrl 1</code> ; focus editor group ; 에디터 포커스</li><li><code>ctrl shift .</code> ; focus breadcrumbs ; 브레드크럼 포커스</li><li><code>ctrl t</code> ; go to symbol in workspace ; 심볼로 바로가기 (범위 ; 워크스페이스 전체)</li><li><code>ctrl shift o</code> ; go to symbol in editor ; 심볼로 바로가기 (범위 ; 현재 포커스된 파일)</li><li><code>ctrl ` </code> ; toggle terminal ; 터미널뷰 토글</li><li><code>ctrl g</code> ; go to line/colum ; 커서이동 ; <em>라인번호,칼럼번호</em></li></ul><h2 id="확장도구"><a href="#확장도구" class="headerlink" title="확장도구"></a>확장도구</h2><ul><li><p>⭐ prettier ; 코드 포매터</p></li><li><p>⭐ eslint ; 린트</p></li><li><p>⭐ shell-launcher ; 여러 터미널 구성</p></li><li><p>⭐ code-settings-sync ; vscode setting 클라우드 저장</p></li><li><p>⭐ JavaScript (ES6) code snippets ; 코드 스니펫, 자동완성 도구</p></li><li><p>⭐ TabOut ; 탭키로 괄호 탈출</p></li><li><p>vscode-pandoc ; md to word</p></li><li><p>live share ; 실시간 멀티유저 코드 편집</p></li><li><p>vscode-sql-formatter ; sql 포매터</p></li><li><p>ascii tree generator ; 디렉터리 트리 스트링 생성</p></li><li><p>auto rename tag ; html 태그 자동 리네임</p></li><li><p>bracket pair colorizer ; 괄호색 구분</p></li><li><p>indent-rainbow ; 들여쓰기 색 구분</p></li><li><p>⭐ live server</p></li><li><p>⭐ material icon theme</p></li><li><p>⭐ remote - ssh</p></li><li><p>path intellisense</p></li><li><p>rest client</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      
      <comments>https://chinsun9.github.io/2021/04/29/%EB%82%B4%EA%B0%80-%EC%82%AC%EB%9E%91%ED%95%98%EB%8A%94-vscode-%EB%8B%A8%EC%B6%95%ED%82%A4-%EB%AA%85%EB%A0%B9-%ED%99%95%EC%9E%A5%EB%8F%84%EA%B5%AC-%EB%AA%A8%EC%9D%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>좋은 사용자</title>
      <link>https://chinsun9.github.io/2021/04/28/%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9A%A9%EC%9E%90/</link>
      <guid>https://chinsun9.github.io/2021/04/28/%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9A%A9%EC%9E%90/</guid>
      <pubDate>Wed, 28 Apr 2021 14:38:11 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;생활코딩님 커뮤니티 글을 보고..&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA/community?lb=Ugx1aIE3Olb8931OhW54AaAB</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>생활코딩님 커뮤니티 글을 보고..</li><li><a href="https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA/community?lb=Ugx1aIE3Olb8931OhW54AaABCQ">https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA/community?lb=Ugx1aIE3Olb8931OhW54AaABCQ</a></li></ul><h2 id="사용자"><a href="#사용자" class="headerlink" title="사용자"></a>사용자</h2><ul><li>이론에 대해 잘 몰라도 사용은 할 수 있다</li><li>사용해보면서 이 이론, 개념이 어떤 일을 할 수 있는지 알게 된다</li><li>그 이론, 개념이 내부적으로 어떻게 동작하는지 모르지만</li><li>컴퓨터 덕분에 복잡한 것을 쉽게 사용, 경험해 볼 수 있다</li></ul><ul><li>그래픽 도구로 이미지를 편집할 때에도</li><li>클릭 몇 번이면 멋진 효과를 줄 수 있다</li><li>내부적으로 어떻게 동작하는지 모르지만</li><li>이 도구를 사용하면 어떤 결과가 나오는지 알 수 있다</li><li>그러면서 이 도구를 어떻게 만들었는지 궁금해지고</li><li>그 원리에 대해 궁금해질 때도 있다</li><li>또는 이 도구를 사용했을 때 이런 결과가 나오니까</li><li>적절히 응용해서 더 멋진 결과를 만들어 낼 수도 있다</li></ul><ul><li>프로그램은 보통 내부적으로 어떤 일을 하는지 사용자는 알 수 없고, 딱히 알 필요도 없다</li><li>나는 OOP에서 추상화와 캡슐화가 이런 의미도 포함한다고 생각한다</li></ul><ul><li>좋은 사용자, 또 좋은 사용자를 만드는 사람이 되자</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA/community?lb=Ugx1aIE3Olb8931OhW54AaABCQ">https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA/community?lb=Ugx1aIE3Olb8931OhW54AaABCQ</a></li><li><a href="https://www.youtube.com/watch?v=C6VG4d28z3A">https://www.youtube.com/watch?v=C6VG4d28z3A</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <category domain="https://chinsun9.github.io/tags/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <comments>https://chinsun9.github.io/2021/04/28/%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9A%A9%EC%9E%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>aws credentials 여러개</title>
      <link>https://chinsun9.github.io/2021/04/28/aws-credentials-%EC%97%AC%EB%9F%AC%EA%B0%9C/</link>
      <guid>https://chinsun9.github.io/2021/04/28/aws-credentials-%EC%97%AC%EB%9F%AC%EA%B0%9C/</guid>
      <pubDate>Wed, 28 Apr 2021 07:37:57 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;여러개의 자격 증명 프로필을 가질 수 있다&lt;/li&gt;
&lt;li&gt;이 경우에 aws cli, aws sam cli 등 커맨드라인을 사용할 때&lt;/li&gt;
&lt;li&gt;프로필을 지정해 줘야한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로필-추가&quot;&gt;&lt;a hre</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>여러개의 자격 증명 프로필을 가질 수 있다</li><li>이 경우에 aws cli, aws sam cli 등 커맨드라인을 사용할 때</li><li>프로필을 지정해 줘야한다</li></ul><h2 id="프로필-추가"><a href="#프로필-추가" class="headerlink" title="프로필 추가"></a>프로필 추가</h2><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aws configure --profile &#123;profile name&#125;</span></span><br><span class="line">aws configure --profile newprofile</span><br></pre></td></tr></table></figure><blockquote><p>AWS Access Key ID [None]: new<br>AWS Secret Access Key [None]: newkey<br>Default region name [None]:<br>Default output format [None]:</p></blockquote><ul><li><code>aws configure --profile &#123;profile name&#125;</code> 명령을 치면 위 처럼 나오는데</li><li>여기에 키아이디와 키를 입력한다</li></ul><figure class="highlight txt"><figcaption><span>%USERPROFILE%/.aws/credentials</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id = xxxxxxxxxxxxxxxxxxxx</span><br><span class="line">aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">[newprofile]</span><br><span class="line">aws_access_key_id = new</span><br><span class="line">aws_secret_access_key = newkey</span><br></pre></td></tr></table></figure><ul><li><strong>%USERPROFILE%/.aws/credentials</strong> 파일을 열어보면 위처럼 [default] 프로필 아래에</li><li>새로운 프로필이 등록되었을 것이다</li></ul><h2 id="프로필-스위치"><a href="#프로필-스위치" class="headerlink" title="프로필 스위치"></a>프로필 스위치</h2><ul><li>나는 두 가지 방법을 써봤다</li></ul><h3 id="방법-1-AWS-PROFILE-환경-변수-설정"><a href="#방법-1-AWS-PROFILE-환경-변수-설정" class="headerlink" title="방법 1; AWS_PROFILE 환경 변수 설정"></a>방법 1; AWS_PROFILE 환경 변수 설정</h3><ul><li>환경 변수 <code>AWS_PROFILE</code>을 원하는 프로필명으로 설정한다</li><li><code>set AWS_PROFILE &#123;profilename&#125;</code></li><li><code>setx AWS_PROFILE &#123;profilename&#125;</code></li><li>이렇게 2가지를 사용할 수 있다</li><li>set은 해당 터미널에서만 적용된다. 해당 터미널이 닫히면 같이 날라간다</li><li>setx는 모든 터미널에서 적용된다.</li><li>setx의 경우 모든 터미널을 닫았다가 열어야 적용된다. vscode 전부 닫았다가 켜야 적용된다</li></ul><ul><li>참고 ;</li><li>환경 변수 삭제 <code>setx AWS_PROFILE &quot;&quot;</code></li><li>명명된 프로파일 ; <a href="https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-profiles.html">https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-profiles.html</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$AWS_PROFILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cmd (windows)</span></span><br><span class="line"><span class="built_in">echo</span> %AWS_PROFILE%</span><br></pre></td></tr></table></figure><ul><li>환경 변수 적용 확인을 꼭하자</li></ul><ul><li>방법 1은 가장 자주 쓰는 프로필을 지정할 때 좋을 것 같다</li></ul><h3 id="방법-2-옵션-사용"><a href="#방법-2-옵션-사용" class="headerlink" title="방법 2; 옵션 사용"></a>방법 2; 옵션 사용</h3><ul><li>환경변수 세팅 말고,</li><li>aws cli를 사용할 때 <code>--profile</code>옵션을 줄 수 있다</li><li>aws cli를 사용하다 보면 옵션을 주지 않아도 프로필이 한 개가 아니면 명령을 실행하다가도 어떤 프로필을 사용할지 물어본다</li><li>근데 실수로 다른 계정에 배포를 할 수 있으니까.. <code>--profile</code> 옵션을 쓰는 게 좋을 것 같다</li><li>sam cli의 경우 deploy 할 때 <code>sam deploy --profile newprofile</code> 이런 식으로 할 수 있겠다</li></ul><ul><li>방법 2는 워크스페이스 별로 여러 프로필로 작업할 때 좋을 것 같다.. 헷갈리지 않도록 메모 필수..!</li><li>sam deploy ; <a href="https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html">https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html</a></li></ul><h3 id="방법-3-번외-config-file-사용-aws-sdk"><a href="#방법-3-번외-config-file-사용-aws-sdk" class="headerlink" title="방법 3 (번외?); config file 사용 (aws-sdk)"></a>방법 3 (번외?); config file 사용 (aws-sdk)</h3><ul><li>cli에 적용되는 것은 아닌데, nodejs app에서 aws sdk 자격 증명하는데 json 파일을 쓸 수 있다</li><li>로컬에서 개발하고 클라우드 환경으로 올릴 때, 그 환경마다 <code>aws configure</code> 하는 게 귀찮다</li></ul><figure class="highlight json"><figcaption><span>config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;accessKeyId&quot;</span>: <span class="string">&quot;xxxxxxxxxxxxxxxxxxxx&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;secretAccessKey&quot;</span>: <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;region&quot;</span>: <span class="string">&quot;ap-northeast-2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AWS <span class="keyword">from</span> <span class="string">&#x27;aws-sdk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line">AWS.config.loadFromPath(path.join(__dirname, <span class="string">&#x27;./config.json&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li>json 파일로 자격 증명할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li>프로필 추가 ; <a href="https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-quickstart.html">https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-quickstart.html</a></li><li>명명된 프로파일 ; <a href="https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-profiles.html">https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-profiles.html</a></li><li>sam deploy ; <a href="https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html">https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html</a></li><li>구성 및 자격 증명 파일 설정 ; <a href="https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-files.html?shortFooter=true">https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-files.html?shortFooter=true</a></li><li>자격 증명 우선순위 ; <a href="https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/setting-credentials-node.html">https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/setting-credentials-node.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/aws/">aws</category>
      
      <category domain="https://chinsun9.github.io/tags/aws-cli/">aws cli</category>
      
      <category domain="https://chinsun9.github.io/tags/sam-cli/">sam cli</category>
      
      <category domain="https://chinsun9.github.io/tags/credentials/">credentials</category>
      
      
      <comments>https://chinsun9.github.io/2021/04/28/aws-credentials-%EC%97%AC%EB%9F%AC%EA%B0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>aws lambda에서 git쓰기</title>
      <link>https://chinsun9.github.io/2021/04/28/aws-lambda%EC%97%90%EC%84%9C-git%EC%93%B0%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2021/04/28/aws-lambda%EC%97%90%EC%84%9C-git%EC%93%B0%EA%B8%B0/</guid>
      <pubDate>Wed, 28 Apr 2021 06:14:01 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;람다 레이어에 위 arn을 추가한다&lt;/li&gt;
&lt;li&gt;사용 런타임에 따라</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8</p></blockquote><ul><li>람다 레이어에 위 arn을 추가한다</li><li>사용 런타임에 따라 다른 arn을 추가해야 한다는데</li><li><a href="https://github.com/lambci/git-lambda-layer">https://github.com/lambci/git-lambda-layer</a> README.md를 확인해서 추가하자</li></ul><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>람다에서 git 명령을 사용하고 싶다</li></ul><h2 id="레이어-추가"><a href="#레이어-추가" class="headerlink" title="레이어 추가"></a>레이어 추가</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">HelloWorldFunction:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span> <span class="comment"># More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">hello-world/</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">app.lambdaHandler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">nodejs14.x</span></span><br><span class="line">      <span class="attr">Layers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8&#x27;</span> <span class="comment"># 여기를 추가!!</span></span><br></pre></td></tr></table></figure><ul><li>sam template.yaml에서는 위와 같이 추가한다</li><li>또는 aws console로 직접 해당 람다에 가서 추가해 줄 수 있다</li></ul><h2 id="람다에서-깃-쓸-때-고려사항"><a href="#람다에서-깃-쓸-때-고려사항" class="headerlink" title="람다에서 깃 쓸 때 고려사항"></a>람다에서 깃 쓸 때 고려사항</h2><ul><li>람다에서는 가급적 가벼운 일을 해야 한다</li><li>git clone 한다면 /tmp 디렉터리에서 한다 (clone 옵션을 살펴서 최대한 필요한 것만 가져오자)</li><li>인증은 <code>Personal access tokens</code>을 사용했다<ul><li>토큰이 <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> 이렇게 있을 때,</li><li>https://<code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code>@github.com/<code>&#123;레포 오너&#125;</code>/<code>&#123;레포 명&#125;</code>.git</li><li>이렇게 사용할 수 있다</li></ul></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/lambci/git-lambda-layer">https://github.com/lambci/git-lambda-layer</a></li><li>람다 레이어 정리 ; <a href="https://chinsun9.github.io/2021/01/05/aws-sam-%EC%A0%95%EB%A6%AC/">https://chinsun9.github.io/2021/01/05/aws-sam-정리/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/aws/">aws</category>
      
      <category domain="https://chinsun9.github.io/tags/lambda/">lambda</category>
      
      <category domain="https://chinsun9.github.io/tags/arn/">arn</category>
      
      
      <comments>https://chinsun9.github.io/2021/04/28/aws-lambda%EC%97%90%EC%84%9C-git%EC%93%B0%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shell 파라미터 사용하기</title>
      <link>https://chinsun9.github.io/2021/04/28/shell-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2021/04/28/shell-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Wed, 28 Apr 2021 00:55:59 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight sh"><figcaption><span>example.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;zzzz <span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;zzzz <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;zzzz <span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>$ ./example.sh 1 2 3<br>zzzz 3<br>zzzz 1<br>zzzz 1 2 3</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://jink1982.tistory.com/36">https://jink1982.tistory.com/36</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/bash/">bash</category>
      
      
      <category domain="https://chinsun9.github.io/tags/bash/">bash</category>
      
      <category domain="https://chinsun9.github.io/tags/shell/">shell</category>
      
      
      <comments>https://chinsun9.github.io/2021/04/28/shell-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>윈도우 aws sam cli 설치</title>
      <link>https://chinsun9.github.io/2021/04/27/%EC%9C%88%EB%8F%84%EC%9A%B0-aws-sam-cli-%EC%84%A4%EC%B9%98/</link>
      <guid>https://chinsun9.github.io/2021/04/27/%EC%9C%88%EB%8F%84%EC%9A%B0-aws-sam-cli-%EC%84%A4%EC%B9%98/</guid>
      <pubDate>Tue, 27 Apr 2021 07:49:54 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EC%9C%88%EB%8F%84%EC%9A%B0-aws-sam-cli-%EC%84%A4%EC%B9%9</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/%EC%9C%88%EB%8F%84%EC%9A%B0-aws-sam-cli-%EC%84%A4%EC%B9%9820210427/preview.png" alt=" "></p><ul><li><a href="https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/serverless-sam-cli-install-windows.html#serverless-sam-cli-install-windows-sam-cli">https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/serverless-sam-cli-install-windows.html#serverless-sam-cli-install-windows-sam-cli</a></li><li>위 링크로 들어가면 설치 프로그램을 받을 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/serverless-sam-cli-install-windows.html#serverless-sam-cli-install-windows-sam-cli">https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/serverless-sam-cli-install-windows.html#serverless-sam-cli-install-windows-sam-cli</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/aws/">aws</category>
      
      <category domain="https://chinsun9.github.io/tags/aws-cli/">aws cli</category>
      
      <category domain="https://chinsun9.github.io/tags/aws-sam-cli/">aws sam cli</category>
      
      
      <comments>https://chinsun9.github.io/2021/04/27/%EC%9C%88%EB%8F%84%EC%9A%B0-aws-sam-cli-%EC%84%A4%EC%B9%98/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
