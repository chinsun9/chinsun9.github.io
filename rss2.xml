<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Thu, 12 Nov 2020 02:36:49 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>react typescript Prettier 적용하기, Prettier로 여러 파일 한번에 포맷팅하기</title>
      <link>https://chinsun9.github.io/2020/11/12/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2020/11/12/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 12 Nov 2020 02:29:49 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;settings.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight"><figcaption><span>settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;[typescript]&quot;: &#123;</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;[typescriptreact]&quot;: &#123;</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br></pre></td></tr></table></figure><ul><li>settings.json에 추가시켜준다.</li><li>저장할 때마다 자동으로 포맷팅되는 것을 확인할 수 있다.</li></ul><h2 id="일괄적으로-포맷팅하기"><a href="#일괄적으로-포맷팅하기" class="headerlink" title="일괄적으로 포맷팅하기"></a>일괄적으로 포맷팅하기</h2><ul><li>프리티어없이 개발했다가 코드 포맷팅을 일괄적으로 하고싶을 때가 있다.</li></ul><p><img src="/images/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B020201112/preview.jpg" alt=" "></p><figure class="highlight json"><figcaption><span>.prettierrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>.prettierrc</em> 파일을 생성한다.</li></ul><blockquote><p>npx prettier –write *<em>/</em>.{tsx,ts}</p></blockquote><ul><li>terminal에 위 명령을 치면</li><li>prettier가 일회성으로 설치되면서 지정한 확장자에 대해 포맷팅을 일괄적으로 실행해준다.</li><li><em>.prettierrc</em> prettier config file을 참고해서 실행되니</li><li>원하는 디렉터리만, 또는 무시할 디렉터리, 파일들을 설정해서 사용할 수 있다.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://prettier.io/docs/en/configuration.html">Prettier Configuration File</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/react/">react</category>
      
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/setting/">setting</category>
      
      <category domain="https://chinsun9.github.io/tags/prettier/">prettier</category>
      
      <category domain="https://chinsun9.github.io/tags/setting-json/">setting.json</category>
      
      <category domain="https://chinsun9.github.io/tags/formatOnSave/">formatOnSave</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>insert, update시 자동갱신 TIMESTAMP</title>
      <link>https://chinsun9.github.io/2020/11/11/insert/</link>
      <guid>https://chinsun9.github.io/2020/11/11/insert/</guid>
      <pubDate>Wed, 11 Nov 2020 08:51:06 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">LOG</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`idx`</span>     <span class="built_in">INT</span>            <span class="keyword">NOT</span> <span class="literal">NULL</span>    AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`ip`</span>      <span class="built_in">VARCHAR</span>(<span class="number">45</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`method`</span>  <span class="built_in">VARCHAR</span>(<span class="number">45</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`url`</span>     <span class="built_in">VARCHAR</span>(<span class="number">45</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`date`</span>    <span class="built_in">TIMESTAMP</span>      <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (idx)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>CURRENT_TIMESTAMP은 현재 시간을 의미한다.</li><li><code>DEFAULT CURRENT_TIMESTAMP</code> ; insert 시 자동으로 현재 시간이 들어간다</li><li><code>ON UPDATE CURRENT_TIMESTAMP</code> ; update 시 자동으로 현재 시간으로 갱신된다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://chinsun9.github.io/tags/timestamp/">timestamp</category>
      
      <category domain="https://chinsun9.github.io/tags/on-update/">on update</category>
      
      <category domain="https://chinsun9.github.io/tags/CURRENT-TIMESTAMP/">CURRENT_TIMESTAMP</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/11/insert/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS 네트워크 ACL</title>
      <link>https://chinsun9.github.io/2020/11/11/AWS/</link>
      <guid>https://chinsun9.github.io/2020/11/11/AWS/</guid>
      <pubDate>Wed, 11 Nov 2020 08:13:23 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;VPC를 위한 선택적 보안 계층&lt;/li&gt;
&lt;li&gt;시큐리티 그룹과 다르게 차단, deny 룰을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;ruleNumber가 낮은 숫자일수록 우선적용된다.&lt;/li&gt;
&lt;li&gt;20개까지 규칙을 지정할 수 있다고 한다</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>VPC를 위한 선택적 보안 계층</li><li>시큐리티 그룹과 다르게 차단, deny 룰을 사용할 수 있다.</li><li>ruleNumber가 낮은 숫자일수록 우선적용된다.</li><li>20개까지 규칙을 지정할 수 있다고 한다.</li><li>실제로 가용가능한 개수는 18개다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  CidrBlock: <span class="string">&#x27;0.0.0.0/0&#x27;</span>,</span><br><span class="line">  Egress: <span class="literal">false</span>,</span><br><span class="line">  Protocol: <span class="string">&#x27;-1&#x27;</span>,</span><br><span class="line">  RuleAction: <span class="string">&#x27;allow&#x27;</span>,</span><br><span class="line">  RuleNumber: <span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  CidrBlock: <span class="string">&#x27;0.0.0.0/0&#x27;</span>,</span><br><span class="line">  Egress: <span class="literal">false</span>,</span><br><span class="line">  Protocol: <span class="string">&#x27;-1&#x27;</span>,</span><br><span class="line">  RuleAction: <span class="string">&#x27;deny&#x27;</span>,</span><br><span class="line">  RuleNumber: <span class="number">32767</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>인바운드의 경우 이 2개가 기본적으로 세팅되어있다.</li></ul><h2 id="aws-sdk-로-ACL-룰-추가-교체하기"><a href="#aws-sdk-로-ACL-룰-추가-교체하기" class="headerlink" title="aws-sdk 로 ACL 룰 추가, 교체하기"></a>aws-sdk 로 ACL 룰 추가, 교체하기</h2><figure class="highlight ts"><figcaption><span>acl.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> in_params: EC2.CreateNetworkAclEntryRequest = &#123;</span><br><span class="line">  CidrBlock: ipv4 + <span class="string">&#x27;/24&#x27;</span>,</span><br><span class="line">  Egress: <span class="literal">false</span>, <span class="comment">//If true, OUTbound rule. fasle is INbound</span></span><br><span class="line">  NetworkAclId: aclId,</span><br><span class="line">  Protocol: <span class="string">`6`</span>, <span class="comment">// -1 : all protocl // 6 : 사용자 지정 tcp</span></span><br><span class="line">  PortRange: &#123; From: <span class="number">80</span>, To: <span class="number">443</span> &#125;, <span class="comment">// http - https</span></span><br><span class="line">  RuleAction: <span class="string">&#x27;deny&#x27;</span>,</span><br><span class="line">  RuleNumber: acl_cnt, <span class="comment">// 우선순위 ruleNumber</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기존 존재하는 acl 규칙 개수에 따라서 mode를 달리한다</span></span><br><span class="line"><span class="comment">// mode값에 따라 메소드를 달리함.</span></span><br><span class="line"><span class="comment">// 20개가 안되는 경우 createNetworkAclEntry 를 사용함</span></span><br><span class="line"><span class="comment">// 20개 모두 찬경우 replaceNetworkAclEntry를 통해 교체하는 방법</span></span><br><span class="line"><span class="keyword">const</span> method =</span><br><span class="line">  mode === <span class="string">&#x27;create&#x27;</span> ? <span class="string">&#x27;createNetworkAclEntry&#x27;</span> : <span class="string">&#x27;replaceNetworkAclEntry&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  ec2[method](in_params, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err.message, acl_cnt);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> reject(err.message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Create AclEntry Successful : \n&#x27;</span>, in_params); <span class="comment">// successful response</span></span><br><span class="line">      resolve(in_params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>이상한 요청을 차단하기 위해 알아보았다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/vpc-network-acls.html">네트워크 ACL</a></li><li><a href="https://bluese05.tistory.com/47">AWS VPC를 디자인해보자(2) - ACL과 Security Group을 활용한 보안 강화</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC 할당량</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/aws/">aws</category>
      
      <category domain="https://chinsun9.github.io/tags/acl/">acl</category>
      
      <category domain="https://chinsun9.github.io/tags/network/">network</category>
      
      <category domain="https://chinsun9.github.io/tags/vpc/">vpc</category>
      
      <category domain="https://chinsun9.github.io/tags/sg/">sg</category>
      
      <category domain="https://chinsun9.github.io/tags/security-groups/">security groups</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/11/AWS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>typescript json import</title>
      <link>https://chinsun9.github.io/2020/11/10/typescri/</link>
      <guid>https://chinsun9.github.io/2020/11/10/typescri/</guid>
      <pubDate>Tue, 10 Nov 2020 06:32:15 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;tsconfig.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;compilerOptions&quot;: &#123;</span><br><span class="line">  <span class="comment">// (...)</span></span><br><span class="line"></span><br><span class="line">  &quot;resolveJsonModule&quot;: true,</span><br><span class="line">  &quot;esModuleInterop&quot;: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>tsconfig.json</em> 의 <code>compilerOptions</code> 부분에 추가한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/57574481/angular-8-and-importing-json">Angular 8 and importing Json</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typescript/">typescript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/json/">json</category>
      
      <category domain="https://chinsun9.github.io/tags/import/">import</category>
      
      <category domain="https://chinsun9.github.io/tags/es6/">es6</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/typescri/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>connection vs connection pool</title>
      <link>https://chinsun9.github.io/2020/11/10/conn/</link>
      <guid>https://chinsun9.github.io/2020/11/10/conn/</guid>
      <pubDate>Tue, 10 Nov 2020 05:56:38 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;connection pool를 써보자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Connection-pool&quot;&gt;&lt;a href=&quot;#Connection-pool&quot; class=&quot;headerlink&quot; title=&quot;Connection pool&quot;&gt;&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>connection pool를 써보자</li></ul><h2 id="Connection-pool"><a href="#Connection-pool" class="headerlink" title="Connection pool"></a>Connection pool</h2><ul><li>기존 connection은 데이터베이스에 동시 접속 허용량을 초과하는 연결을 할 경우 에러 발생</li><li>connection pool을 사용하면 대기상태가 되었다가 수행됨</li><li>pool 에 여러 미리 생성되어 있는 connection을 가져가 쓴다</li><li>connection이 미리 생성되어있기 때문에 생성시간 소모되지 않음.</li><li>따라서 속도 빨라짐. 쉽게 다운되지 않음.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.guidearea.com/best-database-practices-single-connection-vs-connection-pool/">Database Tutorial – Single Connection vs Connection Pool</a></li><li><a href="https://brownbears.tistory.com/289">[DB]Connection Pool</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql2/">mysql2</category>
      
      <category domain="https://chinsun9.github.io/tags/connection/">connection</category>
      
      <category domain="https://chinsun9.github.io/tags/connection-pool/">connection pool</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/conn/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql vs mysql2</title>
      <link>https://chinsun9.github.io/2020/11/10/mysql/</link>
      <guid>https://chinsun9.github.io/2020/11/10/mysql/</guid>
      <pubDate>Tue, 10 Nov 2020 05:38:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;mysql2를 사용해보자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mysql2-노드-패키지&quot;&gt;&lt;a href=&quot;#mysql2-노드-패키지&quot; class=&quot;headerlink&quot; title=&quot;mysql2 노드 패키지&quot;&gt;&lt;/a&gt;mysql2 노드 패키지</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>mysql2를 사용해보자</li></ul><h2 id="mysql2-노드-패키지"><a href="#mysql2-노드-패키지" class="headerlink" title="mysql2 노드 패키지"></a>mysql2 노드 패키지</h2><ul><li>기존 mysql 패키지 보다 빠름</li><li>기존 mysql를 대체하는 것이 목표라고함</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/sidorares/node-mysql2#readme">sidorares/node-mysql2</a></li><li><a href="https://npmcompare.com/compare/mysql,mysql2">Comparing mysql vs. mysql2</a></li><li><a href="https://stackoverflow.com/questions/25344661/what-is-the-difference-between-mysql-mysql2-considering-nodejs">What is the difference between MySQL &amp; MySQL2 considering NodeJS</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql2/">mysql2</category>
      
      <category domain="https://chinsun9.github.io/tags/npm/">npm</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/mysql/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ts-node</title>
      <link>https://chinsun9.github.io/2020/11/10/ts-node/</link>
      <guid>https://chinsun9.github.io/2020/11/10/ts-node/</guid>
      <pubDate>Tue, 10 Nov 2020 00:21:23 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;figcaption&gt;&lt;span&gt;terminal&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight cmd"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node src/index.ts</span><br></pre></td></tr></table></figure><ul><li>tsc를 통해 .js파일로 만들고, js파일을 실행하는 것이 아니라</li><li>바로 .ts 파일을 실행하는 것처럼 보여준다.</li><li>따로 .js파일은 생성되지 않는다.</li></ul><h2 id="ts-node-설치"><a href="#ts-node-설치" class="headerlink" title="ts-node 설치"></a>ts-node 설치</h2><figure class="highlight cmd"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ts-node</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/TypeStrong/ts-node">TypeStrong/ts-node</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typescript/">typescript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/ts-node/">ts-node</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/ts-node/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS ELB를 사용할 때 express morgan 로깅 주의점</title>
      <link>https://chinsun9.github.io/2020/11/09/AWS-ELB%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-express-morgan-%EB%A1%9C%EA%B9%85-%EC%A3%BC%EC%9D%98%EC%A0%90/</link>
      <guid>https://chinsun9.github.io/2020/11/09/AWS-ELB%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-express-morgan-%EB%A1%9C%EA%B9%85-%EC%A3%BC%EC%9D%98%EC%A0%90/</guid>
      <pubDate>Mon, 09 Nov 2020 08:50:30 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;morgan 로깅할 때, 사용자의 ip를 기록하는&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:remote-addr&lt;/code&gt; 토큰은 req.ip 를 사용한다.&lt;/li&gt;
&lt;li&gt;ELB, 로드밸런서를 사용하면 사용자의 ip가 아니라, ELB의 ip가 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>morgan 로깅할 때, 사용자의 ip를 기록하는</li><li><code>:remote-addr</code> 토큰은 req.ip 를 사용한다.</li><li>ELB, 로드밸런서를 사용하면 사용자의 ip가 아니라, ELB의 ip가 기록된다.</li><li>그래서 사용자의 ip를 가져오려면 <code>x-forwarded-for</code> 헤더의 내용을 봐야한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ip = req.headers[<span class="string">&#x27;x-forwarded-for&#x27;</span>] || req.connection.remoteAddress;</span><br></pre></td></tr></table></figure><h2 id="morgan-custom"><a href="#morgan-custom" class="headerlink" title="morgan custom"></a>morgan custom</h2><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  morgan(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">tokens, req, res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        req.headers[<span class="string">&#x27;x-forwarded-for&#x27;</span>] || req.connection.remoteAddress,</span><br><span class="line">        req.ip, <span class="comment">// == :remote-addr</span></span><br><span class="line">        tokens.method(req, res),</span><br><span class="line">        tokens.url(req, res),</span><br><span class="line">        tokens.status(req, res),</span><br><span class="line">      ].join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      skip: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res.statusCode &lt; <span class="number">400</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><ul><li>이런식으로 커스텀할 수 있다.</li><li><code>req.headers[&#39;x-forwarded-for&#39;]</code>의 내용은</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;</span><br></pre></td></tr></table></figure><ul><li>이런식으로 가장 앞의 ip가 사용자 ip이다.</li><li>뒤로 <code>,</code>로 나열되는 ip는 프록시임으로 당황하지 말자</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  skip: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.statusCode &lt; <span class="number">400</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>morgan(f(), {})</li><li>morgan 두번째 인자로 옵션을 넣을 수 있다.</li><li>skip을 주면 특정 경우에서 로깅을 하지 않는 옵션이다</li><li><code>return res.statusCode &lt; 400;</code>이런식으로 하면 400이하의 스테이터스 코드일 때,</li><li>로깅을 하지 않는다는 의미이다.</li><li>이 경우 404, 500 같은 에러들만 로깅된다.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://expressjs.com/en/resources/middleware/morgan.html">Express morgan middleware</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/aws/">aws</category>
      
      <category domain="https://chinsun9.github.io/tags/express/">express</category>
      
      <category domain="https://chinsun9.github.io/tags/elb/">elb</category>
      
      <category domain="https://chinsun9.github.io/tags/morgan/">morgan</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/AWS-ELB%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-express-morgan-%EB%A1%9C%EA%B9%85-%EC%A3%BC%EC%9D%98%EC%A0%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정규식 : 특정 문자열을 포함하는 줄, 라인 판단</title>
      <link>https://chinsun9.github.io/2020/11/09/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A8/</link>
      <guid>https://chinsun9.github.io/2020/11/09/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A8/</guid>
      <pubDate>Mon, 09 Nov 2020 08:21:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%9</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A820201109/preview.jpg" alt=" "></p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><figure class="highlight plain"><figcaption><span>log</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 1</span><br><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 2</span><br><span class="line">&quot;GET &#x2F;a HTTP&#x2F;1.1&quot; 404 hello world 1</span><br><span class="line">&quot;POST &#x2F; HTTP&#x2F;1.1&quot; 404 hello world 1</span><br><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 2</span><br><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 1</span><br><span class="line">&quot;POST &#x2F;asd HTTP&#x2F;1.1&quot; 404 hello world 2</span><br></pre></td></tr></table></figure><ul><li>이런 웹 로그가 있다고 하자.</li><li>중간에 보이는 200, 404 는 status code 이다.</li><li>404 에러인 라인만 뽑아서 보고싶을 때..</li></ul><h2 id="로그파일을-한줄씩-읽으며-정규식으로-확인하기"><a href="#로그파일을-한줄씩-읽으며-정규식으로-확인하기" class="headerlink" title="로그파일을 한줄씩 읽으며 정규식으로 확인하기"></a>로그파일을 한줄씩 읽으며 정규식으로 확인하기</h2><figure class="highlight ts"><figcaption><span>app.ts 전체코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> readline <span class="keyword">from</span> <span class="string">&#x27;readline&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input_log_file_name = <span class="string">&#x27;nohup20201107.out&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input_file_path = path.join(</span><br><span class="line">  __dirname,</span><br><span class="line">  <span class="string">`../input files/<span class="subst">$&#123;input_log_file_name&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> output_file_path = path.join(</span><br><span class="line">  __dirname,</span><br><span class="line">  <span class="string">`../output files/<span class="subst">$&#123;input_log_file_name&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(input_file_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">processLineByLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileStream = fs.createReadStream(input_file_path);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: fileStream,</span><br><span class="line">    crlfDelay: <span class="literal">Infinity</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 정규식</span></span><br><span class="line">  <span class="keyword">const</span> reg404 = <span class="regexp">/^.*(404).*/</span>;</span><br><span class="line">  <span class="keyword">let</span> result_string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> line <span class="keyword">of</span> rl) &#123;</span><br><span class="line">    <span class="comment">// console.log(`Line from file: $&#123;line&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reg404.test(line)) &#123;</span><br><span class="line">      <span class="comment">//   console.log(`hello : $&#123;line&#125;`);</span></span><br><span class="line">      result_string += line + <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.writeFile(output_file_path, result_string, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;file write complete&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processLineByLine();</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>readline으로 한줄한줄 읽기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileStream = fs.createReadStream(input_file_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: fileStream,</span><br><span class="line">  crlfDelay: <span class="literal">Infinity</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>우선, 파일을 한줄씩 읽기위해 <code>readline</code>을 사용했다</li></ul><figure class="highlight ts"><figcaption><span>정규식으로 404 문자열 포함 여부 확인</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정규식</span></span><br><span class="line"><span class="keyword">const</span> reg404 = <span class="regexp">/^.*(404).*/</span>;</span><br><span class="line"><span class="keyword">let</span> result_string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> line <span class="keyword">of</span> rl) &#123;</span><br><span class="line">  <span class="comment">// console.log(`Line from file: $&#123;line&#125;`);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reg404.test(line)) &#123;</span><br><span class="line">    <span class="comment">//   console.log(`hello : $&#123;line&#125;`);</span></span><br><span class="line">    result_string += line + <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>^.*(404).*</code> 로 정규식을 새웠다.</li><li><code>^.*</code> ; 아무 문자로 시작하는 0개 이상의 문자열로 시작하고</li><li><code>(404)</code> ; 404 문자열을 중간에 포함하며</li><li><code>.*</code> ; 아무 문자열로 끝나는가</li></ul><ul><li><code>reg404.test(line)</code>로 한줄한줄 확인하고</li><li>참인 경우에 result_string 에 더하기</li></ul><figure class="highlight ts"><figcaption><span>result_string 결과 새파일로 쓰기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(output_file_path, result_string, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;file write complete&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>result_string에는 404 문자열을 포함한느 라인만 추출되었고</li><li>output_file_path에 해당 내용을 쓴다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/reg-exp/">reg exp</category>
      
      
      <category domain="https://chinsun9.github.io/tags/reg-exp/">reg exp</category>
      
      <category domain="https://chinsun9.github.io/tags/reg/">reg</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CRLF, LF</title>
      <link>https://chinsun9.github.io/2020/11/09/crlf-lf/</link>
      <guid>https://chinsun9.github.io/2020/11/09/crlf-lf/</guid>
      <pubDate>Mon, 09 Nov 2020 06:50:36 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;LF&lt;br&gt;\n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;CRLF = CR + LF&lt;br&gt;\r\n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;여러줄의 텍스트를 가진 file을 읽고 처리할 때 줄바꿈</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>LF<br>\n</p></blockquote><blockquote><p>CRLF = CR + LF<br>\r\n</p></blockquote><ul><li>여러줄의 텍스트를 가진 file을 읽고 처리할 때 줄바꿈 형식을 알고 있어야한다.</li><li>윈도우의 경우 CRLF이다.</li></ul><h2 id="vscode에서-쉽게-변환하기"><a href="#vscode에서-쉽게-변환하기" class="headerlink" title="vscode에서 쉽게 변환하기"></a>vscode에서 쉽게 변환하기</h2><p><img src="/images/crlf-lf20201109/preview.jpg" alt=" "></p><ul><li>vscode에서는 우측하단에 보면, 인코딩 형식과 줄바꿈 형식을 알려준다.</li><li>우측하단을 클릭해서 변환할 수 있다.</li><li>또는 ctrl + shift + p 에서 <code>end of line</code>을 검색해서 변환할 수 있다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/crlf/">crlf</category>
      
      <category domain="https://chinsun9.github.io/tags/lf/">lf</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/crlf-lf/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>게시판 페이지네이션 SQL</title>
      <link>https://chinsun9.github.io/2020/11/09/%EA%B2%8C%EC%8B%9C%ED%8C%90-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-SQL/</link>
      <guid>https://chinsun9.github.io/2020/11/09/%EA%B2%8C%EC%8B%9C%ED%8C%90-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-SQL/</guid>
      <pubDate>Mon, 09 Nov 2020 03:43:19 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sql&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> page = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="string">`SELECT * FROM notice WHERE use_flag=&#x27;Y&#x27; ORDER BY idx DESC LIMIT ?,?`</span>;</span><br><span class="line"><span class="keyword">const</span> queryArgs = [<span class="number">10</span> * (page - <span class="number">1</span>), <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> client.query(query, queryArgs);</span><br></pre></td></tr></table></figure><ul><li>notice 테이블에서 <code>page</code>값에 따라 게시글 10개를 가져오는 쿼리이다</li><li>limit 을 이용해서 구현하였다.</li></ul><blockquote><p>SELECT * FROM notice LIMIT 0,10<br>// 0번째부터 10개를 가져온다는 의미이다.</p></blockquote><blockquote><p>SELECT * FROM notice LIMIT 20,10<br>// 20번째부터 10개를 가져온다는 의미이다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/chinsun9/2020-web-test/blob/a6230973aa75be8b085f2b699fe81f9d2270b8cc/backend/web/utils/myDAO.js#L27">web test</a>에서 사용한 소스코드</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/limit/">limit</category>
      
      <category domain="https://chinsun9.github.io/tags/pagination/">pagination</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/%EA%B2%8C%EC%8B%9C%ED%8C%90-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-SQL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>inline style vs !important</title>
      <link>https://chinsun9.github.io/2020/11/09/inline-style-vs-important/</link>
      <guid>https://chinsun9.github.io/2020/11/09/inline-style-vs-important/</guid>
      <pubDate>Mon, 09 Nov 2020 00:05:37 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/inline-style-vs-important20201109/preview.jpg&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;!important 승&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;갑자기</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/inline-style-vs-important20201109/preview.jpg" alt=" "></p><blockquote><p>!important 승</p></blockquote><ul><li>갑자기 인라인에서 정의한 스타일과 <code>!important</code> 중에 누가 더 강력한지 궁금해 졌다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/css/">css</category>
      
      <category domain="https://chinsun9.github.io/tags/html/">html</category>
      
      <category domain="https://chinsun9.github.io/tags/style/">style</category>
      
      <category domain="https://chinsun9.github.io/tags/inline-styles/">inline styles</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/inline-style-vs-important/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Banner Maker 클론코딩</title>
      <link>https://chinsun9.github.io/2020/11/06/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/</link>
      <guid>https://chinsun9.github.io/2020/11/06/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/</guid>
      <pubDate>Fri, 06 Nov 2020 07:08:33 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/banner-maker/banner-maker&quot;&gt;banner-maker/banner-maker&lt;/a&gt;를 클론코딩해보았다.&lt;/li&gt;
&lt;li&gt;내 두번째 리액트 프로젝트..!&lt;/li&gt;
&lt;/u</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://github.com/banner-maker/banner-maker">banner-maker/banner-maker</a>를 클론코딩해보았다.</li><li>내 두번째 리액트 프로젝트..!</li></ul><h2 id="데모"><a href="#데모" class="headerlink" title="데모"></a>데모</h2><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/preview.jpg" alt=" "></p><ul><li><a href="https://chinsun9.github.io/react-banner-maker/" target="_blank">Banner Maker (React)</a></li></ul><h2 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h2><ul><li>캔버스 크기 조절</li><li>실시간 캔버스 업데이트</li><li>폰트 사이즈 조절</li><li>폰트색 조절</li><li>캔버스색에 따른 폰트색 자동조절</li><li>캔버스색 조절</li><li>랜덤 캠버스색</li><li>이미지로 다운로드</li><li>클립보드로 카피</li><li>컬러 히스토리 기능</li><li>컬러 히스토리 임포트, 익스포트 기능</li></ul><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><ul><li>타입스크립트 공부 겸 리액트도 같이 하자는 생각으로 리액트 타입스크립트를 시작했다.</li><li>velopert님의 <a href="https://velog.io/@velopert/using-react-with-typescript">리액트 프로젝트에서 타입스크립트 사용하기</a> 글을 보고 따라하다가</li><li>튜토리얼을 통해 잘 만들어진 프로젝트 구조를 기반으로 만들었다.</li><li>리액트가 아직 익숙하지 않은데 리액트의 훅이라던지 처음부터 고급??개념들을 사용하니까</li><li>사실 뭐가 좋은지, 이렇게 써서 좋은점이 무엇인지..</li><li>이 개념을 도입하기전의 것들을 시도해보지 않았기 때문에 막연한 감이 있었다.</li><li>나는 공부할때 이론보단 무조건 실기이고, 일단 만들어보면서 익히고 이해하자라는 주의이다.</li><li>그래서 이것저것 쉽게만들 수 있다고 생각한다. (나중에 보면 코드가 엄청 구릴지라도..)</li></ul><ul><li>이번에 만들면서 신경쎃던 것은</li><li>사용성..?? 인 것같다.</li></ul><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/1.jpg" alt=" "></p><ul><li>나는 보통 이미지를 ctrl c 카톡에다가 ctrl v 하여 톡방에 올리는데</li><li>그걸위한 copy clipboard 버튼을 만들었다. 저장후 이미지 올리기는 귀찮기 때문에..</li></ul><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/2.jpg" alt=" "></p><ul><li>또 랜덤 칼러 버튼을 만들어서 색을 쇼핑했다.</li></ul><figure class="highlight js"><figcaption><span>js/index.js</span><a href="https://github.com/chinsun9/html-banner-maker/commit/5cccc1594309f732ea8edd8ca08c91800d97d317">html-banner-maker/commit/5cccc1594309f732ea8edd8ca08c91800d97d317</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get color (black/white) depending on bgColor so it would be clearly seen.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">bgColor</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorByBgColor</span>(<span class="params">bgColor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!bgColor) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(bgColor.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="number">16</span>) &gt; <span class="number">0xffffff</span> / <span class="number">2</span></span><br><span class="line">    ? <span class="string">&#x27;#000&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;#fff&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>사용해보면 알겠지만 랜덤으로 생성된 배경색에 따라 폰트색도 검정색/흰색 적절한게 선택된다.</li></ul><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/3.jpg" alt=" "></p><ul><li>컬러 히스토리 기능이다.</li><li>copy 버튼이나 download 버튼을 누르면 해당 배경색과, 폰트색이 히스토리에 저장된다.</li><li>만약에 같은 최근 히스토리에 저장된 색과 같은 색이면 저장하지 않도록 하였다. 버튼을 누를때마다 증식되지 않도록..</li><li>export 버튼을 눌러 현재 저장된 컬러 히스토리를 json 파일로 내보내는 기능도있다.</li><li>깃허브 페이지를 이용해 호스팅하기때문에, 내 앱은 정적이다.</li><li>어떻게 히스토리를 저장하고 불러올까 생각하다가 json 파일로 내보내고 다시 불러오도록 만들게 되었다.</li></ul><h2 id="개선방향"><a href="#개선방향" class="headerlink" title="개선방향"></a>개선방향</h2><ul><li>칼러픽커에서 알파값을 바꿀 수 있도록 하기</li><li>폰트 변경 기능</li><li>textarea를 div안에 넣어버리기..? (html2canvas 사용해보기)</li><li>json파일로부터 컬러히스토리 임포트할때 덮어쓰기가 아니라 병합으로 불러오기</li></ul><figure class="highlight js"><figcaption><span>src/modules/common/copyToClipboard.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">copyToClipboard</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">`#myCanvas`</span>);</span><br><span class="line">  <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">    <span class="keyword">const</span> item = <span class="keyword">new</span> ClipboardItem(&#123; <span class="string">&#x27;image/png&#x27;</span>: blob &#125;);</span><br><span class="line">    navigator.clipboard.write([item]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>클립보드 복사 js 코드를 ts로 변환하지 못한 코드..</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><ul><li><a href="https://github.com/chinsun9/react-banner-maker">react-banner-maker</a></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li>리액트 타입스크립트 공부 ; <a href="https://velog.io/@velopert/using-react-with-typescript">리액트 프로젝트에서 타입스크립트 사용하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/react/">react</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/hook/">hook</category>
      
      <category domain="https://chinsun9.github.io/tags/clone-coding/">clone coding</category>
      
      <category domain="https://chinsun9.github.io/tags/%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/">클론코딩</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/06/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정처기 으악</title>
      <link>https://chinsun9.github.io/2020/11/06/%EC%A0%95%EC%B2%98%EA%B8%B0-%EC%9C%BC%EC%95%85/</link>
      <guid>https://chinsun9.github.io/2020/11/06/%EC%A0%95%EC%B2%98%EA%B8%B0-%EC%9C%BC%EC%95%85/</guid>
      <pubDate>Fri, 06 Nov 2020 04:46:12 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;정보처리기사 책을 펴고 30분 봣는데 모니터 보는 것 보다 눈이 아파서 때려쳤다.&lt;/li&gt;
&lt;li&gt;막연한 이론은 공부할 엄두가 안난다…&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>정보처리기사 책을 펴고 30분 봣는데 모니터 보는 것 보다 눈이 아파서 때려쳤다.</li><li>막연한 이론은 공부할 엄두가 안난다…</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/">정보처리기사</category>
      
      
      <category domain="https://chinsun9.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/">정보처리기사</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/06/%EC%A0%95%EC%B2%98%EA%B8%B0-%EC%9C%BC%EC%95%85/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vscode search exclude setting</title>
      <link>https://chinsun9.github.io/2020/11/06/vscode-search-exclude-setting/</link>
      <guid>https://chinsun9.github.io/2020/11/06/vscode-search-exclude-setting/</guid>
      <pubDate>Fri, 06 Nov 2020 04:27:26 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;검색결과에서 제외할 디렉터리, 파일 설정하기&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;세팅창-화면으로&quot;&gt;&lt;a href=&quot;#세팅창-화면으로&quot; class=&quot;headerlink&quot; title=&quot;세팅창 화면으로&quot;&gt;&lt;/a&gt;세팅창 화면으로&lt;/h2&gt;&lt;ul&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>검색결과에서 제외할 디렉터리, 파일 설정하기</li></ul><h2 id="세팅창-화면으로"><a href="#세팅창-화면으로" class="headerlink" title="세팅창 화면으로"></a>세팅창 화면으로</h2><ul><li><code>Ctrl + Shift + P</code> 를 누르고 setting을 입력한다</li><li><code>Preferences: Open Settings (UI)</code>로 들어간다</li></ul><h2 id="search-exclude-설정"><a href="#search-exclude-설정" class="headerlink" title="search: exclude 설정"></a>search: exclude 설정</h2><p><img src="/images/vscode-search-exclude-setting20201106/preview.jpg" alt=" "></p><ul><li>검색에서 제외할 패턴들을 입력한다.</li></ul><h2 id="검색-제외-적용하기"><a href="#검색-제외-적용하기" class="headerlink" title="검색 제외 적용하기"></a>검색 제외 적용하기</h2><p><img src="/images/vscode-search-exclude-setting20201106/3.jpg" alt=" "></p><ul><li>… 을 클릭해서 디테일 표시</li></ul><p><img src="/images/vscode-search-exclude-setting20201106/1.jpg" alt=" "></p><ul><li>file to exclude 영역에 아이콘 활성화</li></ul><p><img src="/images/vscode-search-exclude-setting20201106/2.jpg" alt=" "></p><ul><li>왼쪽이 비활성화일 때</li><li>오른쪽이 활성화일 때</li><li>쓸때없는 것을 제외함으로써 쾌적한 검색결과를 확인할 수 있다.</li></ul><h2 id="상위-옵션-files-exclude"><a href="#상위-옵션-files-exclude" class="headerlink" title="상위 옵션 ; files.exclude"></a>상위 옵션 ; files.exclude</h2><ul><li>vscode 탐색기에서 존재자체를 없애버리는 얘다.</li><li>여기서 제외된 디렉터리는 당연히 검색에서도 제외됨으로</li><li>search.exclude의 상위 호환이라고 볼 수 있다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/files-exclude/">files.exclude</category>
      
      <category domain="https://chinsun9.github.io/tags/search-exclude/">search.exclude</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/06/vscode-search-exclude-setting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gradle project 에서 runnable jar 생성하기</title>
      <link>https://chinsun9.github.io/2020/11/06/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2020/11/06/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 06 Nov 2020 01:42:42 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B020201106/preview.jpg&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B020201106/preview.jpg" alt=" "></p><ul><li>일반 자바 프로젝트 처럼 <code>Export &gt; Runnable JAR file</code>로 jar을 만들게 되면 생성된 jar파일의 용량이 매우 작은것을 확인할 수 있다.</li><li>내가 추가한 외부 라이브러리들이 전부 빠져서 동작하지 않는다</li><li>gradle project에서는 어떤방식으로 runable jar을 만들어야 할까?</li></ul><h2 id="build-gradle-수정하기"><a href="#build-gradle-수정하기" class="headerlink" title="build.gradle 수정하기"></a>build.gradle 수정하기</h2><figure class="highlight plain"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">manifest &#123;</span><br><span class="line">attributes &#39;Main-Class&#39;: &#39;tmp.gradle.project.Main&#39;</span><br><span class="line">&#125;</span><br><span class="line">from &#123;</span><br><span class="line">configurations.compile.collect &#123;</span><br><span class="line">it.isDirectory() ? it : zipTree(it)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B020201106/1.jpg" alt=" "></p><ul><li>jar { … } 에 해당하는 부분을 위처럼 새로이 추가해준다.</li><li><code>attributes &#39;Main-Class&#39;: &#39;tmp.gradle.project.Main&#39;</code> 여기에는 자신의 메인 클래스를 지정하면된다.</li></ul><h2 id="jar파일-생성하기"><a href="#jar파일-생성하기" class="headerlink" title="jar파일 생성하기"></a>jar파일 생성하기</h2><p><img src="/images/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B020201106/2.jpg" alt=" "></p><figure class="highlight cmd"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;gradle project rootpath&#125;</span><br><span class="line">gradle jar</span><br></pre></td></tr></table></figure><ul><li>자신의 그래들 프로젝트 경로에서 cmd를 켜주고</li><li><code>gradle jar</code> 명령을 실행한다.</li></ul><h2 id="jar파일-확인하기"><a href="#jar파일-확인하기" class="headerlink" title="jar파일 확인하기"></a>jar파일 확인하기</h2><p><img src="/images/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B020201106/3.jpg" alt=" "></p><ul><li>build/libs 디렉터리에 가보면 jar파일이 생성되있음을 확인할 수 있다.</li></ul><figure class="highlight cmd"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build\libs</span><br><span class="line">java -jar &#123;jar파일명&#125;</span><br></pre></td></tr></table></figure><ul><li>로 한번 잘 실행되는지 확인한다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/java/">java</category>
      
      
      <category domain="https://chinsun9.github.io/tags/java/">java</category>
      
      <category domain="https://chinsun9.github.io/tags/gradle/">gradle</category>
      
      <category domain="https://chinsun9.github.io/tags/build-gradle/">build.gradle</category>
      
      <category domain="https://chinsun9.github.io/tags/lib/">lib</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/06/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gradle로 외부라이브러리 설치하기</title>
      <link>https://chinsun9.github.io/2020/11/06/gradle%EB%A1%9C-%EC%99%B8%EB%B6%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2020/11/06/gradle%EB%A1%9C-%EC%99%B8%EB%B6%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 06 Nov 2020 01:22:14 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;원하는-라이브러리-명-gadle-키워드로-구글링한다&quot;&gt;&lt;a href=&quot;#원하는-라이브러리-명-gadle-키워드로-구글링한다&quot; class=&quot;headerlink&quot; title=&quot;원하는 라이브러리 명 + gadle 키워드로 구글링한다&quot;&gt;&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="원하는-라이브러리-명-gadle-키워드로-구글링한다"><a href="#원하는-라이브러리-명-gadle-키워드로-구글링한다" class="headerlink" title="원하는 라이브러리 명 + gadle 키워드로 구글링한다"></a>원하는 라이브러리 명 + gadle 키워드로 구글링한다</h2><p><img src="/images/gradle%EB%A1%9C-%EC%99%B8%EB%B6%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B020201106/1.jpg" alt=" "></p><ul><li>나는 json-simple 을 받아보겠다.</li></ul><h2 id="카피"><a href="#카피" class="headerlink" title="카피"></a>카피</h2><p><img src="/images/gradle%EB%A1%9C-%EC%99%B8%EB%B6%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B020201106/2.jpg" alt=" "></p><ul><li>그래들 탭인지 잘 확인하고 카피한다.</li><li>build.gradle 파일로와서 dependencies에 추가하고 저정한다.</li></ul><h2 id="Gradle-Project-Refresh"><a href="#Gradle-Project-Refresh" class="headerlink" title="Gradle Project Refresh"></a>Gradle Project Refresh</h2><p><img src="/images/gradle%EB%A1%9C-%EC%99%B8%EB%B6%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B020201106/3.jpg" alt=" "></p><ul><li>끝!</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/java/">java</category>
      
      
      <category domain="https://chinsun9.github.io/tags/gradle/">gradle</category>
      
      <category domain="https://chinsun9.github.io/tags/build-gradle/">build.gradle</category>
      
      <category domain="https://chinsun9.github.io/tags/lib/">lib</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/06/gradle%EB%A1%9C-%EC%99%B8%EB%B6%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RDS 삭제시 주의사항</title>
      <link>https://chinsun9.github.io/2020/11/06/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD/</link>
      <guid>https://chinsun9.github.io/2020/11/06/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD/</guid>
      <pubDate>Fri, 06 Nov 2020 00:14:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD20201106/preview.jpg&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ㅠㅠ&lt;/li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD20201106/preview.jpg" alt=" "></p><ul><li>ㅠㅠ</li></ul><h2 id="RDS-삭제-시-자동으로-스냅샷-생성"><a href="#RDS-삭제-시-자동으로-스냅샷-생성" class="headerlink" title="RDS 삭제 시 자동으로 스냅샷 생성"></a>RDS 삭제 시 자동으로 스냅샷 생성</h2><ul><li>RDS를 삭제하면 자동으로 스냅샷? 백업같은 것을 생성한다.</li></ul><p><img src="/images/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD20201106/1.jpg" alt=" "></p><ul><li>RDS를 사용중도아니고, 삭제하니까 비용이 생긴게 삭제하면서 생긴 스냅샷 보관 비용이였다.</li></ul><p><img src="/images/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD20201106/2.jpg" alt=" "></p><ul><li>RDS를 삭제한다면 RDS 삭제 후 꼭 <code>RDS &gt; 스냅샷</code> 에서 생성된 스냅샷도 같이 삭제..</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/rds/">rds</category>
      
      <category domain="https://chinsun9.github.io/tags/%EB%B9%84%EC%9A%A9/">비용</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/06/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>일렉트론으로 OBS input overlay 클론코딩</title>
      <link>https://chinsun9.github.io/2020/11/05/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0%EC%9C%BC%EB%A1%9C-OBS-input-overlay-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/</link>
      <guid>https://chinsun9.github.io/2020/11/05/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0%EC%9C%BC%EB%A1%9C-OBS-input-overlay-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/</guid>
      <pubDate>Thu, 05 Nov 2020 06:02:01 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/VVTzGOGayYA&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="video-container"><iframe src="https://www.youtube.com/embed/VVTzGOGayYA" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><img src="https://github.com/chinsun9/input-overlay-electron/raw/master/ReadmeRes/1.jpg" alt=" "></p><ul><li>오버워치 강의 영상을 보다가 영상속 키보드 마우스 뷰어? 를 가끔 보았었다.</li><li>일단 깔끔한 키보드 뷰어로 흥미가 생겼었는데</li><li>찾아보니까 OBS input overlay라는 OBS 전용 플러그인이었다.</li></ul><ul><li>일렉트론이라는 프레임워크를 사용하여</li><li>html, css, js로 데스크탑앱으로 만들어보았다.</li></ul><h2 id="신경쓴-것"><a href="#신경쓴-것" class="headerlink" title="신경쓴 것"></a>신경쓴 것</h2><h3 id="글로벌-키-훅"><a href="#글로벌-키-훅" class="headerlink" title="글로벌 키 훅?"></a>글로벌 키 훅?</h3><ul><li>내가 만든 앱 밖에서 키가 눌리고 떼지는걸 알아야한다.</li></ul><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ioHook = <span class="built_in">require</span>(<span class="string">&#x27;iohook&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ioHook.on(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  mainWindow.webContents.send(<span class="string">&#x27;keydown&#x27;</span>, event.rawcode);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>iohook 패키지를 사용해서 해결하게되었다.</li><li>그런데 iohook이 최신버전의 일렉트론에서 실행이 안되어서 일렉트론 8.x버전으로 낮추어 진행하게되었다.</li></ul><h3 id="overlay-window"><a href="#overlay-window" class="headerlink" title="overlay window"></a>overlay window</h3><ul><li>오버레이화면에 마우스 클릭이 되지 않도록 했다.</li><li>오버레이화면이 프레임을 가지지 않도록 했다</li><li>오버레이화면이 모니터 크기를 구하여 우측하단에 생기도록 하였다. (여러 해상도 대응)</li></ul><h2 id="일렉트론"><a href="#일렉트론" class="headerlink" title="일렉트론"></a>일렉트론</h2><ul><li>웹을 만든느 기술로 데스크탑앱을 만들 수 있게해주는 마법이다.</li><li>나는 요즘 js만 해왔기때문에 일렉트론에 대해 찾아보았다.</li><li>일렉트론으로 만들어진 대표적인 앱으로는 비쥬얼 스튜디오 코드가 있다.</li></ul><h2 id="일렉트론-시작"><a href="#일렉트론-시작" class="headerlink" title="일렉트론 시작"></a>일렉트론 시작</h2><ul><li><a href="https://youtu.be/TnXz_nnQZrw">Create Desktop App + Installer with HTML/CSS/JS - Electron Tutorial 2020</a> 유튜브를 보며 시작했다</li><li><code>create-electron-app</code> 를 통해 express-generator 처럼 빠르게 프로젝트를 시작할 수 있다.</li><li><code>electron-builder</code> 를 통해 배포용 setup 파일을 생성할 수 있다.</li><li>소스코드 ; <a href="https://github.com/chinsun9/electron-practice">https://github.com/chinsun9/electron-practice</a></li></ul><h2 id="일렉트론-단점"><a href="#일렉트론-단점" class="headerlink" title="일렉트론 단점?"></a>일렉트론 단점?</h2><ul><li>엄청나게 간단한 앱일지라도 nodejs + Chromium 조합으로 용량이 상당히크다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><ul><li><a href="https://github.com/chinsun9/input-overlay-electron">Input Overlay (Electron)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/clone-coding/">clone coding</category>
      
      <category domain="https://chinsun9.github.io/tags/%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/">클론코딩</category>
      
      <category domain="https://chinsun9.github.io/tags/electron/">electron</category>
      
      <category domain="https://chinsun9.github.io/tags/iohook/">iohook</category>
      
      <category domain="https://chinsun9.github.io/tags/input-overlay/">input overlay</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/05/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0%EC%9C%BC%EB%A1%9C-OBS-input-overlay-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>nodejs + socketio 로 만드는 채팅 앱, 카카오톡 클론코딩?</title>
      <link>https://chinsun9.github.io/2020/11/03/nodejs-socketio-%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EC%B1%84%ED%8C%85-%EC%95%B1/</link>
      <guid>https://chinsun9.github.io/2020/11/03/nodejs-socketio-%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EC%B1%84%ED%8C%85-%EC%95%B1/</guid>
      <pubDate>Tue, 03 Nov 2020 07:17:59 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/9_1ujY4Flb4&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="video-container"><iframe src="https://www.youtube.com/embed/9_1ujY4Flb4" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>Web Dev Simplified의 <a href="https://youtu.be/rxzOqP9YwmM">Build a Real Time Chat App With Node.js And Socket.io</a>을 보고 따라만들기</li><li>nodejs에서 html과 socket.io로 간단하게 챗앱을 만드는 것을 따라해보았다.</li><li>Web Dev Simplified 정말 심플하게 잘알려준다.. ㄷㄷ 따라 만들면서 행복했다.</li><li>따라만들고 카카오톡같은 css를 입히고,</li><li>디테일한 기능을 추가 해줬다.</li></ul><h2 id="추가한-기능"><a href="#추가한-기능" class="headerlink" title="추가한 기능"></a>추가한 기능</h2><ul><li>고유한 프로필 사진 생성(랜덤색 + 이니셜)</li><li>현재 채팅에 참가한 유저 목록 위젯</li><li>width값이 작아지면 유저 목록 위젯 숨김</li><li>width값이 작아지면 프로필 사진 영역 숨김</li><li>같은 사람이 연달아 올릴 때 프로필 사진 생략</li><li>같은 사람이 같은 시간에 연달아 올릴 때 가장 최근 메시지에만 시간표시</li><li>메시지는 plain text로 표시</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><ul><li><a href="https://github.com/chinsun9/chat-app-nodejs-and-socketio">chat-app-nodejs-and-socketio</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/clone-coding/">clone coding</category>
      
      <category domain="https://chinsun9.github.io/tags/%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/">클론코딩</category>
      
      <category domain="https://chinsun9.github.io/tags/socketio/">socketio</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/03/nodejs-socketio-%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EC%B1%84%ED%8C%85-%EC%95%B1/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
