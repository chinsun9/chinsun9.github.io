<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Sat, 17 Jul 2021 05:29:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>깃허브 템플릿 저장소 만들기</title>
      <link>https://chinsun9.github.io/2021/07/17/github-template-repo/</link>
      <guid>https://chinsun9.github.io/2021/07/17/github-template-repo/</guid>
      <pubDate>Sat, 17 Jul 2021 05:29:10 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;템플릿 레포를 만들어보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/preview</description>
        
      
      
      
      <content:encoded><![CDATA[<p>템플릿 레포를 만들어보자</p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/preview.png" alt=" "></p><ul><li>리액트 프로젝트를 진행할 때, CRA 같은 보일러플레이트로 프로젝트를 시작할 수 있다</li><li>근데 자신만의 린트 설정이나, 따로 설치하는 패키지들이 있다</li><li>이런 것들을 매번 새로운 프로젝트를 생성할 때마다 해준다면 귀찮을 것이다</li><li>이때 깃허브에서는 템플릿 저장소 기능을 활용할 수 있다</li></ul><h2 id="템플릿-저장소-하나-만들기"><a href="#템플릿-저장소-하나-만들기" class="headerlink" title="템플릿 저장소 하나 만들기"></a>템플릿 저장소 하나 만들기</h2><ul><li>템플릿으로 만들 저장소를 만들고,</li><li>원하는 초기 상태를 세팅한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/1.png" alt=" "></p><ul><li>Settings 탭에 들어가면 레포명 설정 아래 바로 템플릿 레포로 지정할 수 있는 체크박스가 있다</li><li>체크 박스를 체크하면 템플릿 레포 완성이다</li></ul><h2 id="템플릿을-사용해서-새-저장소-생성하기"><a href="#템플릿을-사용해서-새-저장소-생성하기" class="headerlink" title="템플릿을 사용해서 새 저장소 생성하기"></a>템플릿을 사용해서 새 저장소 생성하기</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-template-repo20210716/preview.png" alt=" "></p><ul><li>템플릿으로 설정한 저장소를 선택할 수 있다</li></ul><h2 id="다른-사람이-만들어둔-템플릿-사용하기"><a href="#다른-사람이-만들어둔-템플릿-사용하기" class="headerlink" title="다른 사람이 만들어둔 템플릿 사용하기"></a>다른 사람이 만들어둔 템플릿 사용하기</h2><ul><li>다른 사람이 만들어 둔 템플릿 레포가 있을 수 있는데,</li><li>포크해서 내 저장소로 가져오면 바로 사용이 가능하다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/creating-a-template-repository">https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/creating-a-template-repository</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/template/">template</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/17/github-template-repo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js event loop</title>
      <link>https://chinsun9.github.io/2021/07/16/js-event-loop/</link>
      <guid>https://chinsun9.github.io/2021/07/16/js-event-loop/</guid>
      <pubDate>Fri, 16 Jul 2021 08:07:58 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/8aGhZQkoFbQ&quot;&gt;https://youtu.be/8aGhZQkoFbQ&lt;/a&gt; 을 보고 정리&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;video-containe</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p><a href="https://youtu.be/8aGhZQkoFbQ">https://youtu.be/8aGhZQkoFbQ</a> 을 보고 정리</p></blockquote><div class="video-container"><iframe src="https://www.youtube.com/embed/8aGhZQkoFbQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>비동기 코드는 webapi에서 실행된다</li><li>실행이 완료되면 큐에 들어간다</li><li>큐에서 스택에 아무것도 없기를 기다렸다가</li><li>스택에 들어가고 실행된다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫 번째로 스택에 들어감</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두 번쨰로 스택에 들어가고 바로 webapi로 들어감</span></span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line">  <span class="comment">// webapi에서 큐로 던져짐. console.log(3)이 끝나고 스택이 텅텅 비워져서야 네 번째로 스택에 들어감</span></span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 세 번째로 스택에 들어감</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 3 2</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtu.be/8aGhZQkoFbQ">https://youtu.be/8aGhZQkoFbQ</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/js-event-loop/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js hoisting 호이스팅</title>
      <link>https://chinsun9.github.io/2021/07/16/js-hoisting/</link>
      <guid>https://chinsun9.github.io/2021/07/16/js-hoisting/</guid>
      <pubDate>Fri, 16 Jul 2021 07:41:56 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;javascript에서는 선언 전에 변수를 사용할 수 있는 경우가 있는데, 호이스팅 때문이다&lt;/em&gt;&lt;br&gt;&lt;em&gt;근데 호이스팅은 나쁜거다&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>javascript에서는 선언 전에 변수를 사용할 수 있는 경우가 있는데, 호이스팅 때문이다</em><br><em>근데 호이스팅은 나쁜거다</em></p><figure class="highlight js"><figcaption><span>var</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.trace(A); <span class="comment">// undefined</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">console</span>.trace(A); <span class="comment">// undefined</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">console</span>.trace(A); <span class="comment">// undefined</span></span><br><span class="line">      <span class="keyword">var</span> A = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.trace(A); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.trace(A); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="comment">// console.trace(A) // not work</span></span><br></pre></td></tr></table></figure><ul><li><code>var</code> 키워드를 사용하면 함수 최상위 스코프로 간다</li><li>변수 A는 선언도 안되었는데 잘 실행되는 이유이다</li></ul><figure class="highlight js"><figcaption><span>함수 호이스팅</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f();</span><br><span class="line"><span class="comment">// g(); // not work</span></span><br><span class="line"><span class="comment">// h(); // not work</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>특히 함수는 함수 선언식? 일 때 호이스팅 된다</li><li>나는 처음 js를 배울 때, <code>var</code>을 <code>const</code>, <code>let</code>으로 대체해라고 해서</li><li>일단은 var을 안 쓰면서 공부를 해왔었는데,</li><li>그래선지 호이스팅 관련해서 골머리 아픈 적이 없었던 것 같다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/var">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/var</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/js-hoisting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>defer vs DOMContentLoaded</title>
      <link>https://chinsun9.github.io/2021/07/16/defer-vs-DOMContentLoaded/</link>
      <guid>https://chinsun9.github.io/2021/07/16/defer-vs-DOMContentLoaded/</guid>
      <pubDate>Fri, 16 Jul 2021 06:58:57 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;defer&lt;/code&gt;이 먼저 실행된다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;defer-여러개-실행-순서&quot;&gt;&lt;a href=&quot;#defer-여러개-실행-순서&quot; class=&quot;headerlink&quot; title=&quot;defer 여러개 실행 순</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><code>defer</code>이 먼저 실행된다</li></ul><h2 id="defer-여러개-실행-순서"><a href="#defer-여러개-실행-순서" class="headerlink" title="defer 여러개 실행 순서"></a>defer 여러개 실행 순서</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./defer.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./defer2.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>여러개의 defer가 있으면 위에서 아래로 순서대로 실행된다</li><li>defer.js 실행 -&gt; defer2.js 실행</li></ul><h2 id="async와-DOMContentLoaded는-서로-무관하다"><a href="#async와-DOMContentLoaded는-서로-무관하다" class="headerlink" title="async와 DOMContentLoaded는 서로 무관하다"></a>async와 DOMContentLoaded는 서로 무관하다</h2><ul><li>DOMContentLoaded 먼저 실행될수도 async가 먼저 실행될수도 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.javascript.info/script-async-defer">https://ko.javascript.info/script-async-defer</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/async/">async</category>
      
      <category domain="https://chinsun9.github.io/tags/defer/">defer</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/defer-vs-DOMContentLoaded/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>이미지 레이지로딩</title>
      <link>https://chinsun9.github.io/2021/07/16/lazy-loading-images/</link>
      <guid>https://chinsun9.github.io/2021/07/16/lazy-loading-images/</guid>
      <pubDate>Fri, 16 Jul 2021 06:44:03 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/the-complete-guide-to-lazy-loading-images/&quot;&gt;https://css-tricks.com/the-complete-guide-to-laz</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p><a href="https://css-tricks.com/the-complete-guide-to-lazy-loading-images/">https://css-tricks.com/the-complete-guide-to-lazy-loading-images/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/lazy-loading-images20210716/preview.png" alt=" "></p><h2 id="레이지로딩"><a href="#레이지로딩" class="headerlink" title="레이지로딩"></a>레이지로딩</h2><ul><li>페이지에 이미지가 너무 많으면 로딩 속도가 느리다</li><li>일반적으로 페이지가 로드되고 페이지에 포함된 모든 이미지가 로드된다</li><li>레이지 로딩을 사용하면 로드를 뒤로 미룰 수 있고, 원하는 타이밍에 로드할 수 있다</li><li>이를 통해 페이지를 빠르게 로딩할 수 있다</li><li>콘텐츠를 제공하는 서버 비용을 아낄 수 있다</li></ul><h2 id="src-대신-data-src사용"><a href="#src-대신-data-src사용" class="headerlink" title="src 대신 data-src사용"></a>src 대신 data-src사용</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;img src=&quot;https://via.placeholder.com/468x200?text=1&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://via.placeholder.com/468x200?text=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>를 사용하면 이미지가 로드되기 때문에, <code>src</code>는 사용하지 않는다</li><li>대신 이미지 주소를 <code>data-src</code>에 저장한다</li><li><code>data-</code>를 사용하면 js에서 <code>dataset</code>을 통해 접근할 수 있다</li></ul><h2 id="Observer-API-사용"><a href="#Observer-API-사용" class="headerlink" title="Observer API 사용"></a>Observer API 사용</h2><figure class="highlight js"><figcaption><span>public/js/method2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lazyloadImages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;IntersectionObserver&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  lazyloadImages = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.lazy&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> imageObserver = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">entries, observer</span>) </span>&#123;</span><br><span class="line">      entries.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">          <span class="keyword">const</span> image = entry.target;</span><br><span class="line">          image.src = image.dataset.src;</span><br><span class="line">          image.classList.remove(<span class="string">&#x27;lazy&#x27;</span>);</span><br><span class="line">          imageObserver.unobserve(image);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      root: <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.container&#x27;</span>),</span><br><span class="line">      rootMargin: <span class="string">&#x27;0px 0px 500px 0px&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  lazyloadImages.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">image</span>) </span>&#123;</span><br><span class="line">    imageObserver.observe(image);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Observer API를 통해 이미지가 뷰포트에 들어오면</li><li>그제야 src를 초기화해서 이미지를 로드한다</li><li>로드된 이미지는 더 이상 옵저버가 관찰하지 않도록 <code>unobserve()</code> 해준다</li><li><code>IntersectionObserver</code> 생성자 두 번째 인자로 rootMargin을 설정해줄 수 있는데,</li><li>사용하지 않았을 때, 뷰포트에 들어오면 이미지 로드가 시작되어 불러오는 반면</li><li>rootMargin을 설정해주면, 설정한 값만큼 미리 옵저버가 반응해서 이미지를 로드할 수 있도록 한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://css-tricks.com/the-complete-guide-to-lazy-loading-images/">https://css-tricks.com/the-complete-guide-to-lazy-loading-images/</a></li><li><a href="https://github.com/chinsun9/lazy-loading-images-practice">https://github.com/chinsun9/lazy-loading-images-practice</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/lazy-loading-images/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gh-pages 사용하기</title>
      <link>https://chinsun9.github.io/2021/07/16/gh-pages/</link>
      <guid>https://chinsun9.github.io/2021/07/16/gh-pages/</guid>
      <pubDate>Fri, 16 Jul 2021 06:17:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/gh-pages20210716/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;열심히 만든 </description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/gh-pages20210716/preview.png" alt=" "></p><p><em>열심히 만든 웹을 Github Pages를 통해 자랑해보자</em><br><em>이때 사용할 수 있는 간편한 패키지가 있다</em></p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i -D gh-pages</span><br><span class="line">gh-pages -d dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">npx gh-pages -d dist</span><br></pre></td></tr></table></figure><h2 id="gh-pages"><a href="#gh-pages" class="headerlink" title="gh-pages"></a>gh-pages</h2><ul><li>Github Pages 기능을 통해 정적 웹을 호스팅 할 수 있다</li><li>gh-pages라는 패키지를 사용하면 간편하게 배포할 수 있다</li><li>gh-pages를 설치하고 <code>gh-pages -d &#123;빌드 디렉터리&#125;</code> 명령을 하면,</li><li>gh-pages라는 브랜치가 자동으로 생성되고 빌드 디렉터리의 내용이 깃헙 저장소에 올라간다</li><li>github pages 세팅도 자동으로 된다</li></ul><ul><li>package.json이 프로젝트 루트 디렉터리에 존재해야 한다</li><li>바닐라 웹 프로젝트를 진행한 경우에도 gh-pages를 사용하고 싶다면,</li><li><code>npm init -y</code> 명령으로 임시로 pacakage.json을 생성하고</li><li><code>npx</code>로 gh-pages를 실행하면 된다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/tschaub/gh-pages">https://github.com/tschaub/gh-pages</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/github-pages/">github pages</category>
      
      <category domain="https://chinsun9.github.io/tags/gh-pages/">gh-pages</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/16/gh-pages/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>깃허브에 있는 파이썬 프로젝트 돌려보기</title>
      <link>https://chinsun9.github.io/2021/07/15/try-running-python-project-in-github/</link>
      <guid>https://chinsun9.github.io/2021/07/15/try-running-python-project-in-github/</guid>
      <pubDate>Thu, 15 Jul 2021 04:12:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;파이썬 초보가 처음 깃허브에 있는 파이썬 프로젝트들을 돌려보면서 막혔던 부분과 알게 된 부분을 정리한 글&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;내-파이썬-지식&quot;&gt;&lt;a href=&quot;#내-파이썬-지식&quot; class=&quot;headerlink&quot; title=&quot;내</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>파이썬 초보가 처음 깃허브에 있는 파이썬 프로젝트들을 돌려보면서 막혔던 부분과 알게 된 부분을 정리한 글</em></p><h2 id="내-파이썬-지식"><a href="#내-파이썬-지식" class="headerlink" title="내 파이썬 지식"></a>내 파이썬 지식</h2><ul><li>인공지능 관련 프로젝트들이 대부분 파이썬으로 작성되어 있어서</li><li>관련 프로젝트를 돌려보기 위해서는 파이썬 지식을 필요로 했다</li><li>1 ~ 2년 전에 학교 수업으로 데이터분석처리라는 과목을 들으면서 파이썬을 사용해봤는데,</li><li>os는 윈도우, 도구는 주피터 노트북으로 테이블 데이터 전처리, 데이터 시각화와 분석을 해보았었다</li><li>사용해본 모듈로는 pandas, seaborn, matplotlib, numpy, statsmodels, scipy 등이 있다</li><li>각 모듈들에 대한 숙련도는 치트 시트를 확인한 정도이다</li></ul><h2 id="리눅스에서-돌리기"><a href="#리눅스에서-돌리기" class="headerlink" title="리눅스에서 돌리기"></a>리눅스에서 돌리기</h2><ul><li>윈도우에서 프로젝트를 돌려보려고 시도했지만,</li><li>종속성을 설치하는 과정에서 불편한 것이 많아서 리눅스에서 돌려보기로 한다</li><li>WSL로 윈도우에서 쉽게 리눅스 환경을 사용할 수 있다</li><li>나는 WSL2 Ubuntu-18.04 LTS 환경에서 진행했다</li><li>vscode remote - WSL을 통해 작업했다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/try-running-python-project-in-github20210715/preview.png" alt=" "></p><h3 id="종속성-설치"><a href="#종속성-설치" class="headerlink" title="종속성 설치"></a>종속성 설치</h3><ul><li><code>apt-get</code>을 통해 필요한 종속성을 설치하는 경우,</li><li>먼저 apt를 최신 상태로 업데이트해줘야 한다</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h4 id="sudo-pip-command-not-found"><a href="#sudo-pip-command-not-found" class="headerlink" title="sudo: pip: command not found"></a>sudo: pip: command not found</h4><ul><li>pip 커맨드가 없다고 하는데, 설치해줘야 한다</li><li>pip3를 설치하고, pip 커맨드는 pip3로 대체하여 사용한다</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install python3-pip</span><br></pre></td></tr></table></figure><h4 id="requirements-txt-설치-도중-오류"><a href="#requirements-txt-설치-도중-오류" class="headerlink" title="requirements.txt 설치 도중 오류"></a>requirements.txt 설치 도중 오류</h4><ul><li><code>pip3 install -r requirements.txt</code>로 종속성을 설치하는데,</li></ul><blockquote><p>ModuleNotFoundError: No module named ‘skbuild’</p></blockquote><ul><li><p>사용하는 파이썬 버전에 따라서 설치가 안 되는 경우가 있다</p></li><li><p>나는 파이썬 3.6 버전을 사용하고 있었는데, 구글링해보니 3.7 이상이 필요하다 했다</p></li><li><p>파이썬 버전에 따라 설치할 수 있는 모듈 버전이 제한된다는 것을 알았다</p></li><li><p><a href="https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild">https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild</a></p></li><li><p>파이썬을 3.7 이상으로 업데이트한다</p></li><li><p><a href="https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/">https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/</a></p></li><li><p>업데이트 방법은 위 링크에 친절하게 나와있다</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/try-running-python-project-in-github20210715/1.png" alt=" "></p><ul><li>이런 경우 말고도 <code>no matching distribution found for numpy==1.20.0</code>처럼 버전을 가져올 수 없다는 오류도 마찬가지로 파이썬 버전을 올려주니 해결됐다</li></ul><h2 id="프로젝트-파악하기"><a href="#프로젝트-파악하기" class="headerlink" title="프로젝트 파악하기"></a>프로젝트 파악하기</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 main.py</span><br></pre></td></tr></table></figure><ul><li>기능을 추가하려면 코드가 어떻게 동작하는지 알아야 한다</li><li>여기저기 print문을 작성해보면서 차근차근 알아가 보자</li><li>파이썬 문법을 자세하게 몰라도 잘할 수 있다</li></ul><ul><li><a href="https://chinsun9.github.io/2021/07/15/python/">https://chinsun9.github.io/2021/07/15/python/</a></li><li>앞으로 위 링크에 유용한 명령어를 정리해서 업데이트할 것이다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild">https://stackoverflow.com/questions/63448467/installing-opencv-fails-because-it-cannot-find-skbuild</a></li><li><a href="https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/">https://tech.serhatteker.com/post/2019-09/upgrade-python37-on-ubuntu18/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/wsl/">wsl</category>
      
      <category domain="https://chinsun9.github.io/tags/python/">python</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/try-running-python-project-in-github/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python 초보가 어제 오늘 배운 몇가지 명령어 모음</title>
      <link>https://chinsun9.github.io/2021/07/15/python/</link>
      <guid>https://chinsun9.github.io/2021/07/15/python/</guid>
      <pubDate>Thu, 15 Jul 2021 02:54:59 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;py&quot;&gt;&lt;a href=&quot;#py&quot; class=&quot;headerlink&quot; title=&quot;py&quot;&gt;&lt;/a&gt;py&lt;/h2&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="py"><a href="#py" class="headerlink" title="py"></a>py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 타입 알아내기</span></span><br><span class="line">print(<span class="built_in">type</span>(<span class="number">1</span>)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 앞뒤 공백 없애기 trim</span></span><br><span class="line">print(<span class="string">&#x27;      안녕      &#x27;</span>.strip()) <span class="comment"># 안녕</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열 길이 알아내기</span></span><br><span class="line">print(<span class="built_in">len</span>(<span class="string">&#x27;안녕&#x27;</span>)) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 숫자 문자열로 캐스팅</span></span><br><span class="line">print(<span class="built_in">type</span>(<span class="built_in">str</span>(<span class="number">1</span>))) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print 출력 파일로 저장하기</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout = <span class="built_in">open</span>(<span class="string">&#x27;/txt.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;안녕하세요요&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;반갑습니다&#x27;</span>)</span><br><span class="line">sys.stdout.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 텍스트 파일 저장하기</span></span><br><span class="line">text_file = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">text_file.write(<span class="string">&quot;%s&quot;</span> % <span class="string">&#x27;안녕하세요를레이&#x27;</span>)</span><br><span class="line">text_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 1 또는 0으로 초기화 된 배열 얻기</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.ones((<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">np.zeros((<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 인버트하기 ; 각 원소에 not 연산 수행</span></span><br><span class="line">np.invert(np.ones((<span class="number">10</span>,<span class="number">10</span>))) <span class="comment"># === np.zeros((10,10))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 배열 크기 확인</span></span><br><span class="line">np.ones((<span class="number">10</span>,<span class="number">10</span>)).shape <span class="comment"># (10, 10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 원소값 더하기</span></span><br><span class="line">np.ones((<span class="number">10</span>,<span class="number">10</span>)).<span class="built_in">sum</span>() <span class="comment"># 100.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 행렬 더하기</span></span><br><span class="line">(np.ones((<span class="number">10</span>,<span class="number">10</span>)) + np.ones((<span class="number">10</span>,<span class="number">10</span>))).<span class="built_in">sum</span>() <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 행렬 곱하기 ; 마스크로 쓸 수 있겠다</span></span><br><span class="line">(np.ones((<span class="number">10</span>,<span class="number">10</span>)) * np.zeros((<span class="number">10</span>,<span class="number">10</span>))).<span class="built_in">sum</span>() <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 유닉스 타임 얻기</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.time()</span><br><span class="line"><span class="built_in">str</span>(<span class="built_in">round</span>(time.time())) <span class="comment"># 파일명으로 쓸 때</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지 저장</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image <span class="comment"># PIL image</span></span><br><span class="line">image.save(<span class="string">&#x27;imageOutput.bmp&#x27;</span>,<span class="string">&#x27;BMP&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 객체 생략없이 print</span></span><br><span class="line"><span class="comment"># row 생략 없이 출력</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># col 생략 없이 출력</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 버전 확인</span></span><br><span class="line">python3 -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip 버전 확인</span></span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/python/">python</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/python/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python type</title>
      <link>https://chinsun9.github.io/2021/07/15/python-type/</link>
      <guid>https://chinsun9.github.io/2021/07/15/python-type/</guid>
      <pubDate>Thu, 15 Jul 2021 01:03:30 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line">print(<span class="built_in">type</span>(num)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>야매로 python 코드에 손을 대기 위해서 필요한 첫 번째 관문</li><li>무슨 타입인지 알아야 구글링할 수 있다</li></ul><h2 id="파이썬-기본-자료형"><a href="#파이썬-기본-자료형" class="headerlink" title="파이썬 기본 자료형"></a>파이썬 기본 자료형</h2><ul><li>bool</li><li>int / float</li><li>str</li><li>list</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/python/">python</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/python-type/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python 문자열 trim, 앞뒤 공백 제거</title>
      <link>https://chinsun9.github.io/2021/07/15/python-str-strip/</link>
      <guid>https://chinsun9.github.io/2021/07/15/python-str-strip/</guid>
      <pubDate>Thu, 15 Jul 2021 00:30:31 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = <span class="string">&#x27;      안녕      &#x27;</span>.strip()</span><br><span class="line">print(output) <span class="comment"># 안녕</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/python/">python</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/python-str-strip/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python 카테고리 생성</title>
      <link>https://chinsun9.github.io/2021/07/15/create-python-category/</link>
      <guid>https://chinsun9.github.io/2021/07/15/create-python-category/</guid>
      <pubDate>Thu, 15 Jul 2021 00:26:05 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;python으로 작성된 코드를 해석하기 위해 야매로 공부한 내용 올리기&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>python으로 작성된 코드를 해석하기 위해 야매로 공부한 내용 올리기</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/python/">python</category>
      
      
      <category domain="https://chinsun9.github.io/tags/category/">category</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/15/create-python-category/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>202106 검색 실적</title>
      <link>https://chinsun9.github.io/2021/07/12/202106-search-performance-report/</link>
      <guid>https://chinsun9.github.io/2021/07/12/202106-search-performance-report/</guid>
      <pubDate>Mon, 12 Jul 2021 07:08:12 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/202106-search-performance-report20210712/preview.png&quot; alt</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/202106-search-performance-report20210712/preview.png" alt=" "></p>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/blog-history/">blog history</category>
      
      
      <category domain="https://chinsun9.github.io/tags/blog-history/">blog history</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/12/202106-search-performance-report/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vscode extension insertdatestring</title>
      <link>https://chinsun9.github.io/2021/07/10/vscode-extension-insertdatestring/</link>
      <guid>https://chinsun9.github.io/2021/07/10/vscode-extension-insertdatestring/</guid>
      <pubDate>Sat, 10 Jul 2021 13:25:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-extension-insertdatestring20210710/preview.png&quot; al</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-extension-insertdatestring20210710/preview.png" alt=" "></p><ul><li>메모장에서 F5를 누르면 현재 시각이 찍힌다</li><li>vscode에서도 그런 기능이 있나 살펴보았다</li><li>없으면 확장도구!</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=jsynowiec.vscode-insertdatestring">https://marketplace.visualstudio.com/items?itemName=jsynowiec.vscode-insertdatestring</a></li><li><a href="https://github.com/jsynowiec/vscode-insertdatestring">https://github.com/jsynowiec/vscode-insertdatestring</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/extension/">extension</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/10/vscode-extension-insertdatestring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>update to wsl2</title>
      <link>https://chinsun9.github.io/2021/07/10/update-to-wsl2/</link>
      <guid>https://chinsun9.github.io/2021/07/10/update-to-wsl2/</guid>
      <pubDate>Sat, 10 Jul 2021 13:24:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;오후 9:53 2021-07-10 작성됨&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl22021</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>오후 9:53 2021-07-10 작성됨</em></p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/preview.png" alt=" "></p><ul><li><strong>Remote - WSL</strong> 확장도구가 너는 WSL1을 사용 중인데, WSL2로 업그레이드해라 알려줘서 업데이트했다</li></ul><h2 id="WSL2로-업데이트하기"><a href="#WSL2로-업데이트하기" class="headerlink" title="WSL2로 업데이트하기"></a>WSL2로 업데이트하기</h2><ul><li><code>Read More</code> 버튼을 누른다<ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions">https://docs.microsoft.com/en-us/windows/wsl/compare-versions</a></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/1.png" alt=" "></p><ul><li><p>둘 버전이 어떤 차이가 있는지 알려주는 페이지가 켜진다</p></li><li><p><code>Install WSL 1 and update to WSL 2</code> 버튼을 누른다</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps">https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps</a></li></ul></li><li><p>Windows Insiders는 간편하게 명령어 하나로 업그레이드 가능하다고 한다</p></li><li><p><code>wsl --install</code> 해보고 안되면 수동 설치를 하면 된다</p></li><li><p>수동 설치도 명령어 4번으로 간편하다</p></li><li><p>중간에 WSL2를 위한 요구사항을 체크해야 하는데,</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/2.png" alt=" "></p><ul><li>Ctrl + R <code>msinfo32</code> 또는 윈도우키로 시작 메뉴를 열고 <code>시스템 정보</code>를 입력해서 요구사항을 확인한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/4.png" alt=" "></p><figure class="highlight ps1"><figcaption><span>PowerShell (Administrator)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ul><li>위 명령어 입력 후 컴퓨터 재부팅</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/3.png" alt=" "></p><ul><li>step4에서 리눅스 커널 업데이트 패키지라는 것을 다운로드하고 실행한다<ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package</a></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/update-to-wsl220210710/5.png" alt=" "></p><figure class="highlight ps1"><figcaption><span>PowerShell (Administrator)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br><span class="line">wsl -<span class="literal">-list</span> <span class="comment"># 설치된 배포판 이름 확인</span></span><br><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> &#123;배포판 이름&#125; <span class="number">2</span> <span class="comment"># wsl --set-version Ubuntu-20.04 2</span></span><br></pre></td></tr></table></figure><ul><li>갑자기 cmd를 썼는데, 중간에 재부팅해서 일관적으로 캡처하지 못했다 ㅠ (뭘 쓰던 상관은 없다.)</li><li>기존에 WSL을 사용하고 있는 사람에 한해서 <code>wsl --set-version</code> 명령을 실행해줘야 한다</li><li>가이드 문서를 다 따라 했는데, vscode를 켜고 Remote WSL를 사용하면 여전히 WSL1을 쓰고 있다고 말한다</li><li>알고 보니까 기존 배포판은 그대로 버전 1이 적용되고 있다</li><li>기존 배포판에 WSL2를 적용하려면 <code>wsl --set-version &#123;배포판 이름&#125; &#123;타깃 버전&#125;</code>까지 실행해줘야 한다</li><li>5분 정도 걸렸나? 시간이 조금 걸리는 작업이다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions">https://docs.microsoft.com/en-us/windows/wsl/compare-versions</a></li><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps">https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/windows/">windows</category>
      
      
      <category domain="https://chinsun9.github.io/tags/windows/">windows</category>
      
      <category domain="https://chinsun9.github.io/tags/wsl/">wsl</category>
      
      <category domain="https://chinsun9.github.io/tags/wsl2/">wsl2</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/10/update-to-wsl2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js spread syntax `...` 연산자</title>
      <link>https://chinsun9.github.io/2021/07/07/js-spread-syntax/</link>
      <guid>https://chinsun9.github.io/2021/07/07/js-spread-syntax/</guid>
      <pubDate>Wed, 07 Jul 2021 06:29:24 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(...arr); <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log([...arr]); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr === [...arr]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>리액트를 처음 공부할 때 자주 접하면서 알게 된 연산자다</li><li>상태를 변경하려면, 완전히 새로운 객체를 대입시켜줘야 한다</li><li>(참조하는 주소를 이전이랑 다르게 해야 state 갱신이 일어났다고 판단하고 화면을 갱신한다)</li><li>자바스크립트에는 괴랄한 문법이 많구나 느꼈었다</li></ul><ul><li>한 꺼풀 벗겨내는 연산자라고 생각하면 쉽다</li></ul><h2 id="배열에서-사용"><a href="#배열에서-사용" class="headerlink" title="배열에서 사용"></a>배열에서 사용</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 인자 넘기기</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> pram = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(...pram); <span class="comment">// === add(1, 2); // 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 파라미터</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> pram = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result1 = add2(...pram);</span><br><span class="line">  <span class="built_in">console</span>.log(result1);</span><br><span class="line">  <span class="keyword">const</span> result2 = add2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 이어 붙이기</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = <span class="number">111</span>;</span><br><span class="line">  <span class="keyword">const</span> subfix = <span class="number">999</span>;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">const</span> newArr = [prefix, ...arr, subfix];</span><br><span class="line">  <span class="built_in">console</span>.log(newArr); <span class="comment">// [111, 1, 2, 3, 999]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="객체에서-사용"><a href="#객체에서-사용" class="headerlink" title="객체에서 사용"></a>객체에서 사용</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 복사 및 값 일부 수정</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    b: <span class="number">10</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(obj === newObj); <span class="comment">// false</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj); <span class="comment">// b===2</span></span><br><span class="line">  <span class="built_in">console</span>.log(newObj); <span class="comment">// b===10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/spread-syntax/">spread syntax</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/07/js-spread-syntax/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js array.sort()가 원본을 바꾼다</title>
      <link>https://chinsun9.github.io/2021/07/07/js-array-api-mutate-origin/</link>
      <guid>https://chinsun9.github.io/2021/07/07/js-array-api-mutate-origin/</guid>
      <pubDate>Wed, 07 Jul 2021 05:53:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/js-array-api-mutate-origin20210707/preview.png&quot; alt=&quot; &quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/js-array-api-mutate-origin20210707/preview.png" alt=" "></p><ul><li>가끔 원본이 바뀌어서 예상치 못한 동작을 할 때가 있다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본인 arr 이 정렬됨</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">const</span> sortedArr = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line">  <span class="built_in">console</span>.log(arr === sortedArr); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 원본인 arr를 살리면서 정렬된 새 배열 얻기</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">const</span> sortedArr = [...arr].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line">  <span class="built_in">console</span>.log(arr === sortedArr); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>[...arr]</code> 이런 식으로 배열을 복사할 수 있다</li></ul><h2 id="하나-더-배열-복사할-때-주의할-점"><a href="#하나-더-배열-복사할-때-주의할-점" class="headerlink" title="하나 더, 배열 복사할 때 주의할 점"></a>하나 더, 배열 복사할 때 주의할 점</h2><ul><li>그런데 <code>number[]</code> 타입이 아니라 <code>&#123;...&#125;[]</code>같은 객체 배열이라면</li><li><code>[...arr]</code> 연산으로 새로운 배열이 만들어지기는 하지만</li><li>원소 하나하나는 여전히 <code>call by reference</code> 이기 때문에</li><li>완전한 복사본(깊은 복사)을 얻은 게 아니라는 점을 유의해야 한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/array/">array</category>
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/07/js-array-api-mutate-origin/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>perssonal access token으로 비공개 레포 git clone 하기</title>
      <link>https://chinsun9.github.io/2021/07/06/git-clone-using-pat/</link>
      <guid>https://chinsun9.github.io/2021/07/06/git-clone-using-pat/</guid>
      <pubDate>Tue, 06 Jul 2021 04:09:10 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@github.com&#x2F;chinsun9&#x2F;my-private-repo.git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;chinsun9&#x2F;my-private-repo.git</span><br><span class="line">Cloning into &#39;my-private-repo&#39;...</span><br><span class="line">Username for &#39;https:&#x2F;&#x2F;github.com&#39;: chinsun9</span><br><span class="line">Password for &#39;https:&#x2F;&#x2F;chinsun9@github.com&#39;: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><ul><li>이런 식으로 패드워드 대용으로 사용해도 되지만,</li><li>github.com 앞에 <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@</code></li><li><code>토큰@</code>를 붙여서 cli에서 입력하는 과정을 스킵할 수 있다</li><li>이때 사용하는 토큰은 <strong>repo: Full control of private repositories</strong> 권한이 필요하다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/pat/">pat</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/06/git-clone-using-pat/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>regexp lastIndex</title>
      <link>https://chinsun9.github.io/2021/07/06/regexp-lastIndex/</link>
      <guid>https://chinsun9.github.io/2021/07/06/regexp-lastIndex/</guid>
      <pubDate>Tue, 06 Jul 2021 00:57:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;정규식 test는 true인데 exec가 동작하지 않는다?!&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;work!&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</description>
        
      
      
      
      <content:encoded><![CDATA[<p><em>정규식 test는 true인데 exec가 동작하지 않는다?!</em></p><figure class="highlight js"><figcaption><span>work!</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (regexp.test(line)) &#123;</span><br><span class="line">  <span class="comment">// 내부 포인터 재설정</span></span><br><span class="line">  regexp.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> match = regexp.exec(line);</span><br><span class="line">  <span class="keyword">while</span> (match) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>regexp.lastIndex = 0</code></li></ul><h2 id="잘못된-코드"><a href="#잘못된-코드" class="headerlink" title="잘못된 코드"></a>잘못된 코드</h2><figure class="highlight js"><figcaption><span>not work!</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (regexp.test(line)) &#123;          <span class="comment">// 여기서 lastIndex 갱신</span></span><br><span class="line">  <span class="keyword">let</span> match = regexp.exec(line);  <span class="comment">// 갱신된 lastIndex부터 검색을 시작해서 첫번째 결과가 스킵됨.</span></span><br><span class="line">  <span class="keyword">while</span> (match) &#123;                 <span class="comment">// 라인에 일치하는 패턴이 한개라면 반복문한 한번도 돌지 않음</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>처음에 작성한 코드다</li><li>파일의 라인 한 줄 한 줄 읽으면서</li><li>정규식 패턴과 일치하는 라인이라면</li><li>결괏값을 받도록 만들었는데, 이상하게도 제대로 동작하지 않았다</li><li>알고 보니까 <code>test()</code> 메서드도 lastIndex를 갱신했었다…</li><li>사실 저 <code>if (regexp.test(line)) &#123;</code>은 필요 없는 코드 같다</li><li><code>test</code>와 <code>exec</code>를 같이 쓸 때 주의가 필요하다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/regexp/">regexp</category>
      
      <category domain="https://chinsun9.github.io/tags/lastIndex/">lastIndex</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/06/regexp-lastIndex/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vscode 나만의 스니펫 만들어서 사용하기</title>
      <link>https://chinsun9.github.io/2021/07/02/vscode-custom-snippet/</link>
      <guid>https://chinsun9.github.io/2021/07/02/vscode-custom-snippet/</guid>
      <pubDate>Fri, 02 Jul 2021 00:44:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;상황&quot;&gt;&lt;a href=&quot;#상황&quot; class=&quot;headerlink&quot; title=&quot;상황&quot;&gt;&lt;/a&gt;상황&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;여러 테스트 파일을 만드는데, 기본적으로 작성해야 하는 틀이 있다&lt;/li&gt;
&lt;li&gt;기본 틀이 되는 코드를 &lt;em&gt;s</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>여러 테스트 파일을 만드는데, 기본적으로 작성해야 하는 틀이 있다</li><li>기본 틀이 되는 코드를 <em>scaffold.test.ts</em> 파일로 만들어서 내용을 복사해서 사용하거나, 복사본을 만들면서 새로운 테스트 파일들을 생성했다</li><li>반복하다 보니까 이마저도 불편했다</li><li>그러다가 커스텀 스니펫을 만들기로 한다</li></ul><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-custom-snippet20210701/preview.gif" alt=" "></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  test(<span class="string">&#x27;should &#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(solution(prams)).toEqual(er);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>내 목표는 <code>te</code>를 입력하면 내가 등록한 스니펫을 통해 위 코드를 완성시킬 것이다</li></ul><h2 id="스니펫-만들기"><a href="#스니펫-만들기" class="headerlink" title="스니펫 만들기"></a>스니펫 만들기</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-custom-snippet20210701/1.png" alt=" "></p><ul><li>상단바에서</li><li><code>File &gt; Preferences &gt; User Snippets</code> 을 선택한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-custom-snippet20210701/2.png" alt=" "></p><ul><li>어떤 언어에서 만들 것인지 선택한다</li><li>나는 타입스크립트에서 사용할 것이다</li><li>그러면 <code>%userprofile%\AppData\Roaming\Code\User\snippets\typescript.json</code>이라는 파일이 생성되고</li><li>설명과 예제가 나와있다</li></ul><figure class="highlight json"><figcaption><span>%userprofile%\AppData\Roaming\Code\User\snippets\typescript.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line">  <span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">  <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span></span><br><span class="line">  <span class="comment">// same ids are connected.</span></span><br><span class="line">  <span class="comment">// Example:</span></span><br><span class="line">  <span class="attr">&quot;cotejs test&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;te&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;/**&quot;</span>,</span><br><span class="line">      <span class="string">&quot;* $&#123;1:problem&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;*/&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;describe(&#x27;$&#123;2:id&#125;&#x27;, () =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;$0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  test(&#x27;should &#x27;, () =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    expect(solution($&#123;3:prams&#125;)).toEqual(er);&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &#125;);&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;);&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;base&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prefix ; 나는 <code>te</code>로 설정했다. 스니펫이 어떤 문자열에 추천될지 설정하는 곳이다</li><li>body ; 내가 완성시키고 싶은 스니펫을 등록한다. 줄 바꿈을 기준으로 배열로 쪼개 줘야 한다</li><li>description ; 스니펫에 대한 설명을 적는다</li></ul><ul><li>특히 자동 완성할 때 tab를 누르면 커서가 원하는 순서로 이동하게 할 수 있다</li><li><code>$1, $2, $3,..., $n, $0</code>을 통해서 가능하다</li><li>각 커서에 기본값을 추가하고 싶으면 <code>$&#123;1:one&#125;</code> 이런 식으로 가능하다</li><li><code>$0</code>은 마지막 커서 위치를 설정할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/snippet/">snippet</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/02/vscode-custom-snippet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>모바일 크롬 개발자 도구 사용, 포트포워딩해서 localhost 환경 만들기</title>
      <link>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/</link>
      <guid>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/</guid>
      <pubDate>Thu, 01 Jul 2021 04:26:39 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;모바일에서 동작하는 &lt;code&gt;devicemotion&lt;/code&gt; 이벤트 등 디버깅하기 위해 개발자 도구를 봐야 했다&lt;/li&gt;
&lt;li&gt;모바일에서 개발자 도구를 어떻게 켜는지 등 찾아보다가&lt;/li&gt;
&lt;li&gt;핸드폰을 데탑에 연결하고&lt;/li</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>모바일에서 동작하는 <code>devicemotion</code> 이벤트 등 디버깅하기 위해 개발자 도구를 봐야 했다</li><li>모바일에서 개발자 도구를 어떻게 켜는지 등 찾아보다가</li><li>핸드폰을 데탑에 연결하고</li><li>데탑의 크롬에서 console의 출력 결과를 확인할 수 있다</li><li>그리고 모바일 화면을 미러링 해준다</li></ul><h2 id="하는-법"><a href="#하는-법" class="headerlink" title="하는 법"></a>하는 법</h2><blockquote><p>“[Android 개발] 크롬 개발자 도구 모바일 디버깅/Mobile Debugging/ PC에서 모바일 디버깅 / 모바일 개발환경 구축”<br><a href="https://backstreet-programmer.tistory.com/30">https://backstreet-programmer.tistory.com/30</a></p></blockquote><ul><li>위 블로그를 참고해서 핸드폰과 데탑을 연결했다</li></ul><h2 id="포트포워딩-하기"><a href="#포트포워딩-하기" class="headerlink" title="포트포워딩 하기"></a>포트포워딩 하기</h2><ul><li><code>devicemotion</code>, <code>geolocation</code> 등 보안 컨텍스트가 필요한 Web API의 경우 localhost로 만들어줘야 한다</li><li>내부IP:PORT 해서 접속은 할 수 있지만,</li><li><code>devicemotion</code>가 정상 동작하려면 localhost여야 한다</li></ul><h3 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h3><ul><li><p>데탑에서 웹 개발 진행 중</p></li><li><p>로컬에서 5500 포트로 웹서버가 열려있음</p></li><li><p>모바일에서 위 웹서버에 접속하려면 <code>내부아이피:포트</code>를 입력해야함</p></li><li><p>모바일에서 <code>localhost:5500</code>을 입력해서 접속할 수 있도록 해보자</p></li><li><p>chrome://inspect/#devices 에 접속한다</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/1.png" alt=" "></p><ul><li>내 핸드폰이 잘 연결되었는지 확인한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/preview.png" alt=" "></p><ul><li>포트 포워딩 버튼을 누른다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/2.png" alt=" "></p><ul><li>5500 포트와 localhost:5500을 매칭시켰다</li><li>이제 핸드폰 크롬에서 localhost:5500으로 접속하면 웹서버에 접속할 수 있다!</li><li>물론 Web API도 모두 잘 동작한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://backstreet-programmer.tistory.com/30">https://backstreet-programmer.tistory.com/30</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/chrome/">chrome</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
