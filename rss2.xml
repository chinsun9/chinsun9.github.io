<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Thu, 01 Jul 2021 04:26:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>모바일 크롬 개발자 도구 사용, 포트포워딩해서 localhost 환경 만들기</title>
      <link>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/</link>
      <guid>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/</guid>
      <pubDate>Thu, 01 Jul 2021 04:26:39 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;모바일에서 동작하는 &lt;code&gt;devicemotion&lt;/code&gt; 이벤트 등 디버깅하기 위해 개발자 도구를 봐야 했다&lt;/li&gt;
&lt;li&gt;모바일에서 개발자 도구를 어떻게 켜는지 등 찾아보다가&lt;/li&gt;
&lt;li&gt;핸드폰을 데탑에 연결하고&lt;/li</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>모바일에서 동작하는 <code>devicemotion</code> 이벤트 등 디버깅하기 위해 개발자 도구를 봐야 했다</li><li>모바일에서 개발자 도구를 어떻게 켜는지 등 찾아보다가</li><li>핸드폰을 데탑에 연결하고</li><li>데탑의 크롬에서 console의 출력 결과를 확인할 수 있다</li><li>그리고 모바일 화면을 미러링 해준다</li></ul><h2 id="하는-법"><a href="#하는-법" class="headerlink" title="하는 법"></a>하는 법</h2><blockquote><p>“[Android 개발] 크롬 개발자 도구 모바일 디버깅/Mobile Debugging/ PC에서 모바일 디버깅 / 모바일 개발환경 구축”<br><a href="https://backstreet-programmer.tistory.com/30">https://backstreet-programmer.tistory.com/30</a></p></blockquote><ul><li>위 블로그를 참고해서 핸드폰과 데탑을 연결했다</li></ul><h2 id="포트포워딩-하기"><a href="#포트포워딩-하기" class="headerlink" title="포트포워딩 하기"></a>포트포워딩 하기</h2><ul><li><code>devicemotion</code>, <code>geolocation</code> 등 보안 컨텍스트가 필요한 Web API의 경우 localhost로 만들어줘야 한다</li><li>내부IP:PORT 해서 접속은 할 수 있지만,</li><li><code>devicemotion</code>가 정상 동작하려면 localhost여야 한다</li></ul><h3 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h3><ul><li><p>데탑에서 웹 개발 진행 중</p></li><li><p>로컬에서 5500 포트로 웹서버가 열려있음</p></li><li><p>모바일에서 위 웹서버에 접속하려면 <code>내부아이피:포트</code>를 입력해야함</p></li><li><p>모바일에서 <code>localhost:5500</code>을 입력해서 접속할 수 있도록 해보자</p></li><li><p>chrome://inspect/#devices 에 접속한다</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/1.png" alt=" "></p><ul><li>내 핸드폰이 잘 연결되었는지 확인한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/preview.png" alt=" "></p><ul><li>포트 포워딩 버튼을 누른다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/remote-debug-android-chrome20210701/2.png" alt=" "></p><ul><li>5500 포트와 localhost:5500을 매칭시켰다</li><li>이제 핸드폰 크롬에서 localhost:5500으로 접속하면 웹서버에 접속할 수 있다!</li><li>물론 Web API도 모두 잘 동작한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://backstreet-programmer.tistory.com/30">https://backstreet-programmer.tistory.com/30</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/chrome/">chrome</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/remote-debug-android-chrome/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js empty array</title>
      <link>https://chinsun9.github.io/2021/07/01/js-empty-array/</link>
      <guid>https://chinsun9.github.io/2021/07/01/js-empty-array/</guid>
      <pubDate>Thu, 01 Jul 2021 01:58:05 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;new Array(n)&lt;/code&gt;으로 초기화한 배열에 array api가 동작하지 않았다&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>new Array(n)</code>으로 초기화한 배열에 array api가 동작하지 않았다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.length, arr); <span class="comment">// 5 [ &lt;5 empty items&gt; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">1</span>), arr); <span class="comment">// 6 [ &lt;5 empty items&gt;, 1 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">2</span>), arr); <span class="comment">// 7 [ &lt;5 empty items&gt;, 1, 2 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.map(<span class="function">(<span class="params">v</span>) =&gt;</span> v * <span class="number">2</span>)); <span class="comment">// [ &lt;5 empty items&gt;, 2, 4 ]</span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`-----------`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = arr[index];</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">  arr[index] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`-----------`</span>);</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>위에 map이나 forEach를 보면 array api가 초기화하지 않은 인덱스에 대해 동작하지 않는 것을 확인할 수 있다</li><li>직접 for문으로 찍어보면 undefined이라 나온다</li><li>그러면서 undefined으로 전부 초기화해줬다</li><li>직접 초기화해주니까 array api forEach가 동작하는 것을 확인할 수 있다</li></ul><ul><li>array api를 동작하지 않는 것을 경험했다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>).fill(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>이런 식으로 특정 값으로 직접 초기화를 해줘야 스킵되지 않고 정상적으로 api를 사용할 수 있다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/array/">array</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/js-empty-array/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>공식문서가 어려운 이유</title>
      <link>https://chinsun9.github.io/2021/07/01/why-official-docs-difficult/</link>
      <guid>https://chinsun9.github.io/2021/07/01/why-official-docs-difficult/</guid>
      <pubDate>Thu, 01 Jul 2021 01:27:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;처음 웹 개발을 공부하기 시작할 때 mdn보다 w3school을 가게되는지…&lt;/p&gt;
&lt;h2 id=&quot;공식문서가-어려운-이유&quot;&gt;&lt;a href=&quot;#공식문서가-어려운-이유&quot; class=&quot;headerlink&quot; title=&quot;공식문서가 어려운 이유&quot;&gt;&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>처음 웹 개발을 공부하기 시작할 때 mdn보다 w3school을 가게되는지…</p><h2 id="공식문서가-어려운-이유"><a href="#공식문서가-어려운-이유" class="headerlink" title="공식문서가 어려운 이유"></a>공식문서가 어려운 이유</h2><ul><li>모르는 걸 모르게 설명한다</li><li>엄청 디테일해서 TMI다</li><li>엄청 생략된 예제</li><li>영어</li></ul><h3 id="모르는-걸-모르게-설명한다"><a href="#모르는-걸-모르게-설명한다" class="headerlink" title="모르는 걸 모르게 설명한다"></a>모르는 걸 모르게 설명한다</h3><ul><li>공식 문서를 작성하시는 분들은 당연히도 그 기술에 대해 빠삭하신 분들이다</li><li>해당 기술을 잘 알고 있는 사람들한테는 최고의 문서일 것이다</li><li>하지만 초보가 문서를 읽었을 때 개발 경험 부족으로 센스가 부족해서</li><li>아주 간단한 것일지라도 막힐 때가 있다</li></ul><ul><li>사전에서 어떤 단어를 찾았는데 그 단어가 또다시 모르는 단어로 설명되어 있는 느낌</li></ul><h3 id="엄청-디테일해서-TMI다"><a href="#엄청-디테일해서-TMI다" class="headerlink" title="엄청 디테일해서 TMI다"></a>엄청 디테일해서 TMI다</h3><ul><li>나는 빨리 헬로월드를 출력하고 싶은데, 뭔가 글이 길고 복잡해 보인다</li><li>install 할 때 여러 옵션들, cli 명령어의 여러 옵션들 등</li><li>실행만 하는데도 너무 어려울 것 같은 인상을 준다</li><li>나는 보통 스크롤이 길고 빼곡한 줄글이 있으면 탈주가 하고 싶다</li></ul><h3 id="엄청-생략된-예제"><a href="#엄청-생략된-예제" class="headerlink" title="엄청 생략된 예제"></a>엄청 생략된 예제</h3><ul><li>프로젝트 세팅 및 디렉터리 구조 등 생략된 것이 많이 있다</li><li>처음 접할 때 내가 튜토리얼을 잘 따라가고 있는지 의문이 들 때가 많이 있다</li><li>명령어를 실행해야 하는 디렉터리가 어디인지</li><li>어디에 파일을 생성해야 하는지</li><li>프로젝트 세팅을 어떻게 해야 하는지</li><li>알고 보면 너무 당연한 베이스지만 초보라면 그것조차 너무 어렵다 ㅠㅠ</li></ul><h3 id="영어"><a href="#영어" class="headerlink" title="영어"></a>영어</h3><ul><li>안 그래도 무슨 말인지 잘 모르는데 영어 ㅠㅠ</li><li>기술 용어들이 많아서 번역을 써도 이상한 경우가 많이 있다</li></ul><h2 id="생각"><a href="#생각" class="headerlink" title="생각"></a>생각</h2><ul><li>공식문서를 보는 게 좋다 주변에서 들었지만</li><li>나는 공식문서 보다가 <code>ctrl w</code>를 누른 적이 너무 많다</li><li>요즘에야 많이 익숙해지고 센스도 늘어서 공식문서를 예전보다는 많이 읽는 편이다</li></ul><ul><li>하지만 요즘도 처음 사용하는 라이브러리라든가</li><li>빠른 프로젝트 적용 또는 시작을 위해 youtube를 참고한다</li><li>영상만큼 직관적인 게 없다고 생각한다</li><li>정적인 문서로는 초보자를 이해시키는 게 어렵다</li><li>영상은 변경사항을 업데이트하기가 어려운 단점이 있다</li><li>영상 제작은 아무래도 노력이 많이 필요하다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <category domain="https://chinsun9.github.io/tags/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/why-official-docs-difficult/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>unary plus</title>
      <link>https://chinsun9.github.io/2021/07/01/unary-plus/</link>
      <guid>https://chinsun9.github.io/2021/07/01/unary-plus/</guid>
      <pubDate>Thu, 01 Jul 2021 00:41:20 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;무엇이든 숫자로 캐스팅하는 연산자&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>무엇이든 숫자로 캐스팅하는 연산자</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+-<span class="number">1</span>);</span><br><span class="line"><span class="comment">// expected output: -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;12&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: 12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0xff</span>);</span><br><span class="line"><span class="comment">// expected output: 255</span></span><br></pre></td></tr></table></figure><ul><li>전에 <a href="https://chinsun9.github.io/2020/12/21/string-to-number-%EC%9A%94%EC%83%81%ED%95%9C-%EB%AC%B8%EB%B2%95-js/">string to number 요상한 문법 (js)</a>이라고 올린 적 있다</li><li>그때 사용 했던 <code>+</code>연산자를 <strong>unary plus</strong>라고 부르는 것을 알게 되었다</li></ul><ul><li>이 연산의 반환 값은 숫자다</li><li>보통 10진 숫자로 된 문자열을 숫자로 바꿀 때 사용하지만</li><li>true, false, null, 16진수 등 다양한 인풋을 지원한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/unary-plus/">unary plus</category>
      
      
      <comments>https://chinsun9.github.io/2021/07/01/unary-plus/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>eslint prefer-destructuring</title>
      <link>https://chinsun9.github.io/2021/06/25/eslint-prefer-destructuring/</link>
      <guid>https://chinsun9.github.io/2021/06/25/eslint-prefer-destructuring/</guid>
      <pubDate>Fri, 25 Jun 2021 12:34:31 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;Use array destructuring.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Use array destructuring.</p></blockquote><ul><li>???</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> arrarr = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">11</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">21</span>],</span><br><span class="line">];</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">time = arrarr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line">[[time]] = arrarr; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">time = arrarr[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line">[, [, time]] = arrarr; <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><ul><li>홀리…</li><li>배열과 오브젝트는 구조 분해 할당할 수 있다</li><li>오브젝트의 경우 자주 사용하지만, 배열의 경우는 별로 사용해본적이 없다</li><li>리액트를 쓰면서 useState에서 state와 setState함수를 받을 때 주로 사용했지,</li><li>이렇게 이미 선언해서 쓰던 변수에 값을 덮어쓸 때 사용해서 약간 충격이다</li><li>배열에 변수가 아닌 정적인 상수 인덱스를 통해서 꺼내는 경우 구조 분해 할당을 사용하라고 추천해줘서 알게 되었다</li></ul><ul><li>근데 상수 인덱스가 너무 큰 경우에는 오히려 가독성이 떨어질 것 같다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://eslint.org/docs/rules/prefer-destructuring">https://eslint.org/docs/rules/prefer-destructuring</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/eslint/">eslint</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/25/eslint-prefer-destructuring/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>script태그 defer, async</title>
      <link>https://chinsun9.github.io/2021/06/24/script-defer-async/</link>
      <guid>https://chinsun9.github.io/2021/06/24/script-defer-async/</guid>
      <pubDate>Thu, 24 Jun 2021 13:56:38 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;처음 웹 프로그래밍을 배울 때 스크립트 태그는 body 최하단에 위치시키라고 배웠다&lt;/li&gt;
&lt;li&gt;스크립트 로드 타이밍을 뒤로 미뤄서 돔을 조작하는 스크립트가 잘 동작한다&lt;/li&gt;
&lt;li&gt;근데 요즘에는 스크립트 태그를 head 안에 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>처음 웹 프로그래밍을 배울 때 스크립트 태그는 body 최하단에 위치시키라고 배웠다</li><li>스크립트 로드 타이밍을 뒤로 미뤄서 돔을 조작하는 스크립트가 잘 동작한다</li><li>근데 요즘에는 스크립트 태그를 head 안에 선언하는 경우가 많다</li><li>defer를 사용하면 위에서 말한 효과를 볼 수 있다</li><li>근데 defer 말고도 async라는 속성을 줄 수 있다</li><li>둘이 차이는 뭘까?</li></ul><h2 id="default-blocking-further-parsing"><a href="#default-blocking-further-parsing" class="headerlink" title="default (blocking further parsing)"></a>default (blocking further parsing)</h2><ul><li>스크립트 태그를 만나면 파싱을 멈추고 스크립트를 로드하고 실행한다</li><li>이 때 HTML 파싱을 멈춘다</li><li>스크립트가 로드 다 끝나면 이어서 남은 파싱을 진행한다</li><li>스크립트가 헤비 하면 화면이 안 그려지고 사용자가 떠날 확률도 높아지겠다</li></ul><h2 id="defer-async-공통"><a href="#defer-async-공통" class="headerlink" title="defer, async 공통"></a>defer, async 공통</h2><ul><li>스크립트는 스크립트대로 로드하고 HTML 파싱은 계속된다</li><li>비동기적이다</li></ul><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><ul><li>스크립트 로드가 완료되었다고 바로 실행되지 않는다</li><li>HTML 파싱이 모두 끝나면 실행된다</li><li>주로 돔을 조작하는 스크립트를 로드할 때 사용하면 된다</li></ul><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><ul><li>스크립트가 로드되고 바로 실행된다</li><li>돔을 조작하는 스크립트가 없을 때 사용하는 것이 좋다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement">https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/async/">async</category>
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      <category domain="https://chinsun9.github.io/tags/defer/">defer</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/24/script-defer-async/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>promise async await 예제</title>
      <link>https://chinsun9.github.io/2021/06/23/promise-async-await-example/</link>
      <guid>https://chinsun9.github.io/2021/06/23/promise-async-await-example/</guid>
      <pubDate>Wed, 23 Jun 2021 09:16:38 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise는 선언과 동시에 실행된다</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunction</span>(<span class="params">delay, memo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`in`</span>, memo);</span><br><span class="line">  <span class="keyword">const</span> thisIsPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`done`</span>, memo);</span><br><span class="line">      resolve(delay);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> thisIsPromise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchData = asyncFunction.bind(<span class="literal">null</span>, <span class="number">1000</span>, <span class="string">&#x27;fetchData&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fetchHeavyData = asyncFunction.bind(<span class="literal">null</span>, <span class="number">3000</span>, <span class="string">&#x27;fetchHeavyData&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`start main`</span>);</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">`main`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">await</span> fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> fetchData();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = add(a, b);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`main result`</span>, result);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">`main`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`start main2`</span>);</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">`main2`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = fetchData();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promiseResultArr = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([a, b]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = add(...promiseResultArr);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`main2 result`</span>, result);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">`main2`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"><span class="comment">// main2();</span></span><br></pre></td></tr></table></figure><ul><li>친구한테 비동기에 대해 설명하면서 만든 예제 코드다</li></ul><h2 id="설명하기"><a href="#설명하기" class="headerlink" title="설명하기"></a>설명하기</h2><ul><li>비동기 초보 친구한테 설명하면서 어떤 부분을 설명했나?</li></ul><h3 id="await은-async함수-내부에서-사용-가능"><a href="#await은-async함수-내부에서-사용-가능" class="headerlink" title="await은 async함수 내부에서 사용 가능"></a>await은 async함수 내부에서 사용 가능</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 work</span></span><br><span class="line">fetchData().then(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 not work</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> fetchData();</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><ul><li>위는 동작하고, 아래는 동작하지 않는다고 해서</li><li>await 키워드 사용은 async 함수 내부에서만 가능하다고 말했다</li></ul><h3 id="express에서-비동기"><a href="#express에서-비동기" class="headerlink" title="express에서 비동기"></a>express에서 비동기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 work...</span></span><br><span class="line">router.get(<span class="string">&#x27;/async&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 work</span></span><br><span class="line">router.get(<span class="string">&#x27;/async&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  res.json(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>1로 했을 때 어떻게 동작하냐 해서</li><li>2로 하는 게 좋을 것 같다고 했다</li><li>실제로 테스트 결과 1, 2 모두 잘 동작했다</li><li>1의 경우 안될 줄 알았는데 express가 똑똑한 건가…</li></ul><h3 id="then-콜백-함수에서-return"><a href="#then-콜백-함수에서-return" class="headerlink" title="then 콜백 함수에서 return"></a>then 콜백 함수에서 return</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 not work</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 work</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1의 경우에서 함수 f의 반환 값이 없다 하여,</li><li>then 콜백 함수에서 return이 함수 f의 리턴을 의미하지 않는다고 말했다</li></ul><h3 id="체이닝"><a href="#체이닝" class="headerlink" title="체이닝"></a>체이닝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">await</span> asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>) <span class="comment">// 1000</span></span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line">  &#125;) <span class="comment">// 2000</span></span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result + <span class="number">200</span>;</span><br><span class="line">  &#125;); <span class="comment">// 2200</span></span><br></pre></td></tr></table></figure><ul><li>then을 끝까지 수행한 후에 결괏값을 반환한다고 알려줬다</li><li>a에는 2200이 들어간다</li></ul><h3 id="생략-표현"><a href="#생략-표현" class="headerlink" title="생략 표현"></a>생략 표현</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(add1);</span><br><span class="line">asyncFunction(<span class="number">1000</span>, <span class="string">&#x27;memo&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> add1(res));</span><br></pre></td></tr></table></figure><ul><li>인자를 그대로 다른 함수에 넘겨주는 경우 생략이 가능하다</li></ul><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">await</span> fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> fetchData();</span><br><span class="line">  <span class="keyword">const</span> result = add(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> a = fetchHeavyData();</span><br><span class="line">  <span class="keyword">const</span> b = fetchData();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promiseResultArr = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([a, b]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = add(...promiseResultArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>promise는 선언과 동시에 실행된다</li><li>1의 경우 서로 무관한 비동기 흐름을 순차적으로 처리한다</li><li>2의 경우 <code>Promise.all</code>을 사용해 병렬 처리하여 1보다 효율적이다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/23/promise-async-await-example/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>blog fix 카피 버튼이 안나오는 문제</title>
      <link>https://chinsun9.github.io/2021/06/22/blog-fix-copy-button-not-dispalyed/</link>
      <guid>https://chinsun9.github.io/2021/06/22/blog-fix-copy-button-not-dispalyed/</guid>
      <pubDate>Tue, 22 Jun 2021 08:35:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-fix-copy-button-not-dispalyed20210622/preview.gif&quot; a</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/blog-fix-copy-button-not-dispalyed20210622/preview.gif" alt=" "></p><ul><li>블로그에 코드 스니펫 오른쪽 위에 카피 버튼이 나올 때도 있고 안 나올 때도 있었다</li><li>무한 새로고침하면 종종 모습을 비춘다… (이스터에그도 아닌 것이..)</li></ul><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><ul><li>hexo-theme-icarus v4.0.1</li></ul><h2 id="해결하기"><a href="#해결하기" class="headerlink" title="해결하기"></a>해결하기</h2><ul><li>일단 어디서 이 버튼을 생성하는지 알아내야 한다</li><li>버튼이 정상적으로 출력되었을 때 해당 버튼의 클래스명을 확인했다</li><li>그리고 <code>main.js</code>라는 곳에서 동적으로 버튼을 생성하고 있음을 알아냈다</li></ul><figure class="highlight js"><figcaption><span>themes\icarus\source\js\main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(clipboard, <span class="keyword">typeof</span> ClipboardJS);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> ClipboardJS !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; clipboard) &#123;</span><br><span class="line">  $(<span class="string">&#x27;figure.highlight&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="string">&#x27;code-&#x27;</span> + <span class="built_in">Date</span>.now() + ((<span class="built_in">Math</span>.random() * <span class="number">1000</span>) | <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> button =</span><br><span class="line">      <span class="string">&#x27;&lt;a href=&quot;javascript:;&quot; class=&quot;copy&quot; title=&quot;Copy&quot; data-clipboard-target=&quot;#&#x27;</span> +</span><br><span class="line">      id +</span><br><span class="line">      <span class="string">&#x27; .code&quot;&gt;&lt;i class=&quot;fas fa-copy&quot;&gt;&lt;/i&gt;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    $(<span class="built_in">this</span>).attr(<span class="string">&#x27;id&#x27;</span>, id);</span><br><span class="line">    $(<span class="built_in">this</span>).find(<span class="string">&#x27;figcaption div.level-right&#x27;</span>).append(button);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> ClipboardJS(<span class="string">&#x27;.highlight .copy&#x27;</span>); <span class="comment">// eslint-disable-line no-new</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>조건문에 <code>ClipboardJS</code>가 있으면 버튼을 생성하는데</li><li>main.js에는 ClipboardJS에 대해 따로 선언이 없었고, 외부 라이브러리라는 것을 알았다</li><li>이 ClipboardJS가 어디서 오는지 확인해야 했다</li></ul><figure class="highlight js"><figcaption><span>themes\icarus\layout\common\scripts.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  clipboard &amp;&amp; (</span><br><span class="line">    &lt;script</span><br><span class="line">      src=&#123;cdn(<span class="string">&#x27;clipboard&#x27;</span>, <span class="string">&#x27;2.0.4&#x27;</span>, <span class="string">&#x27;dist/clipboard.min.js&#x27;</span>)&#125;</span><br><span class="line">      <span class="comment">// async</span></span><br><span class="line">      defer</span><br><span class="line">    &gt;&lt;/script&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>layout\common\scripts.jsx</code>에서 가져오는 코드를 확인했는데</li><li><code>async</code>으로 가져오고 있었다</li><li>문제는 clipboardJS가 로드되기 전에 main.js가 먼저 실행되는 문제였다</li><li><code>defer</code>로 수정하니까 잘 동작했다!</li></ul><h2 id="최신-버전-확인"><a href="#최신-버전-확인" class="headerlink" title="최신 버전 확인"></a>최신 버전 확인</h2><ul><li>hexo-theme-icarus v4.2.0</li><li>최신 버전을 확인하니까 defer로 변경되어있었다… (이슈 검색했을 때는 못 찼았다…)</li><li>처음부터 최신 버전을 참고하면 좋았겠다</li></ul><ul><li>9개월 정도 나름대로 커스텀하면서 사용해왔는데,</li><li>나중에 시간 나면 커스텀한 내용을 유지하면서 최신 버전에 맞게 업데이트해줘야겠다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><h3 id="async-defer"><a href="#async-defer" class="headerlink" title="async, defer"></a>async, defer</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement">https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/blog-history/">blog history</category>
      
      
      <category domain="https://chinsun9.github.io/tags/blog-history/">blog history</category>
      
      <category domain="https://chinsun9.github.io/tags/async/">async</category>
      
      <category domain="https://chinsun9.github.io/tags/defer/">defer</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/blog-fix-copy-button-not-dispalyed/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github topic</title>
      <link>https://chinsun9.github.io/2021/06/22/github-topic/</link>
      <guid>https://chinsun9.github.io/2021/06/22/github-topic/</guid>
      <pubDate>Tue, 22 Jun 2021 04:59:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-topic20210622/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;저</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-topic20210622/preview.png" alt=" "></p><ul><li>저장소와 관련된 태그? 같은 것을 나열할 수 있는 기능이다</li><li>사용하면 무엇을 하는 저장소인지 나타내기 좋을 것 같다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/classifying-your-repository-with-topics">https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/classifying-your-repository-with-topics</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/github-topic/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>jest &#39;describe&#39; is not defined</title>
      <link>https://chinsun9.github.io/2021/06/22/eslint-with-jest/</link>
      <guid>https://chinsun9.github.io/2021/06/22/eslint-with-jest/</guid>
      <pubDate>Tue, 22 Jun 2021 04:31:50 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight json&quot;&gt;&lt;figcaption&gt;&lt;span&gt;.eslintrc.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight json"><figcaption><span>.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>env에 추가해준다</li></ul><ul><li>⚠️ 추가 해주고 <code>F1 &gt; eslint.restart</code> 명령을 실행해 eslint를 재부팅한다</li></ul><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>jest를 eslint와 처음 사용해본다</li></ul><blockquote><p>eslint(no-undef)</p></blockquote><blockquote><p>‘describe’ is not defined.<br>‘test’ is not defined.<br>‘expect’ is not defined.</p></blockquote><ul><li>위 에러가 나왔다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/44611190/using-jest-in-my-react-app-describe-is-not-defined">https://stackoverflow.com/questions/44611190/using-jest-in-my-react-app-describe-is-not-defined</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/eslint/">eslint</category>
      
      <category domain="https://chinsun9.github.io/tags/jest/">jest</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/eslint-with-jest/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>tldr</title>
      <link>https://chinsun9.github.io/2021/06/22/tldr/</link>
      <guid>https://chinsun9.github.io/2021/06/22/tldr/</guid>
      <pubDate>Tue, 22 Jun 2021 04:22:23 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;too long; didn’t read&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;tl;dr&lt;/li&gt;
&lt;li&gt;요약&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;참고&quot;&gt;&lt;a href=&quot;#참고&quot; class=&quot;headerlink&quot; t</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>too long; didn’t read</p></blockquote><ul><li>tl;dr</li><li>요약</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ko.wikipedia.org/wiki/TL;DR">https://ko.wikipedia.org/wiki/TL;DR</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/tldr/">tldr</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/tldr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>커밋 메시지 작성을 도와줄 확장도구 vscode-conventional-commits</title>
      <link>https://chinsun9.github.io/2021/06/22/vscode-conventional-commits/</link>
      <guid>https://chinsun9.github.io/2021/06/22/vscode-conventional-commits/</guid>
      <pubDate>Tue, 22 Jun 2021 02:15:28 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-conventional-commits20210622/preview.png&quot; alt=&quot; &quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/vscode-conventional-commits20210622/preview.png" alt=" "></p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>기존에 <strong>Visual Studio Code Commitizen Support</strong> 확장 도구를 사용하고 있었다</li><li>그런데 커밋 body에 적는 내용이 어째선지 반영되지 않았다…</li><li>관련해서 구글링을 해봤는데 도움되는 내용을 찾지 못했다</li><li>그러다가 다른 확장도구를 발견했다</li></ul><h2 id="Conventional-Commits"><a href="#Conventional-Commits" class="headerlink" title="Conventional Commits"></a>Conventional Commits</h2><ul><li><strong>Conventional Commits</strong>이라는 확장도구이다</li><li>사용법은 Commitizen과 동일하다</li><li>이 확장도구를 사용하면 body(description)가 정상적으로 등록된다!</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits">https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits</a></li><li><a href="https://github.com/vivaxy/vscode-conventional-commits">https://github.com/vivaxy/vscode-conventional-commits</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/vscode/">vscode</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/vscode/">vscode</category>
      
      <category domain="https://chinsun9.github.io/tags/extension/">extension</category>
      
      <category domain="https://chinsun9.github.io/tags/commit/">commit</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/22/vscode-conventional-commits/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>디바운스와 스로틀</title>
      <link>https://chinsun9.github.io/2021/06/21/debounce-throttle/</link>
      <guid>https://chinsun9.github.io/2021/06/21/debounce-throttle/</guid>
      <pubDate>Mon, 21 Jun 2021 05:28:15 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;스크롤 이벤트가 발생하면 &lt;code&gt;1&lt;/code&gt;을 출력하는 함수를 실행시킨다고 하자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;기본&quot;&gt;&lt;a href=&quot;#기본&quot; class=&quot;headerlink&quot; title=&quot;기본&quot;&gt;&lt;/a&gt;기본&lt;/h2&gt;&lt;ul&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>스크롤 이벤트가 발생하면 <code>1</code>을 출력하는 함수를 실행시킨다고 하자</li></ul><h2 id="기본"><a href="#기본" class="headerlink" title="기본"></a>기본</h2><ul><li>아날로그 신호처럼 콘솔창에 1이 찍힌다</li></ul><h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><ul><li>설정한 주기를 간격으로 1이 찍힌다</li></ul><ul><li>쓰로틀은 연속된 이벤트를 설정한 시간 간격</li><li>예) 스크롤중 300ms 마다 함수 실행</li><li>예) 네이버 검색창 자동완성</li></ul><h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><ul><li>스크롤 이벤트 도중에는 아무것도 일어나지 않는다</li><li>이벤트가 끝나고 설정한 1이 찍힌다</li></ul><ul><li>디바운스는 연속된 이벤트가 멈추고, 한번 실행한다</li><li>마지막 이벤트로부터 설정한 시간만큼 이벤트가 발생하지 않으면 실행한다</li><li>예) 스크롤이 멈추고 300ms 뒤에 함수 실행</li><li>예) 버튼을 연속적으로 여러 번 눌러도 한 번만 실행되는… (광클 방지)</li></ul><h2 id="쓰는-이유"><a href="#쓰는-이유" class="headerlink" title="쓰는 이유"></a>쓰는 이유</h2><ul><li>디바운스와 쓰로틀은 부하를 줄이기 위해 사용한다</li><li>매 이벤트마다 비싼 API를 호출하는 것을 방지할 수 있다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      <category domain="https://chinsun9.github.io/tags/debounce/">debounce</category>
      
      <category domain="https://chinsun9.github.io/tags/throttle/">throttle</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/21/debounce-throttle/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>geolocation 등 HTTP에서 사용할 수 없는 Web API 목록</title>
      <link>https://chinsun9.github.io/2021/06/21/features-restricted-to-secure-contexts/</link>
      <guid>https://chinsun9.github.io/2021/06/21/features-restricted-to-secure-contexts/</guid>
      <pubDate>Mon, 21 Jun 2021 02:31:45 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;geolocation 등 특정 Web API들은 &lt;code&gt;localhost&lt;/code&gt; 또는 &lt;code&gt;HTTPS&lt;/code&gt; 환경에서만 동작한다&lt;/li&gt;
&lt;li&gt;그래서 로컬에서 테스트했을 땐 동작하는 것들이 http로 배포했을 때 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>geolocation 등 특정 Web API들은 <code>localhost</code> 또는 <code>HTTPS</code> 환경에서만 동작한다</li><li>그래서 로컬에서 테스트했을 땐 동작하는 것들이 http로 배포했을 때 동작하지 않을 수 있다</li><li><strong>secure context</strong>가 필요한 API 목록은 아래 링크에서 확인할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts/features_restricted_to_secure_contexts">https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts/features_restricted_to_secure_contexts</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/geolocation/">geolocation</category>
      
      <category domain="https://chinsun9.github.io/tags/secure-contexts/">secure contexts</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/21/features-restricted-to-secure-contexts/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github archived repository</title>
      <link>https://chinsun9.github.io/2021/06/21/github-archived-repository/</link>
      <guid>https://chinsun9.github.io/2021/06/21/github-archived-repository/</guid>
      <pubDate>Mon, 21 Jun 2021 00:35:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-archived-repository20210621/preview.png&quot; alt=&quot; &quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-archived-repository20210621/preview.png" alt=" "></p><ul><li>레포명 옆에 <strong>Archived</strong> 가 붙어있는 레포를 발견했다</li><li>뭔가 하고 찾아보았다</li></ul><h2 id="Archiving-Repositories"><a href="#Archiving-Repositories" class="headerlink" title="Archiving Repositories"></a>Archiving Repositories</h2><ul><li>읽기 전용 레포이다</li><li>더 이상 유지 보수되지 않는다는 것을 나타낸다</li><li>이 저장소에서는 새로운 활동이 생성될 수 없다</li><li>이슈나 풀리퀘스트를 생성할 수 없다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/archiving-a-github-repository/archiving-repositories">https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/archiving-a-github-repository/archiving-repositories</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/archiving-repositories/">archiving-repositories</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/21/github-archived-repository/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SSR, CSR</title>
      <link>https://chinsun9.github.io/2021/06/18/ssr-csr/</link>
      <guid>https://chinsun9.github.io/2021/06/18/ssr-csr/</guid>
      <pubDate>Fri, 18 Jun 2021 08:42:11 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;SSR, server side rendering&lt;br&gt;CSR, client side rendering&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;CSR&quot;&gt;&lt;a href=&quot;#CSR&quot; class=&quot;headerlink&quot; ti</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>SSR, server side rendering<br>CSR, client side rendering</p></blockquote><h2 id="CSR"><a href="#CSR" class="headerlink" title="CSR"></a>CSR</h2><ul><li>CSR은 리액트로 만든 SPA 웹앱이라고 생각하면 된다</li><li>index.html이 텅텅 비어있고,</li><li>버튼을 누르면 자바스크립트로 동적으로 화면을 다시 그려서 페이지가 넘어가는 것처럼 보인다</li><li>처음 리액트를 배울 때 안드로이드 앱 만드는 느낌이 강하게 들었다</li><li>최초에 index.html를 서버에서 받고, 화면이 넘어가는 경우 필요한 데이터만 서버에 요청한다<br>(JSON 등 데이터만 주고받음으로 가볍다고 볼 수 있다)</li><li>데이터를 가져오면 이미 가지고 있는 틀에다가 바인딩하여 보여준다</li></ul><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><ul><li>전통?적인 방법이다</li><li>버튼, 링크를 누르면 서버로 다른 html 파일을 요청한다</li><li>CSR과 반대로 html 내용이 꽉꽉 차있다</li><li>SEO에 유리하다</li><li>크롤러(bot)는 그냥 html의 내용을 읽으면 된다</li><li>CSR은 페이지 접속 만으로는 콘텐츠가 생성이 되어있지 않기 때문에 크롤러(bot)가 난감할 것이다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      <category domain="https://chinsun9.github.io/tags/SSR/">SSR</category>
      
      <category domain="https://chinsun9.github.io/tags/CSR/">CSR</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/18/ssr-csr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>setTimeout typescript</title>
      <link>https://chinsun9.github.io/2021/06/18/setTimeout-typescript/</link>
      <guid>https://chinsun9.github.io/2021/06/18/setTimeout-typescript/</guid>
      <pubDate>Fri, 18 Jun 2021 08:30:02 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span> </span>&#123;</span><br><span class="line">  sto: ReturnType&lt;<span class="keyword">typeof</span> <span class="built_in">setTimeout</span>&gt;;</span><br></pre></td></tr></table></figure><ul><li>typescript로 웹 스크립트를 짜고 있다</li><li><code>clearTimeout</code>을 사용하기 위해 멤버 변수 sto를 넣었다</li><li>근데 setTimeout의 타입이 뭘까?</li><li>에디터에서 <code>NodeJS.Timeout</code>라고 알려주긴 하는데..</li><li>내 런타임을 노드가 아니라 브라우저다</li><li><code>ReturnType&lt;fn&gt;</code>을 사용하면 브라우저든 SSR이든 걱정 없다고 한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/45802988/typescript-use-correct-version-of-settimeout-node-vs-window/56239226#56239226">https://stackoverflow.com/questions/45802988/typescript-use-correct-version-of-settimeout-node-vs-window/56239226#56239226</a></li><li><a href="https://stackoverflow.com/questions/51040703/what-return-type-should-be-used-for-settimeout-in-typescript">https://stackoverflow.com/questions/51040703/what-return-type-should-be-used-for-settimeout-in-typescript</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typescript/">typescript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/setTimeout/">setTimeout</category>
      
      <category domain="https://chinsun9.github.io/tags/ReturnType/">ReturnType</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/18/setTimeout-typescript/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github 잔디, contributions calendar</title>
      <link>https://chinsun9.github.io/2021/06/18/github-contributions-calendar/</link>
      <guid>https://chinsun9.github.io/2021/06/18/github-contributions-calendar/</guid>
      <pubDate>Fri, 18 Jun 2021 01:56:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-contributions-calendar20210618/preview.png&quot; alt=&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-contributions-calendar20210618/preview.png" alt=" "></p><ul><li>평소 잔디라 불러서 원래 이름이 뭔지 알아보았다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-contribution-graphs-on-your-profile/viewing-contributions-on-your-profile#contributions-calendar">https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-contribution-graphs-on-your-profile/viewing-contributions-on-your-profile#contributions-calendar</a></li></ul><h2 id="ㅋㅋ"><a href="#ㅋㅋ" class="headerlink" title="ㅋㅋ"></a>ㅋㅋ</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-contributions-calendar20210618/1.png" alt=" "></p><ul><li>내 커밋 기록 식칼 모양이다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/contributions-calendar/">contributions calendar</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/18/github-contributions-calendar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>transition ease ease-in ease-out ease-in-out 무슨 차이일까</title>
      <link>https://chinsun9.github.io/2021/06/18/transition-timing-function/</link>
      <guid>https://chinsun9.github.io/2021/06/18/transition-timing-function/</guid>
      <pubDate>Fri, 18 Jun 2021 00:35:21 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight css&quot;&gt;&lt;figcaption&gt;&lt;span&gt;style.css&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자연스러운 변화를 주기 위해서 사용하곤 했다</li><li>ease는 여러 가지가 있는데 어떤 차이일까?</li></ul><h2 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h2><ul><li><em>영상 편집할 때 영상의 앞뒤에 투명도를 가지고 페이드인 페이드아웃하는 그래프가 있는데 그거랑 똑같다</em></li><li>ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier, steps 가 있다</li></ul><h3 id="함수들"><a href="#함수들" class="headerlink" title="함수들"></a>함수들</h3><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/transition-timing-function20210618/preview.png" alt=" "></p><ul><li>캡처 ; <a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></li></ul><ul><li>ease ; 천천-빠름-천천</li><li>linear ; 등속</li><li>ease-in ; 천천-보통</li><li>ease-out ; 보통-천천</li><li>ease-in-out ; 천천-보통-천천</li><li>cubic-bezier ; 커스텀</li></ul><ul><li>steps ; 뚝뚝 끊어 보여준다</li></ul><h3 id="cubic-bezier"><a href="#cubic-bezier" class="headerlink" title="cubic-bezier"></a>cubic-bezier</h3><p>베지에 곡선이라고 한다<br>ease, in, in-out은 미리 정의어 있는 곡선이다<br>각각을 cubic-bezier로 표현하면 다음과 같다</p><ul><li>ease === cubic-bezier(0.25, 0.1, 0.25, 1.0)</li><li>linear === cubic-bezier(0.0, 0.0, 1.0, 1.0)</li><li>ease-in === cubic-bezier(0.42, 0, 1.0, 1.0)</li><li>ease-out === cubic-bezier(0, 0, 0.58, 1.0)</li><li>ease-in-out === cubic-bezier(0.42, 0, 0.58, 1.0)</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function">https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function">https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function</a></li></ul><h3 id="유용한-도구"><a href="#유용한-도구" class="headerlink" title="유용한 도구"></a>유용한 도구</h3><ul><li>cubic-bezier 커스텀</li><li><a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></li></ul><h3 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h3><ul><li>베지에 곡선, 베지어 곡선</li><li><a href="https://ko.wikipedia.org/wiki/%EB%B2%A0%EC%A7%80%EC%97%90_%EA%B3%A1%EC%84%A0">https://ko.wikipedia.org/wiki/베지에_곡선</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/css/">css</category>
      
      <category domain="https://chinsun9.github.io/tags/transition-timing-function/">transition timing function</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/18/transition-timing-function/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>비공개 npm package 만들어보기</title>
      <link>https://chinsun9.github.io/2021/06/17/my-first-github-package/</link>
      <guid>https://chinsun9.github.io/2021/06/17/my-first-github-package/</guid>
      <pubDate>Thu, 17 Jun 2021 07:03:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/my-first-github-package20210617/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/my-first-github-package20210617/preview.png" alt=" "></p><ul><li>깃허브 레지스트리를 통해 (비공개) 패키지를 만들어보자</li><li>PAT을 통해 <strong>퍼블릭하지 않게</strong> 패키지를 배포해 볼 수 있다</li><li>물론, 공개 패키지도 가능하다</li><li>패키지 생성은 동일하고, 패키지를 받을 때만 차이가 있다</li></ul><ul><li>PAT : personal access token</li></ul><h2 id="PAT-발급"><a href="#PAT-발급" class="headerlink" title="PAT 발급"></a>PAT 발급</h2><ul><li>github에 로그인하고,</li><li><a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a></li><li><code>write:packages</code> 권한의 personal access token을 생성한다</li></ul><h2 id="저장소-패키지-만들기"><a href="#저장소-패키지-만들기" class="headerlink" title="저장소, 패키지 만들기"></a>저장소, 패키지 만들기</h2><ul><li><p>package.json에 필수적으로 채워야 하는 항목들이 있어서,</p></li><li><p>브라우저로 github에 접속해서 저장소 하나를 만들어 로컬로 클론하고<br><code>npm init -y</code> 하는 것을 추천한다</p></li><li><p>타입스크립트로 만든다</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chinsun9/hello-package.git</span><br><span class="line"></span><br><span class="line">tsc --init</span><br></pre></td></tr></table></figure><h2 id="디렉터리-구조"><a href="#디렉터리-구조" class="headerlink" title="디렉터리 구조"></a>디렉터리 구조</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── index.d.ts</span><br><span class="line">│   └── index.js</span><br><span class="line">├── src</span><br><span class="line">│   └── index.ts</span><br><span class="line">├── .gitignore</span><br><span class="line">├── .npmignore</span><br><span class="line">├── .npmrc</span><br><span class="line">├── package.json</span><br><span class="line">├── README.md</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><ul><li><p>디렉터리 구조는 마음대로</p></li><li><p>나는 위처럼 구성했다</p></li><li><p>src 밑에 ts 코드를 작성하고,</p></li><li><p><code>tsc</code> 명령으로 <strong>dist</strong> 아래 트랜스파일 된 js를 배포하는 방식이다</p></li></ul><h2 id="src-작성"><a href="#src-작성" class="headerlink" title="src 작성"></a>src 작성</h2><figure class="highlight ts"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassA</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassB</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassC</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>원하는 기능을 구현하고 외부에서 사용 가능하도록 <code>export</code>키워드를 붙여준다</li></ul><h2 id="tsconfig-json-설정"><a href="#tsconfig-json-설정" class="headerlink" title="tsconfig.json 설정"></a>tsconfig.json 설정</h2><ul><li>타입스크립트로 코드를 작성하고,</li><li><code>tsc</code>로 트랜스파일한다. 결과로 js파일이 생성된다</li><li>패키지를 인스톨한 사람들은 js파일을 사용하게 된다</li></ul><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span> <span class="comment">/* Generates corresponding &#x27;.d.ts&#x27; file. */</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;src&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>tsc --init</code> 기본값으로 생성된 상태에서 위 옵션만 수정해주었다</li><li><strong>declaration</strong> ; <code>d.ts</code>파일을 생성해서 자동완성에 도움을 준다</li><li><strong>outDir</strong> ; tsc 명령의 결과로 생성되는 js 위치</li><li><strong>rootDir</strong>, <strong>include</strong> ; root ts 파일 위치</li></ul><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><ul><li>커밋에서 무시할 디렉터리, 파일을 나열한다</li></ul><h2 id="npmignore"><a href="#npmignore" class="headerlink" title=".npmignore"></a>.npmignore</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">test</span><br><span class="line">tsconfig.json</span><br></pre></td></tr></table></figure><ul><li>패키지를 publish 할 때 무시할 디렉터리, 파일을 나열한다</li></ul><h2 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h2><ul><li>워크스페이스에 위치해도 되고,</li><li>어느 워크스페이스든 상관없이 전역적으로 적용하려면 ~/.npmrc에 넣어주면 된다</li></ul><figure class="highlight properties"><figcaption><span>.npmrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//npm.pkg.github.com/</span>:<span class="string">_authToken=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure><ul><li>처음에 발급받은 토큰을 <code>xxxx...</code> 부분에 넣어준다</li><li>자신의 토큰은 아무래도 전역으로 적용하는 게 좋아 보인다</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;@chinsun9/hello-package&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;dist/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;dist/index.d.ts&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span>: <span class="string">&quot;https://github.com/chinsun9/hello-package.git&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;chinsun9 &lt;chin_sung@naver.com&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publishConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;registry&quot;</span>: <span class="string">&quot;https://npm.pkg.github.com/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>몇 가지 수정사항이 있다</li><li>name, main, types, publishConfig를 적절하게 수정한다</li><li>name ; <code>@chinsun9/</code>처럼 골뱅이 자기 이름을 넣어준다</li><li>main ; 트랜스파일 결과로 메인 파일을 넣어준다</li><li>types ; 자동완성을 위해서 생성된 d.ts파일을 넣어준다</li><li>publishConfig ; registry를 깃허브로 하겠다는 설정이다</li></ul><h2 id="패키지-배포"><a href="#패키지-배포" class="headerlink" title="패키지 배포"></a>패키지 배포</h2><ul><li><code>npm publish</code></li><li>저장소에 들어가서 패키지가 잘 배포되었는지 확인하다</li></ul><h2 id="배포한-패키지-인스톨해보기"><a href="#배포한-패키지-인스톨해보기" class="headerlink" title="배포한 패키지 인스톨해보기"></a>배포한 패키지 인스톨해보기</h2><ul><li>github registry에 등록된 패키지는 퍼블릭 일지라도 PAT이 필요하다</li><li>퍼블릭일 때 패키지 주인이 생성한 토큰이 아니다</li><li>각자 자기 자신의 토큰으로 가능하다..!</li></ul><ul><li>비공개 패키지라면 패키지 주인이 생성한 토큰이 있어야 한다.</li><li>패키지 주인은 <code>read:packages</code> 권한이 있는 토큰을 알려주면 다른 사람, 컴퓨터에서 패키지를 인스톨할 수 있다</li></ul><ul><li>임시 디렉터리를 하나 만들고 <code>npm init -y</code>한다</li><li><strong>.npmrc</strong>를 생성하고 내용을 추가한다</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;npm.pkg.github.com&#x2F;:_authToken&#x3D;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">@chinsun9:registry&#x3D;https:&#x2F;&#x2F;npm.pkg.github.com&#x2F;</span><br></pre></td></tr></table></figure><ul><li><p>워크스페이스의 .npmrc 또는 유저 홈 디렉터리의 .npmrc 에 위 내용을 추가한다</p></li><li><p><code>@chinsun9:registry=https://npm.pkg.github.com/</code></p></li><li><p><strong>@chinsun9</strong>으로 시작하는 패키지는 <a href="https://npm.pkg.github.com/">https://npm.pkg.github.com/</a> 에서 가져오라고 알려주자</p></li></ul><h2 id="헷갈린-점"><a href="#헷갈린-점" class="headerlink" title="헷갈린 점"></a>헷갈린 점</h2><ul><li>퍼블릭한 패키지도 PAT가 필요했다</li><li>당연히 퍼블릭한 패키지에는 토큰이 필요 없을 거라 생각했다</li><li>그래서 어쩔 수 없이 패키지 오너의 토큰이 필요할 거라 생각했다</li><li>근데, 패키지 주인이 생성한 토큰이 아니더라도 패키지를 인스톨할 수 있었다</li><li>즉, github 계정을 가지고 있고, <code>read:packages</code> 토큰을 생성하면 퍼블릭 패키지를 인스톨할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><h3 id="내-첫-패키지"><a href="#내-첫-패키지" class="headerlink" title="내 첫 패키지"></a>내 첫 패키지</h3><ul><li><a href="https://github.com/chinsun9/hello-package">https://github.com/chinsun9/hello-package</a></li></ul><h3 id="GitHub-패키지-저장소-호스팅-GitHub-Package-Registry-시작하기"><a href="#GitHub-패키지-저장소-호스팅-GitHub-Package-Registry-시작하기" class="headerlink" title="GitHub 패키지 저장소 호스팅: GitHub Package Registry 시작하기"></a>GitHub 패키지 저장소 호스팅: GitHub Package Registry 시작하기</h3><ul><li><a href="https://musma.github.io/2019/09/30/github-package-registry.html">https://musma.github.io/2019/09/30/github-package-registry.html</a></li></ul><h3 id="d-ts-만들기"><a href="#d-ts-만들기" class="headerlink" title="d.ts 만들기"></a>d.ts 만들기</h3><ul><li><a href="https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html">https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html</a></li></ul><h3 id="rc-뜻"><a href="#rc-뜻" class="headerlink" title="*rc 뜻"></a>*rc 뜻</h3><ul><li><a href="https://stackoverflow.com/questions/52800196/what-does-the-rc-stand-for-in-the-names-of-configuration-files">https://stackoverflow.com/questions/52800196/what-does-the-rc-stand-for-in-the-names-of-configuration-files</a></li><li><a href="https://stackoverflow.com/questions/11030552/what-does-rc-mean-in-dot-files">https://stackoverflow.com/questions/11030552/what-does-rc-mean-in-dot-files</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/package/">package</category>
      
      
      <comments>https://chinsun9.github.io/2021/06/17/my-first-github-package/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
