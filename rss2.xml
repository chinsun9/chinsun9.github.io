<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Fri, 03 Sep 2021 04:07:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>typeorm 카테고리 생성</title>
      <link>https://chinsun9.github.io/2021/09/03/create-typeorm-category/</link>
      <guid>https://chinsun9.github.io/2021/09/03/create-typeorm-category/</guid>
      <pubDate>Fri, 03 Sep 2021 04:07:09 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;typeorm 공부해보자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;공부-링크&quot;&gt;&lt;a href=&quot;#공부-링크&quot; class=&quot;headerlink&quot; title=&quot;공부 링크&quot;&gt;&lt;/a&gt;공부 링크&lt;/h2&gt;&lt;h3 id=&quot;with-nestjs&quot;&gt;&lt;a hre</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>typeorm 공부해보자</li></ul><h2 id="공부-링크"><a href="#공부-링크" class="headerlink" title="공부 링크"></a>공부 링크</h2><h3 id="with-nestjs"><a href="#with-nestjs" class="headerlink" title="with nestjs"></a>with nestjs</h3><ul><li>Database | 네스트JS ; <a href="https://docs.nestjs.kr/techniques/database">https://docs.nestjs.kr/techniques/database</a></li><li>SQL (TypeORM) | 네스트JS ; <a href="https://docs.nestjs.kr/recipes/sql-typeorm">https://docs.nestjs.kr/recipes/sql-typeorm</a></li></ul><h3 id="공식"><a href="#공식" class="headerlink" title="공식"></a>공식</h3><ul><li><a href="https://typeorm.io/">https://typeorm.io/</a></li><li><a href="https://github.com/typeorm/typeorm">https://github.com/typeorm/typeorm</a></li><li>example projects ; <a href="https://github.com/typeorm/typeorm#samples">https://github.com/typeorm/typeorm#samples</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typeorm/">typeorm</category>
      
      
      <category domain="https://chinsun9.github.io/tags/category/">category</category>
      
      
      <comments>https://chinsun9.github.io/2021/09/03/create-typeorm-category/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>youtube shortcuts</title>
      <link>https://chinsun9.github.io/2021/09/02/youtube-shortcuts/</link>
      <guid>https://chinsun9.github.io/2021/09/02/youtube-shortcuts/</guid>
      <pubDate>Thu, 02 Sep 2021 03:38:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;모두 토글키다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c ; caption ; 자막&lt;/li&gt;
&lt;li&gt;f ; full screen ; 전체화면&lt;/li&gt;
&lt;li&gt;m ; mute ; 음소거&lt;/li&gt;
&lt;li&gt;k ; pause&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;shif</description>
        
      
      
      
      <content:encoded><![CDATA[<p>모두 토글키다</p><ul><li>c ; caption ; 자막</li><li>f ; full screen ; 전체화면</li><li>m ; mute ; 음소거</li><li>k ; pause</li></ul><ul><li>shift n ; 재생목록에서 다음 동영상</li><li>shift p ; 재생목록에서 이전 동영상</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtu.be/PVV1MduppSM">https://youtu.be/PVV1MduppSM</a></li><li><a href="https://support.google.com/youtube/answer/7631406?hl=ko">https://support.google.com/youtube/answer/7631406?hl=ko</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/youtube/">youtube</category>
      
      
      <comments>https://chinsun9.github.io/2021/09/02/youtube-shortcuts/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ts enum spread</title>
      <link>https://chinsun9.github.io/2021/09/01/ts-enum-spread/</link>
      <guid>https://chinsun9.github.io/2021/09/01/ts-enum-spread/</guid>
      <pubDate>Wed, 01 Sep 2021 11:33:25 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight ts&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight ts"><figcaption><span>example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> TestStatus &#123;</span><br><span class="line">  PENDING,</span><br><span class="line">  ACCEPTED,</span><br><span class="line">  WRONG_ANSWER,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(TestStatus));</span><br><span class="line"><span class="comment">// [ &#x27;PENDING&#x27;, &#x27;ACCEPTED&#x27;, &#x27;WRONG_ANSWER&#x27;, 0, 1, 2 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="built_in">enum</span> Actor &#123;</span><br><span class="line">  USER = <span class="string">&#x27;USER&#x27;</span>,</span><br><span class="line">  HOST = <span class="string">&#x27;HOST&#x27;</span>,</span><br><span class="line">  ADMIN = <span class="string">&#x27;ADMIN&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(Actor));</span><br><span class="line"><span class="comment">// [ &#x27;USER&#x27;, &#x27;HOST&#x27;, &#x27;ADMIN&#x27; ]</span></span><br></pre></td></tr></table></figure><ul><li>일반 <code>Numeric enums</code>의 경우 멤버 이름과 값이 나온다</li><li><code>String enums</code>의 경우 값만 나온다</li><li>es2017 이상에서 사용할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/microsoft/TypeScript/issues/31268">https://github.com/microsoft/TypeScript/issues/31268</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typescript/">typescript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/spread-syntax/">spread syntax</category>
      
      <category domain="https://chinsun9.github.io/tags/enum/">enum</category>
      
      <category domain="https://chinsun9.github.io/tags/es2017/">es2017</category>
      
      
      <comments>https://chinsun9.github.io/2021/09/01/ts-enum-spread/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js array range</title>
      <link>https://chinsun9.github.io/2021/08/31/js-array-range/</link>
      <guid>https://chinsun9.github.io/2021/08/31/js-array-range/</guid>
      <pubDate>Tue, 31 Aug 2021 05:10:05 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight ts&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.ts&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight ts"><figcaption><span>example.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://stackoverflow.com/a/33457557</span></span><br><span class="line"><span class="keyword">const</span> range = <span class="function">(<span class="params">start: <span class="built_in">number</span>, end: <span class="built_in">number</span></span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Array</span>(end - start).fill(<span class="number">0</span>).map(<span class="function">(<span class="params">_, idx</span>) =&gt;</span> start + idx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://stackoverflow.com/a/10050831</span></span><br><span class="line"><span class="keyword">const</span> range = <span class="function">(<span class="params">start: <span class="built_in">number</span>, end: <span class="built_in">number</span></span>) =&gt;</span></span><br><span class="line">  [...new <span class="built_in">Array</span>(end - start).keys()].map(<span class="function">(<span class="params">idx</span>) =&gt;</span> start + idx);</span><br></pre></td></tr></table></figure><ul><li><code>keys()</code> 같은 걸 활용할 수도 있다니…</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/a/33457557">https://stackoverflow.com/a/33457557</a></li><li><a href="https://stackoverflow.com/a/10050831">https://stackoverflow.com/a/10050831</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/31/js-array-range/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>eslint(react-hooks/exhaustive-deps) autofix</title>
      <link>https://chinsun9.github.io/2021/08/31/eslint-react-hooks-exhaustive-deps/</link>
      <guid>https://chinsun9.github.io/2021/08/31/eslint-react-hooks-exhaustive-deps/</guid>
      <pubDate>Tue, 31 Aug 2021 02:13:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/eslint-react-hooks-exhaustive-deps20210823/preview.png&quot; a</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/eslint-react-hooks-exhaustive-deps20210823/preview.png" alt=" "></p><ul><li>eslint(react-hooks/exhaustive-deps)</li><li>useEffect, useCallback 등 종속성을 가지는 훅에서 누락된 종속성을 알려준다</li></ul><h2 id="auto-fix"><a href="#auto-fix" class="headerlink" title="auto fix"></a>auto fix</h2><ul><li>이전 버전에서는 autofix를 지원했는데,</li><li>최신 버전은 지원하지 않는다</li><li>나는 이전 버전을 사용해서 자동으로 종속성 업데이트해주는 것에 익숙하고 좋았었다</li><li>그래서 autofix 활성화하는 법을 찾아보았다</li><li>auto fix를 활성화하려면 eslint config에 설정을 추가해준다</li></ul><figure class="highlight json"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;react-hooks/exhaustive-deps&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;warn&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;enableDangerousAutofixThisMayCauseInfiniteLoops&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>enableDangerousAutofixThisMayCauseInfiniteLoops</code>를 활성화한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li>‘exhaustive-deps’ lint rule; <a href="https://github.com/facebook/react/issues/14920">https://github.com/facebook/react/issues/14920</a></li><li>autofix 사라짐<ul><li><a href="https://github.com/facebook/react/issues/16313#issuecomment-587149109">https://github.com/facebook/react/issues/16313#issuecomment-587149109</a></li><li><a href="https://github.com/facebook/react/issues/18235">https://github.com/facebook/react/issues/18235</a></li></ul></li><li>autofix 다시 사용하기 ; <a href="https://github.com/facebook/react/issues/18235">https://github.com/facebook/react/issues/18235</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/react/">react</category>
      
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/eslint/">eslint</category>
      
      <category domain="https://chinsun9.github.io/tags/hooks/">hooks</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/31/eslint-react-hooks-exhaustive-deps/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>video to gif, gifify 윈도우10에서 사용하기</title>
      <link>https://chinsun9.github.io/2021/08/30/video-to-gif/</link>
      <guid>https://chinsun9.github.io/2021/08/30/video-to-gif/</guid>
      <pubDate>Mon, 30 Aug 2021 07:05:25 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;gif를 활용하면 멋진 문서 만들 수 있다&lt;br&gt;동영상을 gif로 변환해주는 cli도구를 설치해보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/i</description>
        
      
      
      
      <content:encoded><![CDATA[<p>gif를 활용하면 멋진 문서 만들 수 있다<br>동영상을 gif로 변환해주는 cli도구를 설치해보자</p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/video-to-gif20210828/preview.png" alt=" "></p><ul><li>비디오를 gif로 만들어주는 <strong>gifify</strong>라는 cli 도구가 있다</li><li>npm을 통해 설치할 수 있어서 얼른 설치해서 실행해 보았다</li></ul><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g gifify</span><br></pre></td></tr></table></figure><h2 id="필요-종속성-설치"><a href="#필요-종속성-설치" class="headerlink" title="필요 종속성 설치"></a>필요 종속성 설치</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/video-to-gif20210828/1.png" alt=" "></p><ul><li>나는 윈도우를 사용하고 있다</li><li>npm 설치로, 너무 반가운 마음에 바로 설치하고 실행해봤는데 동작하지 않았다…</li><li><a href="https://github.com/vvo/gifify#requirements">https://github.com/vvo/gifify#requirements</a></li><li>위 링크에 어떤 종속성이 설치되어야 하는지 알려주고 있다</li><li>맥에서 사용할 수 있는 brew 패키지 매니저를 통해 필요 종속성 설치를 안내하고 있다</li><li>필요한 종속성은 <code>nodejs</code>, <code>ffmpeg</code>, <code>convert</code>, <code>gifsicle</code> 이 있다</li><li>나는 윈도우라서 각 종속성 설치를 수동으로 해주었다</li><li>나는 ffmpeg, gifsicle, convert 순으로 설치했다</li><li>근데 전부 설치하고 보니까 ffmpeg와 convert는 ImageMagick 인스톨러를 통해 함께 설치할 수 있다</li></ul><h3 id="ImageMagick-ffmpeg-convert"><a href="#ImageMagick-ffmpeg-convert" class="headerlink" title="ImageMagick : ffmpeg, convert"></a>ImageMagick : ffmpeg, convert</h3><p>convert는 이미지매직에 포함되어있다. 그래서 이미지매직 인스톨러를 사용해서 설치해야 한다</p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/video-to-gif20210828/4.png" alt=" "></p><ul><li><a href="http://www.imagemagick.org/script/download.php">http://www.imagemagick.org/script/download.php</a></li><li>스크롤을 아래로 내려서 <code>Windows Binary Release</code> 부분을 확인하여 다운로드한다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/video-to-gif20210828/2.png" alt=" "></p><ul><li>이미지매직 인스톨러에서 ffmpeg, convert, 환경변수 추가에 체크하고 인스톨한다</li><li>이렇게 convert, ffmpeg를 설치했다</li></ul><h3 id="gifsicle"><a href="#gifsicle" class="headerlink" title="gifsicle"></a>gifsicle</h3><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/video-to-gif20210828/3.png" alt=" "></p><ul><li><a href="https://eternallybored.org/misc/gifsicle/">https://eternallybored.org/misc/gifsicle/</a></li><li>gifsicle는 여기서 받을 수 있다</li><li>나는 64비트를 받았다</li></ul><h2 id="gifify-사용하기"><a href="#gifify-사용하기" class="headerlink" title="gifify 사용하기"></a>gifify 사용하기</h2><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/video-to-gif20210828/preview.png" alt=" "></p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gifify &#123;인풋 파일 경로&#125; -o &#123;아웃풋 파일 이름&#125;</span></span><br><span class="line">gifify input.mp4 -o output.gif</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/vvo/gifify#command-line-usage">https://github.com/vvo/gifify#command-line-usage</a></li><li>더 디테일한 변환 옵션은 위 링크를 참고한다</li></ul><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><ul><li>npm에서 설치할 수 있어서 간단하게 사용할 수 있을 거라 생각했다</li><li>그런데 필요한 종속성이 많이 있었고, 윈도우에서 사용하려면 수동으로 설치해줘야 했다</li><li>이렇게 여기저기서 설치하는 것이 귀찮고, 익숙하지 않은 사람은</li><li>곰플레이어같은 동영상 플레이어에서 제공하는 gif 변환을 사용하는 게 정신건강에 좋을 것 같다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/vvo/gifify#requirements">https://github.com/vvo/gifify#requirements</a></li><li><a href="http://www.imagemagick.org/script/download.php">http://www.imagemagick.org/script/download.php</a></li><li><a href="https://eternallybored.org/misc/gifsicle/">https://eternallybored.org/misc/gifsicle/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/gif/">gif</category>
      
      <category domain="https://chinsun9.github.io/tags/video/">video</category>
      
      <category domain="https://chinsun9.github.io/tags/ffmpeg/">ffmpeg</category>
      
      <category domain="https://chinsun9.github.io/tags/imagemagick/">imagemagick</category>
      
      <category domain="https://chinsun9.github.io/tags/convert/">convert</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/30/video-to-gif/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>tsconfig baseUrl eslint</title>
      <link>https://chinsun9.github.io/2021/08/29/tsconfig-baseUrl-eslint/</link>
      <guid>https://chinsun9.github.io/2021/08/29/tsconfig-baseUrl-eslint/</guid>
      <pubDate>Sun, 29 Aug 2021 05:19:25 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/tsconfig-baseUrl-eslint20210828/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/tsconfig-baseUrl-eslint20210828/preview.png" alt=" "></p><p>tsconfig에 baseUrl을 <code>./src</code>로 설정했다<br>그런데 eslint가 못 알아먹는다<br>알아먹도록 해보자</p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>타입스크립트 프로젝트에서 <code>npx eslint --init</code>을 통해 eslint 환경을 구성했다</li><li>그런데 tsconfig에 설정한 baseUrl을 eslint가 알아먹지 못했다</li></ul><h2 id="eslint-import-resolver-typescript-설치"><a href="#eslint-import-resolver-typescript-설치" class="headerlink" title="eslint-import-resolver-typescript 설치"></a>eslint-import-resolver-typescript 설치</h2><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D eslint-import-resolver-typescript</span><br></pre></td></tr></table></figure><ul><li><code>eslint-import-resolver-typescript</code>는 tsconfig에서 path alias를 사용할 수 있도록 해주는 패키지다</li><li><a href="https://www.npmjs.com/package/eslint-import-resolver-typescript">https://www.npmjs.com/package/eslint-import-resolver-typescript</a></li></ul><h2 id="eslintrc-수정"><a href="#eslintrc-수정" class="headerlink" title="eslintrc 수정"></a>eslintrc 수정</h2><figure class="highlight json"><figcaption><span>.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;project&quot;</span>: <span class="string">&quot;./tsconfig.json&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// https://github.com/import-js/eslint-plugin-import/issues/1485#issuecomment-535351922</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;import/resolver&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;typescript&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>parserOptions.project</code>와 <code>settings.import/resolver.typescript</code>에 위 내용처럼 추가한다</li><li>eslint config를 수정하면 항상 <code>ESLint: Restart ESLint Server</code> 또는 <code>Developer: Reload Window</code>을 꼭 해주자</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/57032522/eslint-complains-about-typescripts-path-aliasing">https://stackoverflow.com/questions/57032522/eslint-complains-about-typescripts-path-aliasing</a></li><li><a href="https://github.com/import-js/eslint-plugin-import/issues/1485#issuecomment-535351922">https://github.com/import-js/eslint-plugin-import/issues/1485#issuecomment-535351922</a></li><li><a href="https://www.npmjs.com/package/eslint-import-resolver-typescript">https://www.npmjs.com/package/eslint-import-resolver-typescript</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typescript/">typescript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/eslint/">eslint</category>
      
      <category domain="https://chinsun9.github.io/tags/tsconfig/">tsconfig</category>
      
      <category domain="https://chinsun9.github.io/tags/baseUrl/">baseUrl</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/29/tsconfig-baseUrl-eslint/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js delete operator</title>
      <link>https://chinsun9.github.io/2021/08/26/js-delete-operator/</link>
      <guid>https://chinsun9.github.io/2021/08/26/js-delete-operator/</guid>
      <pubDate>Thu, 26 Aug 2021 02:46:29 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  username: <span class="string">&#x27;sung&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> user.password;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br><span class="line"><span class="comment">// &#123; username: &#x27;sung&#x27; &#125;</span></span><br></pre></td></tr></table></figure><ul><li>객체의 속성을 제거한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/delete">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/delete</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/delete/">delete</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/26/js-delete-operator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>yarn tips, 그냥 node 명령과 npm, yarn 명령 차이</title>
      <link>https://chinsun9.github.io/2021/08/26/yarn-tips/</link>
      <guid>https://chinsun9.github.io/2021/08/26/yarn-tips/</guid>
      <pubDate>Thu, 26 Aug 2021 01:54:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;일반 터미널에서 실행이 안 되는 명령어가 있다&lt;br&gt;글로벌로 설치되지 않았는데, 왜 package.json의 script에 들어 있는 cli 도구들이 동작하는 걸까?&lt;/p&gt;
&lt;h2 id=&quot;package-json-script-vs-일반-터미널의-명</description>
        
      
      
      
      <content:encoded><![CDATA[<p>일반 터미널에서 실행이 안 되는 명령어가 있다<br>글로벌로 설치되지 않았는데, 왜 package.json의 script에 들어 있는 cli 도구들이 동작하는 걸까?</p><h2 id="package-json-script-vs-일반-터미널의-명령"><a href="#package-json-script-vs-일반-터미널의-명령" class="headerlink" title="package.json script vs 일반 터미널의 명령"></a>package.json script vs 일반 터미널의 명령</h2><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;tsc --init&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>package.json에 <code>tsc --init</code>을 실행하는 <code>build</code> 스크립트가 있다고 하자</li></ul><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### without script</span></span><br><span class="line">tsc --init</span><br><span class="line"></span><br><span class="line"><span class="comment">### with script</span></span><br><span class="line">npm run build</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn build</span><br></pre></td></tr></table></figure><ul><li><p>그냥 <code>tsc --init</code> 명령을 실행했을 때</p><ul><li>타입스크립트가 전역 설치되어 있지 않으면 실행되지 않는다</li><li>전역 설치되어있다면 전역으로 설치된 타입스크립트 컴파일러(tsc)가 실행된다</li></ul></li><li><p>npm 또는 yarn을 통해 실행했을 때</p><ul><li>현재 워크스페이스에 설치된 tsc가 실행된다</li><li>현재 워크스페이스에 타입스크립트가 설치되어 있지 않으면 전역으로 설치된 tsc가 실행된다</li><li>전역 설치되어있지 않으면 실행되지 않는다</li></ul></li><li><p>전역으로 설치된 명령과 package.json script를 통해 실행되는 cli 도구가 다르다</p></li><li><p>script를 통해 실행하면 워크스페이스에 설치된 도구를 우선적으로 사용하는 것을 알 수 있다</p></li><li><p>그러면 이 도구들은 어디 존재하는 걸까?</p></li></ul><h2 id="위치"><a href="#위치" class="headerlink" title="위치"></a>위치</h2><h3 id="package-json-script"><a href="#package-json-script" class="headerlink" title="package.json script"></a>package.json script</h3><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/yarn-tips20210824/preview.png" alt=" "></p><ul><li><code>node_modules/.bin</code></li></ul><h3 id="전역-패키지"><a href="#전역-패키지" class="headerlink" title="전역 패키지"></a>전역 패키지</h3><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/yarn-tips20210824/1.png" alt=" "></p><ul><li><code>%appdata%/npm</code></li></ul><h2 id="yarn-꿀팁"><a href="#yarn-꿀팁" class="headerlink" title="yarn 꿀팁?"></a>yarn 꿀팁?</h2><ul><li>위에서 확인한 것처럼 <code>node_modules/.bin</code>에서 사용 가능한 cli도구를 확인할 수 있다</li><li>이 도구들을 꼭 script에 작성해야지만 사용 가능한 것은 아니다</li><li>package.json에 스크립트를 작성하지 않고도, 현재 워크스페이스에 설치된 cli 도구들을 사용할 수 있다</li></ul><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn tsc --init</span><br></pre></td></tr></table></figure><ul><li>이렇게 <code>yarn</code>으로 시작하는 경우 script에 작성한 것과 동일한 효과를 가져올 수 있다</li><li>한 번만 명령어를 쓰는 경우 스크립트에 등록하지 않고 쉽게 실행시켜 볼 수있다</li></ul><h2 id="더-알아보기"><a href="#더-알아보기" class="headerlink" title="더 알아보기"></a>더 알아보기</h2><ul><li><code>yarn node index.js</code> 와 <code>node index.js</code>를 비교해보자</li></ul><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(process.env);</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env.path);</span><br></pre></td></tr></table></figure><ul><li><code>yarn</code> or <code>npm run</code> 으로 실행하는 것과 그냥 <code>node</code>로 실행하는 것이 다른데, 환경 변수가 다르다</li><li><code>yarn</code> or <code>npm run</code> 으로 실행하면 훨씬 더 많은 환경을 가지는 것을 확인할 수 있고,</li><li>특히 path를 확인해보면 <code>yarn</code>, <code>npm</code> 을 통해 실행한 경우 path에 <code>node_modules/.bin</code> 경로가 들어있는 것을 확인할 수 있다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/process/">process</category>
      
      <category domain="https://chinsun9.github.io/tags/cli/">cli</category>
      
      <category domain="https://chinsun9.github.io/tags/yarn/">yarn</category>
      
      <category domain="https://chinsun9.github.io/tags/node/">node</category>
      
      <category domain="https://chinsun9.github.io/tags/env/">env</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/26/yarn-tips/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ORM</title>
      <link>https://chinsun9.github.io/2021/08/25/orm/</link>
      <guid>https://chinsun9.github.io/2021/08/25/orm/</guid>
      <pubDate>Wed, 25 Aug 2021 06:01:16 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;전통?의 데이터베이스 사용은 ERD를 작성(식별부터 정규화까지)하고,&lt;/li&gt;
&lt;li&gt;DDL로 테이블 생성 등 데이터베이스 사용을 위한 초기화를 하고,&lt;/li&gt;
&lt;li&gt;DML로 조회 쿼리를 작성하는 등 과정을 거쳐 사용했다&lt;/li&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>전통?의 데이터베이스 사용은 ERD를 작성(식별부터 정규화까지)하고,</li><li>DDL로 테이블 생성 등 데이터베이스 사용을 위한 초기화를 하고,</li><li>DML로 조회 쿼리를 작성하는 등 과정을 거쳐 사용했다</li><li>그런데 ORM, Object Relational Mapping 이 뭘까..?</li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/4cy92zeVjmM" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>위 영상을 보고 정리한 내용</li></ul><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><ul><li>오브젝트 기반의 ~</li><li>객체(클래스)를 만들면 테이블을 생성해주는 마법</li></ul><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>data model을 한 곳에서 작성한다</li><li>백엔드에서 데이터베이스 테이블과 매핑되는 타입을 정의하는데, ORM을 쓰면 내가 정의한 모델 자체가 타이핑이 된다</li><li>sql을 작성하지 않아도 된다 ; 모델을 정의하면 DDL을 알아서 생성한다. DML 작성 대신 메서드를 사용한다</li><li>데이터베이스 추상화 ; 보통의 ORM 라이브러리들은 여러 데이터베이스를 지원한다</li><li>오라클을 사용하다가 mysql로 데이터베이스를 바꿔도 전혀 문제가 없다</li><li>OOP를 활용한다 ; OOP를 알고 있으면 친숙하다</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>ORM을 따로 배워야 한다</li><li>ORM을 통해 데이터베이스를 다룬다는 것에서 레이어가 나뉘었다는 장점?이 있지만, 데이터베이스를 커스텀하기 힘들다 (성능)</li></ul><h2 id="ORM-예"><a href="#ORM-예" class="headerlink" title="ORM 예"></a>ORM 예</h2><ul><li>자바에서는 hibernate,</li><li>노드에서는 sequelize, typeorm, prisma 등이 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://youtu.be/4cy92zeVjmM">https://youtu.be/4cy92zeVjmM</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/keyword/">keyword</category>
      
      
      <category domain="https://chinsun9.github.io/tags/keyword/">keyword</category>
      
      <category domain="https://chinsun9.github.io/tags/orm/">orm</category>
      
      <category domain="https://chinsun9.github.io/tags/typeorm/">typeorm</category>
      
      <category domain="https://chinsun9.github.io/tags/hibernate/">hibernate</category>
      
      <category domain="https://chinsun9.github.io/tags/jpa/">jpa</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/25/orm/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ssh key passphrase 한번만 입력하기</title>
      <link>https://chinsun9.github.io/2021/08/25/git-clone-using-ssh-key-passphrase/</link>
      <guid>https://chinsun9.github.io/2021/08/25/git-clone-using-ssh-key-passphrase/</guid>
      <pubDate>Wed, 25 Aug 2021 04:52:18 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/git-clone-using-ssh-key-passphrase20210825/preview.png&quot; a</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/git-clone-using-ssh-key-passphrase20210825/preview.png" alt=" "></p><ul><li>저번에 올린 글 <a href="/2021/08/19/git-clone-using-ssh/">ssh를 사용해 git clone 하기</a> 에서는 ssh키를 생성할 때 비밀번호, passphrase를 따로 생성하지 않고 진행하는 것을 알아보았다</li><li>비밀번호 생성을 하지 않은 이유는 비밀번호를 추가로 요구하기 때문이다</li><li>하지만 ssh키와 비밀번호까지 사용한다면 더욱 안전하게 사용할 수 있다</li><li>이번에는 비밀번호와 함께 ssh키를 생성하고, ssh-agent를 이용해서 암호를 요구하지 않도록 만들어보자!</li></ul><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><ul><li>최초 셸 실행 때 ssh 비밀번호를 입력하면, 앞으로 비밀번호를 묻지 않는다</li><li>컴퓨터를 다시 켜면 물어본다</li></ul><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><blockquote><p>(공식문서) <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/working-with-ssh-key-passphrases">https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/working-with-ssh-key-passphrases</a></p></blockquote><ul><li>사용하는 터미널에 따라 다른 프로필을 설정해줘야 한다</li><li>윈도우와 리눅스 모두 동일한 방법이다</li></ul><figure class="highlight sh"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">env=~/.ssh/agent.env</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">agent_load_env</span></span> () &#123; <span class="built_in">test</span> -f <span class="string">&quot;<span class="variable">$env</span>&quot;</span> &amp;&amp; . <span class="string">&quot;<span class="variable">$env</span>&quot;</span> &gt;| /dev/null ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">agent_start</span></span> () &#123;</span><br><span class="line">    (<span class="built_in">umask</span> 077; ssh-agent &gt;| <span class="string">&quot;<span class="variable">$env</span>&quot;</span>)</span><br><span class="line">    . <span class="string">&quot;<span class="variable">$env</span>&quot;</span> &gt;| /dev/null ; &#125;</span><br><span class="line"></span><br><span class="line">agent_load_env</span><br><span class="line"></span><br><span class="line"><span class="comment"># agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running</span></span><br><span class="line">agent_run_state=$(ssh-add -l &gt;| /dev/null 2&gt;&amp;1; <span class="built_in">echo</span> $?)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="string">&quot;<span class="variable">$SSH_AUTH_SOCK</span>&quot;</span> ] || [ <span class="variable">$agent_run_state</span> = 2 ]; <span class="keyword">then</span></span><br><span class="line">    agent_start</span><br><span class="line">    ssh-add</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$SSH_AUTH_SOCK</span>&quot;</span> ] &amp;&amp; [ <span class="variable">$agent_run_state</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">    ssh-add</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> env</span><br></pre></td></tr></table></figure><ul><li><em>윈도우에서는 git bash를 이용한다</em></li><li><code>vi ~/.bashrc</code> 명령해 vi 에디터로 위 내용을 추가해준다</li><li><code>i</code>키를 눌러 입력 모드로 가서 위 내용을 붙여 넣고,</li><li><code>esc</code>키를 눌러 입력 모드에서 나와서 <code>:wq</code>를 입력해 저장하고 나온다</li><li>터미널에 <code>source ~/.bashrc</code> 명령해 터미널을 새로고침 한다</li><li>ssh 비밀번호를 요구하는데, 이때 한번 인증을 하면 이후에 비밀번호를 입력하지 않아도 된다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/working-with-ssh-key-passphrases">https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/working-with-ssh-key-passphrases</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/ssh/">ssh</category>
      
      <category domain="https://chinsun9.github.io/tags/ssh-agent/">ssh-agent</category>
      
      <category domain="https://chinsun9.github.io/tags/bashrc/">bashrc</category>
      
      <category domain="https://chinsun9.github.io/tags/passphrase/">passphrase</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/25/git-clone-using-ssh-key-passphrase/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>1일 1커밋 소스</title>
      <link>https://chinsun9.github.io/2021/08/22/one-commit-a-day/</link>
      <guid>https://chinsun9.github.io/2021/08/22/one-commit-a-day/</guid>
      <pubDate>Sun, 22 Aug 2021 10:37:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;1일 1커밋하는데 무슨 내용을 커밋하는 걸까?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/one-commit-a-day20210822</description>
        
      
      
      
      <content:encoded><![CDATA[<p>1일 1커밋하는데 무슨 내용을 커밋하는 걸까?</p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/one-commit-a-day20210822/preview.png" alt=" "></p><h2 id="1일-1커밋-소스"><a href="#1일-1커밋-소스" class="headerlink" title="1일 1커밋 소스"></a>1일 1커밋 소스</h2><ul><li>블로그</li><li>코테 연습</li><li>공부용 프로젝트</li><li>영단어</li><li>리팩토링</li></ul><ul><li>매일 같인 커밋하기로 정해둔 하나의 레포가 있는 것은 아니다</li><li>주로 <strong>블로그</strong> 포스트, <strong>코딩 테스트 연습</strong>할 때 사용하는 레포에 자주 커밋을 하고 있다</li><li>그 외에는 최근에 공부하는 nestjs, nextjs <strong>공부용 프로젝트</strong>도 있다</li><li>1일 1커밋을 지켜온지 이제 거의 일 년이 되어간다</li><li>1일 1커밋 초기에는 영단어 외우는 레포에 매일 <strong>영단어</strong> 정리했었다</li><li>블로그를 시작하면서 매일 배우는 것들을 블로그 포스트로 올리고 있다</li><li>특히 블로그를 깃허브 블로그로 시작하면서 잔디 관리에 큰 도움이 되었다</li></ul><h2 id="깃허브-블로그"><a href="#깃허브-블로그" class="headerlink" title="깃허브 블로그"></a>깃허브 블로그</h2><ul><li>글을 쓸 때는 최대한 고민 안 하고 쓰는 편이다</li><li>뭔가 새로운 활동이 있으면 바로 블로그에 초안 작성을 시작한다</li><li>내 개발 기록을 내 나름대로 정리해서 블로그에 남겨놓으면,</li><li>나중에 관련 지식이 필요할 때, 구글에서 검색하는 게 아니라 내 블로그에서 검색을 할 수 있다</li><li>다른 사람도 아니라 내가 작성한 글이기 때문에 빠르게 이해하고 탈분극 시킬 수 있다</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/commit/">commit</category>
      
      <category domain="https://chinsun9.github.io/tags/%EC%83%9D%EA%B0%81/">생각</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/22/one-commit-a-day/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>chocolatey, 패키지 매니저 설치</title>
      <link>https://chinsun9.github.io/2021/08/22/install-chocolatey/</link>
      <guid>https://chinsun9.github.io/2021/08/22/install-chocolatey/</guid>
      <pubDate>Sun, 22 Aug 2021 04:22:00 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight ps1&quot;&gt;&lt;figcaption&gt;&lt;span&gt;administrator powershell terminal&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight ps1"><figcaption><span>administrator powershell terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol <span class="operator">-bor</span> <span class="number">3072</span>; <span class="built_in">iex</span> ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://community.chocolatey.org/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>관리자 권한으로 파워셸 실행 후 명령 실행</li></ul><!-- react native 개발 전제 조건으로 node나 jdk 설치를 할 때 윈도우에서는 chocolatey를 사용해 설치하는 것을 권장하여 설치하게 됨  --><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://chocolatey.org/install">https://chocolatey.org/install</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/chocolatey/">chocolatey</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/22/install-chocolatey/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js 문자열 클립보드로 복사하기</title>
      <link>https://chinsun9.github.io/2021/08/21/js-copy-string-to-clipboard-without-select/</link>
      <guid>https://chinsun9.github.io/2021/08/21/js-copy-string-to-clipboard-without-select/</guid>
      <pubDate>Sat, 21 Aug 2021 14:04:54 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;Clipboard API&lt;/strong&gt;를 사용할 수 있다&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td </description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>Clipboard API</strong>를 사용할 수 있다</p><figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.clipboard.writeText(gto9(text));</span><br></pre></td></tr></table></figure><ul><li>bye bye <code>document.execCommand(&quot;copy&quot;)</code></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard">https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://chinsun9.github.io/tags/clipboard/">clipboard</category>
      
      <category domain="https://chinsun9.github.io/tags/copy/">copy</category>
      
      <category domain="https://chinsun9.github.io/tags/navigator/">navigator</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/21/js-copy-string-to-clipboard-without-select/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ssh를 사용해 git clone 하기</title>
      <link>https://chinsun9.github.io/2021/08/19/git-clone-using-ssh/</link>
      <guid>https://chinsun9.github.io/2021/08/19/git-clone-using-ssh/</guid>
      <pubDate>Thu, 19 Aug 2021 08:10:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;깃허브에서 클론 할 수 있는 방법 2가지(ssh, pat)를 정리한다&lt;/p&gt;
&lt;h2 id=&quot;ssh로-클론&quot;&gt;&lt;a href=&quot;#ssh로-클론&quot; class=&quot;headerlink&quot; title=&quot;ssh로 클론&quot;&gt;&lt;/a&gt;ssh로 클론&lt;/h2&gt;&lt;h3 id=</description>
        
      
      
      
      <content:encoded><![CDATA[<p>깃허브에서 클론 할 수 있는 방법 2가지(ssh, pat)를 정리한다</p><h2 id="ssh로-클론"><a href="#ssh로-클론" class="headerlink" title="ssh로 클론"></a>ssh로 클론</h2><h3 id="ssh-key-생성"><a href="#ssh-key-생성" class="headerlink" title="ssh key 생성"></a>ssh key 생성</h3><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/git-clone-using-ssh20210806/preview.png" alt=" "></p><ul><li>git bash를 실행하여 진행한다</li></ul><figure class="highlight sh"><figcaption><span>git bash terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</span></span><br><span class="line"><span class="comment"># 새로운 ssh 키 생성</span></span><br><span class="line"><span class="comment"># 생성할 때 파일명과 비밀번호를 지정해 줄 수 있다</span></span><br><span class="line"><span class="comment"># 비밀번호는 입력하지 않는다 (엔터키로 스킵)</span></span><br><span class="line"><span class="comment"># 비밀번호까지 지정해주고 싶으면 아래 링크를 참고하자</span></span><br><span class="line"><span class="comment"># https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/working-with-ssh-key-passphrases</span></span><br><span class="line"><span class="comment"># -C 옵션 뒤에는 자신의 이메일 등 적고 싶은 문구를 적는다</span></span><br><span class="line"><span class="comment"># ssh-keygen -t ed25519 -C &quot;chin_sung@naver.com&quot;</span></span><br><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;안녕하세요요요요요&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="comment"># 공개키 내용을 전부 복사한다</span></span><br><span class="line">cat id_ed25519.pub</span><br><span class="line"><span class="comment"># output: ssh-ed25519 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx chin_sung@naver.com</span></span><br></pre></td></tr></table></figure><ul><li>나는 기본값으로 생성했다</li><li><em>~/.ssh/id_ed25519</em></li><li><em>~/.ssh/id_ed25519.pub</em></li><li><em>.pub</em> 파일이 이제 깃허브에 등록해야 하는 공개키이다</li><li><code>cat</code> 명령으로 읽어서 복사해두자</li></ul><h3 id="ssh-key-등록"><a href="#ssh-key-등록" class="headerlink" title="ssh key 등록"></a>ssh key 등록</h3><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/git-clone-using-ssh20210806/preview.png" alt=" "></p><ul><li><a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a></li><li>깃허브 세팅으로 들어가 ssh키를 등록한다</li><li>위에서 복사한 <code>id_ed25519.pub</code>의 내용을 붙여 넣어주면 끝<!-- - 깃 계정 정보를 저장하지 않은 컴퓨터에서 시도해보면 체감할 수 있을 것이다 --></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh</a></li><li><a href="/2021/08/25/git-clone-using-ssh-key-passphrase/">ssh key passphrase 한번만 입력하기</a></li></ul><h3 id="PAT으로-클론"><a href="#PAT으로-클론" class="headerlink" title="PAT으로 클론"></a>PAT으로 클론</h3><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://&#123;pat&#125;@github.com/&#123;username&#125;/&#123;repo&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> https://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@github.com/chinsun9/my-private-repo.git</span><br></pre></td></tr></table></figure><ul><li>personal access token으로도 클론 할 수 있다. <a href="/2021/07/06/git-clone-using-pat/">자세히</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/ssh/">ssh</category>
      
      <category domain="https://chinsun9.github.io/tags/clone/">clone</category>
      
      <category domain="https://chinsun9.github.io/tags/pat/">pat</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/19/git-clone-using-ssh/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>노드에서 랜덤 키 생성하기</title>
      <link>https://chinsun9.github.io/2021/08/19/generate-random-key/</link>
      <guid>https://chinsun9.github.io/2021/08/19/generate-random-key/</guid>
      <pubDate>Thu, 19 Aug 2021 04:40:12 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight ts&quot;&gt;&lt;figcaption&gt;&lt;span&gt;example.ts&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight ts"><figcaption><span>example.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://nodejs.org/api/crypto.html</span></span><br><span class="line"><span class="keyword">import</span> &#123; randomBytes &#125; <span class="keyword">from</span> <span class="string">&#x27;crypto&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomKey</span>(<span class="params">keyLength: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> randomBytes(keyLength / <span class="number">2</span>).toString(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>무작위 문자열을 생성할 때 node에서 <code>crypto</code> 내장 모듈을 사용해서 생성할 수 있다</li><li>간단하게 키로 사용할 수 있는 문자열을 생성할 수 있는데, 막상 생성할 때가 오면 까먹는다</li></ul><h2 id="cli-도구"><a href="#cli-도구" class="headerlink" title="cli 도구"></a>cli 도구</h2><ul><li>찾아보니까 cli 도구도 있었다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/generate-random-key20210819/preview.png" alt=" "></p><ul><li><code>npx random-generator-cli string -l 32</code> 명령을 기억해 놨다가 편하게 생성해 볼 수 있겠다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/AmrSaber/random-cli">https://github.com/AmrSaber/random-cli</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/crypto/">crypto</category>
      
      <category domain="https://chinsun9.github.io/tags/random/">random</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/19/generate-random-key/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>postgresql 외부 접속 가능하게 설정하기</title>
      <link>https://chinsun9.github.io/2021/08/18/postgresql-port-forwarding/</link>
      <guid>https://chinsun9.github.io/2021/08/18/postgresql-port-forwarding/</guid>
      <pubDate>Wed, 18 Aug 2021 05:55:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;상황&quot;&gt;&lt;a href=&quot;#상황&quot; class=&quot;headerlink&quot; title=&quot;상황&quot;&gt;&lt;/a&gt;상황&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vercel에 배포한 앱이 db 커넥션이 안되었다&lt;/li&gt;
&lt;li&gt;aws 프리티어가 끝나서 로컬 컴퓨터에서 post</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>vercel에 배포한 앱이 db 커넥션이 안되었다</li><li>aws 프리티어가 끝나서 로컬 컴퓨터에서 postgresql를 돌렸다</li><li>공유기 포트 포워딩, 방화벽 인바운드 규칙 설정, 커넥션 스트링도 잘 작성해줬는데 이상하게 안되었다</li><li>찾아보니까 postgresql 설정도 건드려야 했다</li></ul><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ul><li><code>C:\Program Files\PostgreSQL\13\data</code> ; 내 postgresql 설치 경로이다</li><li>바로 여기에 <code>pg_hba.conf</code>을 수정해주어서 해결했다</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/postgresql-port-forwarding20210818/preview.png" alt=" "></p><figure class="highlight plain"><figcaption><span>pg_hba.conf:86</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># IPv4 local connections:</span><br><span class="line">host    all             all             0.0.0.0&#x2F;0               scram-sha-256</span><br></pre></td></tr></table></figure><ul><li>86라인 정도에 <code>127.0.0.1/32</code>를 <code>0.0.0.0/0</code>으로 수정해주면 된다</li><li>따로 dbms를 재부팅 안 해줘도 바로 적용되었다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://hgko1207.github.io/2020/09/11/postgresql-2/">https://hgko1207.github.io/2020/09/11/postgresql-2/</a></li><li>포트 포워딩 잘됐는지 확인하기 ; <a href="https://www.yougetsignal.com/tools/open-ports/">https://www.yougetsignal.com/tools/open-ports/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/port-forwarding/">port forwarding</category>
      
      <category domain="https://chinsun9.github.io/tags/postgresql/">postgresql</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/18/postgresql-port-forwarding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github action practice</title>
      <link>https://chinsun9.github.io/2021/08/17/github-action-practice/</link>
      <guid>https://chinsun9.github.io/2021/08/17/github-action-practice/</guid>
      <pubDate>Tue, 17 Aug 2021 02:54:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;깃허브 액션~!&lt;br&gt;내 프로젝트가 다른 환경에서도 잘 동작하는지 확인해보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-</description>
        
      
      
      
      <content:encoded><![CDATA[<p>깃허브 액션~!<br>내 프로젝트가 다른 환경에서도 잘 동작하는지 확인해보자</p><p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/github-action-practice20210809/preview.png" alt=" "></p><figure class="highlight yml"><figcaption><span>.github/workflows/github-actions.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">github</span> <span class="string">actions</span> <span class="string">practice</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">$&#123;&#123;matrix.os&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>, <span class="string">macos-latest</span>] <span class="comment"># https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">10.</span><span class="string">x</span>, <span class="number">11.</span><span class="string">x</span>, <span class="number">12.</span><span class="string">x</span>, <span class="number">13.</span><span class="string">x</span>, <span class="number">14.</span><span class="string">x</span>, <span class="number">15.</span><span class="string">x</span>, <span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># 레포 클론할 때 필요</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span> <span class="comment"># 노드</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Rest</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Initiate</span> <span class="string">Test</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><ul><li><code>name</code> ; 원하는 이름을 설정해준다</li><li><code>on</code> ; 워크플로를 트리거하는 이벤트를 지정한다 (실행 조건)<ul><li><code>on: push</code> ; 이렇게 단일 값을 지정해 줄 수 있다</li><li><code>on: [push, pull_request]</code> ; 배열 값으로 지정해 줄 수도 있다</li><li>나는 <code>workflow_dispatch</code>를 사용했는데, 이거를 사용하면 수동으로 워크플로우를 시작해야 한다. 깃허브 액션은 <a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">사용량 제한</a>이 있어서 일단 아끼고 본다</li></ul></li><li><code>jobs.&lt;job_id&gt;.strategy.matrix</code> ; 워크플로를 실행할 환경을 설정한다</li><li><code>jobs.&lt;job_id&gt;.setps[*].uses</code> ; <code>actions/checkout@v2</code>, <code>actions/setup-node@v2</code>를 사용했다. <code>actions/checkout@v2</code>은 현재 레포를 테스트 환경으로 클론 할 때 필요한 것이고, <code>actions/setup-node@v2</code>는 노드 버전을 구성하는데 권장하는 방법이라고 한다</li><li><code>jobs.&lt;job_id&gt;.steps[*].run</code> ; 원하는 cli를 설정할 수 있다</li><li><code>jobs.&lt;job_id&gt;.steps[*].name</code> ; 각 단계에 이름을 붙여줄 수 있다. 깃허브 액션 페이지에서 로그를 식별할 때 도움을 준다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/actions/quickstart">https://docs.github.com/en/actions/quickstart</a></li><li><a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions">https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions</a></li><li><a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/github-actions/">github actions</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/17/github-action-practice/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>컴공이라면 알아야 할 특수문자 읽는 법</title>
      <link>https://chinsun9.github.io/2021/08/15/english-name-of-special-characters/</link>
      <guid>https://chinsun9.github.io/2021/08/15/english-name-of-special-characters/</guid>
      <pubDate>Sun, 15 Aug 2021 03:39:13 GMT</pubDate>
      
        
        
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;특수문자&lt;/th&gt;
&lt;th&gt;영어&lt;/th&gt;
&lt;th&gt;한글 (일상에서 읽는 법)&lt;/th&gt;
&lt;th&gt;링크&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;backtick&lt;/td&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<table><thead><tr><th>특수문자</th><th>영어</th><th>한글 (일상에서 읽는 법)</th><th>링크</th></tr></thead><tbody><tr><td>`</td><td>backtick</td><td>백틱</td><td><a href="https://en.wikipedia.org/wiki/Grave_accent#Use_in_programming">🧾</a></td></tr><tr><td>~</td><td>tilde</td><td>틸드, 물결표</td><td><a href="https://en.wikipedia.org/wiki/Tilde">🧾</a></td></tr><tr><td>!</td><td>exclamation mark</td><td>느낌표</td><td><a href="https://en.wikipedia.org/wiki/Exclamation_mark">🧾</a></td></tr><tr><td>@</td><td>at sign</td><td>골뱅이</td><td><a href="https://en.wikipedia.org/wiki/At_sign">🧾</a></td></tr><tr><td>#</td><td>number sign</td><td>샵</td><td><a href="https://en.wikipedia.org/wiki/Number_sign">🧾</a></td></tr><tr><td>$</td><td>dollar sign</td><td>달러</td><td><a href="https://en.wikipedia.org/wiki/Dollar_sign">🧾</a></td></tr><tr><td>%</td><td>percent sign</td><td>퍼센트, 나머지연산</td><td><a href="https://en.wikipedia.org/wiki/Percent_sign">🧾</a></td></tr><tr><td>^</td><td>caret</td><td>캐릿, 제곱</td><td><a href="https://en.wikipedia.org/wiki/Caret">🧾</a></td></tr><tr><td>&amp;</td><td>ampersand</td><td>앰퍼샌드, 앤드</td><td><a href="https://en.wikipedia.org/wiki/Ampersand">🧾</a></td></tr><tr><td>*</td><td>asterisk</td><td>애스터리스크, 별표, 곱하기</td><td><a href="https://en.wikipedia.org/wiki/Asterisk">🧾</a></td></tr><tr><td>()</td><td>parenthesis</td><td>소괄호</td><td><a href="https://en.wikipedia.org/wiki/Bracket#Parentheses">🧾</a></td></tr><tr><td>-</td><td>hyphen minus</td><td>하이픈, 빼기</td><td><a href="https://en.wikipedia.org/wiki/Hyphen-minus">🧾</a></td></tr><tr><td>_</td><td>underscore</td><td>언더스코어, 언더바, 밑줄</td><td><a href="https://en.wikipedia.org/wiki/Underscore">🧾</a></td></tr><tr><td>=</td><td>equals sign</td><td>이퀄, 는, 등호</td><td><a href="https://en.wikipedia.org/wiki/Equals_sign">🧾</a></td></tr><tr><td>+</td><td>plus sign</td><td>플러스, 더하기</td><td><a href="https://en.wikipedia.org/wiki/Plus_and_minus_signs#Plus_sign">🧾</a></td></tr><tr><td>[]</td><td>brackets</td><td>브라켓, 대괄호</td><td><a href="https://en.wikipedia.org/wiki/Bracket#Square_brackets">🧾</a></td></tr><tr><td>{}</td><td>braces</td><td>중괄호</td><td><a href="https://en.wikipedia.org/wiki/Bracket#Curly_brackets">🧾</a></td></tr><tr><td>\</td><td>backslash</td><td>백슬래시, 역슬래시, 원화</td><td><a href="https://en.wikipedia.org/wiki/Backslash">🧾</a></td></tr><tr><td>;</td><td>semicolon</td><td>세미콜론</td><td><a href="https://en.wikipedia.org/wiki/Semicolon">🧾</a></td></tr><tr><td>:</td><td>colon</td><td>콜론</td><td><a href="https://en.wikipedia.org/wiki/Colon_(punctuation)">🧾</a></td></tr><tr><td>‘</td><td>apostrophe</td><td>아포스트로피, 싱글 쿼테이션, 작은 따옴표</td><td><a href="https://en.wikipedia.org/wiki/Apostrophe">🧾</a></td></tr><tr><td>“</td><td>quotation</td><td>쿼테이션, 큰 따옴표</td><td><a href="https://en.wikipedia.org/wiki/Quotation_mark">🧾</a></td></tr><tr><td>,</td><td>comma</td><td>콤마</td><td><a href="https://en.wikipedia.org/wiki/Comma">🧾</a></td></tr><tr><td>.</td><td>dot, period, full stop</td><td>마침표</td><td><a href="https://en.wikipedia.org/wiki/Full_stop">🧾</a></td></tr><tr><td>&lt;&gt;</td><td>angle brackets</td><td>대소구분</td><td><a href="https://en.wikipedia.org/wiki/Bracket#Angle_brackets">🧾</a></td></tr><tr><td>/</td><td>slash</td><td>슬래시, 나누기</td><td><a href="https://en.wikipedia.org/wiki/Slash_(punctuation)">🧾</a></td></tr><tr><td>?</td><td>question mark</td><td>물음표</td><td><a href="https://en.wikipedia.org/wiki/Question_mark">🧾</a></td></tr></tbody></table><ul><li>특수문자로 된 연산자에 대해 구글링 할 때, 키워드를 알아야한다</li><li>위키피디아에 <code>https://en.wikipedia.org/wiki/&#123;특수문자&#125;</code> 를 입력해주면 바로 찾을 수 있었다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://en.wikipedia.org/wiki/">https://en.wikipedia.org/wiki/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/special-character/">special character</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/15/english-name-of-special-characters/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>wsl interop</title>
      <link>https://chinsun9.github.io/2021/08/12/wsl-interop/</link>
      <guid>https://chinsun9.github.io/2021/08/12/wsl-interop/</guid>
      <pubDate>Thu, 12 Aug 2021 01:36:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/wsl-interop20210726/preview.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;c</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/wsl-interop20210726/preview.png" alt=" "></p><ul><li><code>rm -rf</code>같은 리눅스 명령어를 윈도우에서 작성하고 싶다</li><li>명령어를 똑같이 쓸 수 있는 방법이 있다</li><li>파워셸 코어가 필요하다</li></ul><h2 id="전제조건"><a href="#전제조건" class="headerlink" title="전제조건"></a>전제조건</h2><ul><li>WSL 활성화</li></ul><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><ul><li>파워셸 코어를 설치한다<ul><li><a href="https://github.com/powershell/powershell#get-powershell">https://github.com/powershell/powershell#get-powershell</a></li></ul></li></ul><figure class="highlight ps1"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> WslInterop</span><br></pre></td></tr></table></figure><ul><li>파워셸 코어를 실행하고, <code>Install-Module WslInterop</code>으로 설치한다</li></ul><h2 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h2><figure class="highlight ps1"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-WslCommand</span></span><br></pre></td></tr></table></figure><h2 id="새-터미널을-킬-때마다-다시-설정해줘야-한다"><a href="#새-터미널을-킬-때마다-다시-설정해줘야-한다" class="headerlink" title="새 터미널을 킬 때마다 다시 설정해줘야 한다?"></a>새 터미널을 킬 때마다 다시 설정해줘야 한다?</h2><ul><li><code>Import-WslCommand</code> 명령으로 wsl로 실행할 명령을 지정할 수 있다</li><li>그런데 새로운 터미널을 켤 때마다 매번 명령을 쳐줄 수 없다</li><li>파워셸 프로필을 설정해서 자동으로 임포트 명령이 실행되도록 한다</li></ul><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 프로필 생성</span></span><br><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span>)) &#123;</span><br><span class="line">  <span class="built_in">New-Item</span> <span class="literal">-ItemType</span> File <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Force</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># profile파일 열고 wsl interop 설정</span></span><br><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-WslCommand &quot;apt&quot;, &quot;awk&quot;, &quot;emacs&quot;, &quot;grep&quot;, &quot;head&quot;, &quot;less&quot;, &quot;ls&quot;, &quot;man&quot;, &quot;sed&quot;, &quot;seq&quot;, &quot;ssh&quot;, &quot;sudo&quot;, &quot;tail&quot;, &quot;vim&quot;, &quot;rm&quot;, &quot;touch&quot;</span><br></pre></td></tr></table></figure><ul><li>인터럽트 할 명령어를 위와 같이 나열한다</li><li>이제 파워셸에서 나열한 셸 명령어를 사용할 수 있다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/mikebattista/PowerShell-WSL-Interop">https://github.com/mikebattista/PowerShell-WSL-Interop</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/cmd/">cmd</category>
      
      
      <category domain="https://chinsun9.github.io/tags/cmd/">cmd</category>
      
      <category domain="https://chinsun9.github.io/tags/bash/">bash</category>
      
      <category domain="https://chinsun9.github.io/tags/wsl/">wsl</category>
      
      
      <comments>https://chinsun9.github.io/2021/08/12/wsl-interop/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
