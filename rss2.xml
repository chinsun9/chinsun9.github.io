<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>친성의 블로그</title>
    <link>https://chinsun9.github.io/</link>
    
    <atom:link href="https://chinsun9.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>친성의 개발 블로그</description>
    <pubDate>Thu, 12 Nov 2020 08:00:45 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>npm 패키지 unpublish</title>
      <link>https://chinsun9.github.io/2020/11/12/npm-%ED%8C%A8%ED%82%A4%EC%A7%80-unpublish/</link>
      <guid>https://chinsun9.github.io/2020/11/12/npm-%ED%8C%A8%ED%82%A4%EC%A7%80-unpublish/</guid>
      <pubDate>Thu, 12 Nov 2020 07:52:55 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish &#123;패키지명&#125; -f</span><br></pre></td></tr></table></figure><ul><li>내 패지키 디렉터리로 가서 위 명령을 실행</li></ul><ul><li>처음에 브라우저로 npm에 접속한다음에 <em>패키지 &gt; 세팅</em> 에 딜리트가 있는줄 알았는데,</li><li>cli로 지워야 했다.</li></ul><h2 id="삭제-조건"><a href="#삭제-조건" class="headerlink" title="삭제 조건"></a>삭제 조건</h2><ul><li>72 시간 이내에 게시 된 패키지</li><li>새로 생성 된 패키지의 경우 npm Public Registry의 다른 패키지가 패키지에 종속되지 않는 한 게시 후 처음 72 시간 이내에 언제든지 게시를 취소 할 수 있습니다.</li></ul><ul><li>72 시간 이상 전에 게시 된 패키지<ul><li>다른 패키지의 종속성이 아니여야한다.</li><li>지난주에 다운로드 횟수가 300 회 미만</li><li>단일 소유자</li></ul></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.npmjs.com/unpublishing-packages-from-the-registry">Unpublishing packages from the registry</a></li><li><a href="https://www.npmjs.com/policies/unpublish">npm Unpublish Policy</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/npm/">npm</category>
      
      <category domain="https://chinsun9.github.io/tags/unpublish/">unpublish</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/npm-%ED%8C%A8%ED%82%A4%EC%A7%80-unpublish/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>git clone 커밋 히스토리없이 가볍게 클론하기</title>
      <link>https://chinsun9.github.io/2020/11/12/git-clone-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%97%86%EC%9D%B4-%EA%B0%80%EB%B3%8D%EA%B2%8C-%ED%81%B4%EB%A1%A0%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2020/11/12/git-clone-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%97%86%EC%9D%B4-%EA%B0%80%EB%B3%8D%EA%B2%8C-%ED%81%B4%EB%A1%A0%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 12 Nov 2020 06:39:02 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;figcaption&gt;&lt;span&gt;terminal&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight cmd"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth <span class="number">1</span> https://github.com/chinsun9/refactor-<span class="number">2019</span>T1.git</span><br></pre></td></tr></table></figure><ul><li>git clone을 통해 클론하게되면 .git 폴더도 같이 딸려온다.</li><li>.git 폴더없이 최신 상태만 가져오고싶을 때 어떻게 할까 찾아보다가</li><li><code>--depth</code> 옵션을 알게되었다.</li></ul><ul><li><code>--depth 1</code> 하게되면 가장 마지막 상태만 클론하게된다.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://qastack.kr/programming/29368837/copy-a-git-repo-without-history">copy-a-git-repo-without-history</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/clone/">clone</category>
      
      <category domain="https://chinsun9.github.io/tags/depth/">depth</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/git-clone-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%97%86%EC%9D%B4-%EA%B0%80%EB%B3%8D%EA%B2%8C-%ED%81%B4%EB%A1%A0%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo icarus 테마에 커스텀 레이아웃, 스타일(css) 적용하기</title>
      <link>https://chinsun9.github.io/2020/11/12/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</link>
      <guid>https://chinsun9.github.io/2020/11/12/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</guid>
      <pubDate>Thu, 12 Nov 2020 06:30:01 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;icarus 테마를 적용하고 다 좋았지만,&lt;/li&gt;
&lt;li&gt;커스텀하고 싶었던 것들이, 칼럼들의 비율과 가로 넓이가 너무 좁다는 것이였다.&lt;/li&gt;
&lt;li&gt;한번 커스텀해보자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;themes-폴더에-icaru</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>icarus 테마를 적용하고 다 좋았지만,</li><li>커스텀하고 싶었던 것들이, 칼럼들의 비율과 가로 넓이가 너무 좁다는 것이였다.</li><li>한번 커스텀해보자</li></ul><h2 id="themes-폴더에-icarus-테마깔기"><a href="#themes-폴더에-icarus-테마깔기" class="headerlink" title="themes 폴더에 icarus 테마깔기"></a>themes 폴더에 icarus 테마깔기</h2><ul><li><code>npm install hexo-theme-icarus</code> ; npm으로 icarus 테마를 설치할 수 있는데,</li><li>이 방법으로 설치한 테마는 커스텀하여 사용하기에는 구조가 이상한 것 같아서(node_modules 안에서 icarus패키지를 수정..)</li><li>테마 설치는 <em>/themes</em> 디렉터리 아래에서 클론 방식으로 하는 것을 추천한다.</li><li><code>git clone --depth 1 https://github.com/ppoffice/hexo-theme-icarus.git</code></li><li>그냥 클론하게되면 커밋 내역까지 다 불러오느라 용량이 커진다.</li><li><code>--depth 1</code>을 붙여 최신 상태만 받아 올 수 있다.</li><li>필요없는 <em>.git</em> 폴더를 삭제해도된다.</li></ul><ul><li>참고 ; <a href="/2020/11/12/git-clone-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%97%86%EC%9D%B4-%EA%B0%80%EB%B3%8D%EA%B2%8C-%ED%81%B4%EB%A1%A0%ED%95%98%EA%B8%B0/">git clone 커밋 히스토리없이 가볍게 클론하기</a></li></ul><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">icarus</span></span><br></pre></td></tr></table></figure><ul><li>위에서 설치한 테마 디렉터리명이랑 <em>_config.yml</em> 의 theme 항목의 값이랑 동일해야한다.</li></ul><blockquote><p>themes<br>└── icarus</p></blockquote><ul><li>디렉터리 구조는 이렇다.</li></ul><h2 id="칼럼-비율-조절하기"><a href="#칼럼-비율-조절하기" class="headerlink" title="칼럼 비율 조절하기"></a>칼럼 비율 조절하기</h2><ul><li>수정하기 용이하도록 <em>themes/icarus</em> 경로에서 vscode를 실행한다.</li><li>지금부터 설명하는 파일의 경로는 <em>themes/icarus</em> 기준의 상대경로이다.</li></ul><figure class="highlight jsx"><figcaption><span>layout/common/widgets.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColumnSizeClass</span>(<span class="params">columnCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (columnCount) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;is-3-tablet is-3-desktop is-3-widescreen&#x27;</span>; <span class="comment">// 여기 수정</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>layout/common/widgets.jsx</em> 로 가보면 <code>getColumnSizeClass</code>라는 함수가 있다.</li><li>여기에 자신의 <em>columnCount</em> 에 맞게 수정한다.</li><li><em>columnCount</em> 의 기본값은 2라서 case 2인 경우를 수정한다.</li><li>나는 <code>is-3</code>으로 수정했다.</li></ul><figure class="highlight jsx"><figcaption><span>layout/layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=&#123;classname(&#123;</span><br><span class="line">    column: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;order-2&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;column-main&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;is-12&#x27;</span>: columnCount === <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;is-9-tablet is-9-desktop is-9-widescreen&#x27;</span>: columnCount === <span class="number">2</span>, <span class="comment">// 여기 수정</span></span><br><span class="line">    <span class="string">&#x27;is-9-tablet is-9-desktop is-6-widescreen&#x27;</span>: columnCount === <span class="number">3</span>,</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">  dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: body &#125;&#125;</span><br><span class="line">&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><em>layout/layout.jsx</em> 하단을 보면 위 코드가 나오는데</li><li>나는 <code>is-9</code>로 수정해주었다.</li></ul><ul><li>전체 12에서 기본값은 프로필이 들어있는 영역이 4, 게시글 영역이 8이였다.</li><li>위처럼 수정하게되면 우선 그 비율을 3, 9로 변경해준 것이다.</li><li>프로필 영역을 좁게, 게시글 영역은 크게 바뀐 것이다.</li><li>이 12라는 것은 칼럼들의 상위에 있는 <code>container</code>의 크기를 기준으로 12등분한 것이다.</li><li>그럼 이 <code>container</code>의 크기를 늘려보자.</li></ul><h2 id="container-크기-늘리기"><a href="#container-크기-늘리기" class="headerlink" title="container 크기 늘리기"></a>container 크기 늘리기</h2><figure class="highlight"><figcaption><span>include/style/base.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$gap ?= 16px</span><br><span class="line">$tablet ?= 769px</span><br><span class="line">$desktop ?= 1288px</span><br><span class="line">$widescreen ?= 1480px</span><br><span class="line">$fullhd ?= 1672px</span><br></pre></td></tr></table></figure><ul><li><em>include/style/base.styl</em> 로 가서 23라인 정도에 이런 코드가 보일 것이다.</li><li>나는 <code>$widescreen</code>, <code>$fullhd</code>의 값을 각각 200px 씩 늘려주었다.</li><li>그랬더니 container가 커졌다!</li></ul><h2 id="커스텀-css-적용하기"><a href="#커스텀-css-적용하기" class="headerlink" title="커스텀 css 적용하기"></a>커스텀 css 적용하기</h2><p><img src="/images/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%8320201112/preview.jpg" alt=" "></p><ul><li>나는 보통 글을 쓸때, 그림을 먼저보고주고 그 아래에 그에 대한 설명을 하는 편이다.</li><li>그래서 그림 위에있는 글이 아래 사진과 별로 관계가 없다는 것을 마진을 주어 표현하고 싶다.</li><li>그런데 매번 그림이 나올 때 마다, <code>&lt;br&gt;</code>을 할 수도 없고…</li><li>그래서 아예 게시글 영역 안에 있는 이미지 태그에 대한 커스텀 css를 적용시킨다.</li></ul><figure class="highlight scss"><figcaption><span>include/style/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="selector-class">.article</span></span><br><span class="line">    <span class="selector-class">.article-meta</span>, <span class="selector-class">.article-tags</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$text-light</span></span><br><span class="line"></span><br><span class="line">    .article-meta</span><br><span class="line">        overflow-x: auto</span><br><span class="line">        margin-bottom: .<span class="number">5rem</span></span><br><span class="line"></span><br><span class="line">    .article-more</span><br><span class="line">        @extend .button.is-light</span><br><span class="line"></span><br><span class="line">    .content</span><br><span class="line">        word-wrap: break-word</span><br><span class="line">        font-size: <span class="variable">$article-font-size</span></span><br><span class="line"></span><br><span class="line">        img                     // 여기 추가</span><br><span class="line">            margin-top: <span class="number">30px</span>    // 여기 추가</span><br></pre></td></tr></table></figure><ul><li><em>.styl</em> 에 대한 문법은 잘모르지만,</li><li>들여쓰기로 셀렉터들의 관계가 정의되어있고</li><li>내가 원하는 게시글 영역의 이미지 태그가 적용되려면</li><li><code>.article .content</code> 아래에 img 태그에 대한 css를 정의해주었다.</li></ul><h2 id="배포-적용시키기"><a href="#배포-적용시키기" class="headerlink" title="배포, 적용시키기"></a>배포, 적용시키기</h2><ul><li>이렇게 변경하고 나고 배포를해야는데 그냥 배포하면 적용이 안된다.</li><li>public/css/default.css 를 삭제해준다.</li><li>그리고 배포를 하면, hexo에서 default 파일이 없어짐을 감지하고 새로 생성하게 되는데,</li><li>그때 변경 내역이 적용된다!</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/blog/">blog</category>
      
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://chinsun9.github.io/tags/blog/">blog</category>
      
      <category domain="https://chinsun9.github.io/tags/icarus/">icarus</category>
      
      <category domain="https://chinsun9.github.io/tags/styl/">styl</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>console.log 축약쓰기, 줄여쓰기, 별명 붙여 쓰기</title>
      <link>https://chinsun9.github.io/2020/11/12/console-log/</link>
      <guid>https://chinsun9.github.io/2020/11/12/console-log/</guid>
      <pubDate>Thu, 12 Nov 2020 05:25:04 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> log = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line">log(<span class="number">12312313</span>);</span><br><span class="line">log(<span class="string">&#x27;안녕&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><em>console.</em> 쓰는 수고를 덜어준다.</li><li>log 까지지면 vscode의 경우 console.log(); 자동완성 시켜주는데</li><li>가끔 자동완성 우선순위가 첫번째가 아닌경우가 있다.</li><li>그래서 그냥 별명을 붙여 쓰는게 맘편한 것 같다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/js/">js</category>
      
      <category domain="https://chinsun9.github.io/tags/console-log/">console.log</category>
      
      <category domain="https://chinsun9.github.io/tags/log/">log</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/console-log/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>chrome dev tool, 크롬 개발자 도구, F12</title>
      <link>https://chinsun9.github.io/2020/11/12/chrome-dev-tool/</link>
      <guid>https://chinsun9.github.io/2020/11/12/chrome-dev-tool/</guid>
      <pubDate>Thu, 12 Nov 2020 04:44:26 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;크롬 개발자 도구는 진짜 치트키&lt;/li&gt;
&lt;li&gt;특히 이걸 알고시작하면 주먹구구식으로도 뭔가를 만들어낼 수 있다!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;F12&lt;/em&gt; 키로 개발자도구를 켠다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;요소선택&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>크롬 개발자 도구는 진짜 치트키</li><li>특히 이걸 알고시작하면 주먹구구식으로도 뭔가를 만들어낼 수 있다!</li><li><em>F12</em> 키로 개발자도구를 켠다</li></ul><h2 id="요소선택"><a href="#요소선택" class="headerlink" title="요소선택"></a>요소선택</h2><p><img src="/images/chrome-dev-tool20201112/1.jpg" alt=" "></p><ul><li>개발자도구 상단에보면 네모에 호버하고 있는 마우스 아이콘을 클릭하거나</li><li><em>Ctrl + Shift + C</em> 키로 요소를 선택할 수 있는 모드로 들어갈 수 있다</li></ul><p><img src="/images/chrome-dev-tool20201112/2.jpg" alt=" "></p><ul><li>이 모드가 켜지면 커서있는 곳의 html 요소를 선택할 수 있다.</li></ul><p><img src="/images/chrome-dev-tool20201112/3.jpg" alt=" "><br><img src="/images/chrome-dev-tool20201112/4.gif" alt=" "></p><ul><li>클릭을하면 개발자도구에 해당 html 요소가 있는 라인이 하일라이트되어 보여지며</li><li>원하는 요소를 더블클릭또는 f2를 눌러 html을 수정할 수 있다.</li><li>여기서 수정한 내용은 화면에 바로 반영되어 보여진다.</li><li>스타일도 적용해볼 수 있으며, 자동완성을 지원해서 속성명을 자세히 몰라도 이것저것 시험해볼 수 있다.</li><li>당연하게도 새로고침하면 수정사항이 모두 날라간다.</li><li>이렇게 저렇게 브라우저에서 시험삼아해보고 이게 좋다하면 에디터로 돌아와 코드에 추가해서 적용시켜볼 수 있겠다.</li></ul><h2 id="Copy-selector-Copy-JS-path"><a href="#Copy-selector-Copy-JS-path" class="headerlink" title="Copy selector, Copy JS path"></a>Copy selector, Copy JS path</h2><p><img src="/images/chrome-dev-tool20201112/5.jpg" alt=" "></p><ul><li>나는 이거를 정말 많이쓴다.</li></ul><blockquote><p>Copy selector 결과<br><code>body &gt; section &gt; div &gt; div &gt; div.column.order-2.column-main.is-9-tablet.is-9-desktop.is-9-widescreen &gt; div:nth-child(1) &gt; article &gt; h1 &gt; a</code></p></blockquote><ul><li>내가 원하는 요소의 셀렉터를 찾아준다.</li><li>css를 적용하거나, 셀렉터를 쓸필요가있을 때 유용하다.</li></ul><blockquote><p>Copy JS path 결과<br><code>document.querySelector(&quot;body &gt; section &gt; div &gt; div &gt; div.column.order-2.column-main.is-9-tablet.is-9-desktop.is-9-widescreen &gt; div:nth-child(1) &gt; article &gt; h1 &gt; a&quot;)</code></p></blockquote><ul><li>Copy selector와 다른점은 <code>document.querySelector</code>로 감싸준다.</li></ul><h2 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h2><ul><li>이것도 신기한 기능이다</li></ul><p><img src="/images/chrome-dev-tool20201112/6.jpg" alt=" "></p><ul><li>디버깅하고싶은 소스코드 중간에 <code>debugger</code>라는 키워드를 적어놓으면,</li><li>개발자도구가 열렸을 때, 코드가 실행되다가 <code>debugger</code>를 만나면 실행이 멈추고,</li><li>해당 위치에서 코드를 한줄씩 실행시켜 볼 수도 있고 그렇다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/chrome-dev-tool/">chrome dev tool</category>
      
      <category domain="https://chinsun9.github.io/tags/chrome/">chrome</category>
      
      <category domain="https://chinsun9.github.io/tags/debugger/">debugger</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/chrome-dev-tool/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github 저장소 복제</title>
      <link>https://chinsun9.github.io/2020/11/12/github-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%B3%B5%EC%A0%9C/</link>
      <guid>https://chinsun9.github.io/2020/11/12/github-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%B3%B5%EC%A0%9C/</guid>
      <pubDate>Thu, 12 Nov 2020 04:25:01 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare -b docker --single-branch  https:&#x2F;&#x2F;github.com&#x2F;chinsun9&#x2F;2020-web-test.git</span><br><span class="line"></span><br><span class="line">cd 2020-web-test.git</span><br><span class="line"></span><br><span class="line">git push --mirror https:&#x2F;&#x2F;github.com&#x2F;chinsun9&#x2F;2020-web-test-mirror.git</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">rmdir &#x2F;s 2020-web-test.git</span><br></pre></td></tr></table></figure><ul><li>우선 터미널에서 작업하기 전에 새로운 깃허브 저장소를 하나 생성한다.(복제될 저장소)</li><li>2020-web-test의 docker 브랜치를 bare clone 한다.</li></ul><p><img src="/images/github-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%B3%B5%EC%A0%9C20201112/1.jpg" alt=" "></p><ul><li>bare clone하게되면 소스코드가 보이지않고 이런 요상한 파일들이 보인다.</li><li>평범히 클론했다면 <em>.git</em> 디렉터리에 있는 내용들이다.</li></ul><ul><li><code>cd 2020-web-test.git</code>로 들어가주고</li><li><code>git push --mirror https://github.com/chinsun9/2020-web-test-mirror.git</code></li><li>새로운 저장소로 mirror옵션을 주고 푸쉬하게되면 커밋내역까지 똑같이 저장소가 복제된다.</li></ul><p><img src="/images/github-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%B3%B5%EC%A0%9C20201112/preview.jpg" alt=" "></p><ul><li>오른쪽이 복제한 저장소이고, 복제한 저장소에서 하나의 커밋을 하였다.</li></ul><ul><li><code>rmdir /s 2020-web-test.git</code> 이제 이 쓸모없는 디렉터리는 삭제하고</li><li>복제한 저장소를 <code>git clone https://github.com/chinsun9/2020-web-test-mirror.git</code> 클론해서 사용하면된다.</li></ul><h2 id="용도"><a href="#용도" class="headerlink" title="용도?"></a>용도?</h2><ul><li>퍼블릭 저장소에 올렸던 프로젝트를 계속 이어하는데</li><li>dbconfig파일이나, 보여주고싶지않은 정보가 있을 수 있다.</li><li>처음에는 비공개 브랜치? 이런 키워드로 찾아봤었는데, 그런 기능은 없었다.</li><li>프로젝트를 통째로 복사해서 새롭게 git init 하는 방법도 있는데,</li><li>이 방법을 통해서 커밋내역을 유지하면서 복제할 수 있었다.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/en/free-pro-team@latest/github/creating-cloning-and-archiving-repositories/duplicating-a-repository">Duplicating a repository</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/git/">git</category>
      
      
      <category domain="https://chinsun9.github.io/tags/git/">git</category>
      
      <category domain="https://chinsun9.github.io/tags/github/">github</category>
      
      <category domain="https://chinsun9.github.io/tags/clone/">clone</category>
      
      <category domain="https://chinsun9.github.io/tags/bare/">bare</category>
      
      <category domain="https://chinsun9.github.io/tags/mirror/">mirror</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/github-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%B3%B5%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>nodejs web dockerizing</title>
      <link>https://chinsun9.github.io/2020/11/12/nodejs-web-dockerizing/</link>
      <guid>https://chinsun9.github.io/2020/11/12/nodejs-web-dockerizing/</guid>
      <pubDate>Thu, 12 Nov 2020 02:40:11 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;기존에 만들었었던 &lt;a href=&quot;https://github.com/chinsun9/2020-web-test&quot;&gt;Nodejs Express WEB&lt;/a&gt; 프로젝트를 도커라이징 해보았다.&lt;/li&gt;
&lt;li&gt;얄팍한 코딩사전님의 &lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>기존에 만들었었던 <a href="https://github.com/chinsun9/2020-web-test">Nodejs Express WEB</a> 프로젝트를 도커라이징 해보았다.</li><li>얄팍한 코딩사전님의 <a href="https://youtu.be/hWPv9LMlme8">가장 쉽게 배우는 도커</a>를 보고 시도했다.</li><li>도커가 이런거구나 하고 느낀 순간이였다.. 마치 신세계…</li><li>이번 도커라이징을 통해서 내 프로젝트를 도커가 설치되어있는 다른컴퓨터에서 매우 쉽게 돌려볼 수 있다는걸 알게되었다.</li></ul><h2 id="기존-상태-설명"><a href="#기존-상태-설명" class="headerlink" title="기존 상태 설명"></a>기존 상태 설명</h2><figure class="highlight txt"><figcaption><span>디렉터리 구조</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules/</span><br><span class="line">├── web</span><br><span class="line">│ ├── bin</span><br><span class="line">│ │ └── www</span><br><span class="line">│ ├── public/</span><br><span class="line">│ ├── routes/</span><br><span class="line">│ ├── utils/</span><br><span class="line">│ ├── views/</span><br><span class="line">│ └── app.js</span><br><span class="line">├── .gitattributes</span><br><span class="line">├── .gitignore</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── README.md</span><br><span class="line">└── sqldump.sql</span><br></pre></td></tr></table></figure><ul><li>그냥 node express 서버와 db덤프 파일인 <em>sqldump.sql</em> 가 구분없이 한 디렉터리에 있었다.</li></ul><h2 id="벡엔드와-데이터베이스로-분리하기"><a href="#벡엔드와-데이터베이스로-분리하기" class="headerlink" title="벡엔드와 데이터베이스로 분리하기"></a>벡엔드와 데이터베이스로 분리하기</h2><p><img src="/images/nodejs-web-dockerizing20201112/preview.jpg" alt=" "></p><ul><li><code>backend</code>, <code>database</code> 폴더를 만든다.</li><li><code>backend</code>폴더로 sqldump.sql와 깃허브, 프리티어 세팅 등을 제외한 99.9999%의 소스파일들을 이동한다</li><li><code>database</code>폴더로 sqldump.sql을 이동</li></ul><figure class="highlight plain"><figcaption><span>sqldump.sql 이동</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">database</span><br><span class="line">└── scripts</span><br><span class="line">    └── sqldump.sql</span><br></pre></td></tr></table></figure><ul><li>이런식으로 node express 서버와 db를 분리할 수 있었다.</li></ul><h2 id="Dockerfile-작성하기"><a href="#Dockerfile-작성하기" class="headerlink" title="Dockerfile 작성하기"></a>Dockerfile 작성하기</h2><h3 id="backend"><a href="#backend" class="headerlink" title="backend"></a>backend</h3><figure class="highlight dockerfile"><figcaption><span>backend/Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.18</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>내가 로컬에서 사용하는 환경을 토대로</li><li>내 앱에 맞는 노드버전을 가져와서</li><li>/usr/src/app 라는 워크디렉터리에</li><li>backend 아래있는 모든 파일들을 복사해오고</li><li>RUN 명령어로 npm i로 종속성을 설치한다.</li><li>그리고 CMD 명령으로 backend 서버를 실행시킨다.</li></ul><h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><figure class="highlight dockerfile"><figcaption><span>database/Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mariadb:<span class="number">10.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_USER mysql_user</span><br><span class="line"><span class="keyword">ENV</span> MYSQL_PASSWORD <span class="number">1234</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_ROOT_PASSWORD <span class="number">1234</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_DATABASE webtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./scripts/ /docker-entrypoint-initdb.d/</span></span><br></pre></td></tr></table></figure><ul><li>내가 로컬에서 사용했던 마리아디비 버전 그대로 가져왔다</li><li>데이터베이스 관련 환경변수들을 정의해주고</li><li>scripts 디렉터리에 있는 dump파일을 <em>/docker-entrypoint-initdb.d/</em> 로 복사한다</li><li>/docker-entrypoint-initdb.d/ 는 데이터베이스를 생성할 때,</li><li>하위 sql을 가지고 데이터베이스를 초기화해준다.</li></ul><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><ul><li>메모리 딸린다..</li><li>처음에는 좋아서 이것저것 다 도커라이징할려고 했는데,</li><li>하다보니까 메모리가 딸려서 마우스가 뚝뚝 끊겼다…</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/chinsun9/2020-web-test/tree/docker">Nodejs Express WEB</a></li><li><a href="https://youtu.be/hWPv9LMlme8">가장 쉽게 배우는 도커</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/docker/">docker</category>
      
      
      <category domain="https://chinsun9.github.io/tags/docker/">docker</category>
      
      <category domain="https://chinsun9.github.io/tags/dockerizing/">dockerizing</category>
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/express/">express</category>
      
      <category domain="https://chinsun9.github.io/tags/mariadb/">mariadb</category>
      
      <category domain="https://chinsun9.github.io/tags/sqldump/">sqldump</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/nodejs-web-dockerizing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>react typescript Prettier 적용하기, Prettier로 여러 파일 한번에 포맷팅하기</title>
      <link>https://chinsun9.github.io/2020/11/12/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>https://chinsun9.github.io/2020/11/12/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 12 Nov 2020 02:29:49 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;settings.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight"><figcaption><span>settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;[typescript]&quot;: &#123;</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;[typescriptreact]&quot;: &#123;</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br></pre></td></tr></table></figure><ul><li>settings.json에 추가시켜준다.</li><li>저장할 때마다 자동으로 포맷팅되는 것을 확인할 수 있다.</li></ul><h2 id="일괄적으로-포맷팅하기"><a href="#일괄적으로-포맷팅하기" class="headerlink" title="일괄적으로 포맷팅하기"></a>일괄적으로 포맷팅하기</h2><ul><li>프리티어없이 개발했다가 코드 포맷팅을 일괄적으로 하고싶을 때가 있다.</li></ul><p><img src="/images/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B020201112/preview.jpg" alt=" "></p><figure class="highlight json"><figcaption><span>.prettierrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>.prettierrc</em> 파일을 생성한다.</li></ul><blockquote><p>npx prettier –write *<em>/</em>.{tsx,ts}</p></blockquote><ul><li>terminal에 위 명령을 치면</li><li>prettier가 일회성으로 설치되면서 지정한 확장자에 대해 포맷팅을 일괄적으로 실행해준다.</li><li><em>.prettierrc</em> prettier config file을 참고해서 실행되니</li><li>원하는 디렉터리만, 또는 무시할 디렉터리, 파일들을 설정해서 사용할 수 있다.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://prettier.io/docs/en/configuration.html">Prettier Configuration File</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/react/">react</category>
      
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/setting/">setting</category>
      
      <category domain="https://chinsun9.github.io/tags/prettier/">prettier</category>
      
      <category domain="https://chinsun9.github.io/tags/setting-json/">setting.json</category>
      
      <category domain="https://chinsun9.github.io/tags/formatOnSave/">formatOnSave</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/12/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>insert, update시 자동갱신 TIMESTAMP</title>
      <link>https://chinsun9.github.io/2020/11/11/insert-update%EC%8B%9C-%EC%9E%90%EB%8F%99%EA%B0%B1%EC%8B%A0-timestamp/</link>
      <guid>https://chinsun9.github.io/2020/11/11/insert-update%EC%8B%9C-%EC%9E%90%EB%8F%99%EA%B0%B1%EC%8B%A0-timestamp/</guid>
      <pubDate>Wed, 11 Nov 2020 08:51:06 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">LOG</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`idx`</span>     <span class="built_in">INT</span>            <span class="keyword">NOT</span> <span class="literal">NULL</span>    AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`ip`</span>      <span class="built_in">VARCHAR</span>(<span class="number">45</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`method`</span>  <span class="built_in">VARCHAR</span>(<span class="number">45</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`url`</span>     <span class="built_in">VARCHAR</span>(<span class="number">45</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`date`</span>    <span class="built_in">TIMESTAMP</span>      <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (idx)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>CURRENT_TIMESTAMP은 현재 시간을 의미한다.</li><li><code>DEFAULT CURRENT_TIMESTAMP</code> ; insert 시 자동으로 현재 시간이 들어간다</li><li><code>ON UPDATE CURRENT_TIMESTAMP</code> ; update 시 자동으로 현재 시간으로 갱신된다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://chinsun9.github.io/tags/timestamp/">timestamp</category>
      
      <category domain="https://chinsun9.github.io/tags/on-update/">on update</category>
      
      <category domain="https://chinsun9.github.io/tags/CURRENT-TIMESTAMP/">CURRENT_TIMESTAMP</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/11/insert-update%EC%8B%9C-%EC%9E%90%EB%8F%99%EA%B0%B1%EC%8B%A0-timestamp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS 네트워크 ACL</title>
      <link>https://chinsun9.github.io/2020/11/11/AWS-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-ACL/</link>
      <guid>https://chinsun9.github.io/2020/11/11/AWS-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-ACL/</guid>
      <pubDate>Wed, 11 Nov 2020 08:13:23 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;VPC를 위한 선택적 보안 계층&lt;/li&gt;
&lt;li&gt;시큐리티 그룹과 다르게 차단, deny 룰을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;ruleNumber가 낮은 숫자일수록 우선적용된다.&lt;/li&gt;
&lt;li&gt;20개까지 규칙을 지정할 수 있다고 한다</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>VPC를 위한 선택적 보안 계층</li><li>시큐리티 그룹과 다르게 차단, deny 룰을 사용할 수 있다.</li><li>ruleNumber가 낮은 숫자일수록 우선적용된다.</li><li>20개까지 규칙을 지정할 수 있다고 한다.</li><li>실제로 가용가능한 개수는 18개다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  CidrBlock: <span class="string">&#x27;0.0.0.0/0&#x27;</span>,</span><br><span class="line">  Egress: <span class="literal">false</span>,</span><br><span class="line">  Protocol: <span class="string">&#x27;-1&#x27;</span>,</span><br><span class="line">  RuleAction: <span class="string">&#x27;allow&#x27;</span>,</span><br><span class="line">  RuleNumber: <span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  CidrBlock: <span class="string">&#x27;0.0.0.0/0&#x27;</span>,</span><br><span class="line">  Egress: <span class="literal">false</span>,</span><br><span class="line">  Protocol: <span class="string">&#x27;-1&#x27;</span>,</span><br><span class="line">  RuleAction: <span class="string">&#x27;deny&#x27;</span>,</span><br><span class="line">  RuleNumber: <span class="number">32767</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>인바운드의 경우 이 2개가 기본적으로 세팅되어있다.</li></ul><h2 id="aws-sdk-로-ACL-룰-추가-교체하기"><a href="#aws-sdk-로-ACL-룰-추가-교체하기" class="headerlink" title="aws-sdk 로 ACL 룰 추가, 교체하기"></a>aws-sdk 로 ACL 룰 추가, 교체하기</h2><figure class="highlight ts"><figcaption><span>acl.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> in_params: EC2.CreateNetworkAclEntryRequest = &#123;</span><br><span class="line">  CidrBlock: ipv4 + <span class="string">&#x27;/24&#x27;</span>,</span><br><span class="line">  Egress: <span class="literal">false</span>, <span class="comment">//If true, OUTbound rule. fasle is INbound</span></span><br><span class="line">  NetworkAclId: aclId,</span><br><span class="line">  Protocol: <span class="string">`6`</span>, <span class="comment">// -1 : all protocl // 6 : 사용자 지정 tcp</span></span><br><span class="line">  PortRange: &#123; From: <span class="number">80</span>, To: <span class="number">443</span> &#125;, <span class="comment">// http - https</span></span><br><span class="line">  RuleAction: <span class="string">&#x27;deny&#x27;</span>,</span><br><span class="line">  RuleNumber: acl_cnt, <span class="comment">// 우선순위 ruleNumber</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기존 존재하는 acl 규칙 개수에 따라서 mode를 달리한다</span></span><br><span class="line"><span class="comment">// mode값에 따라 메소드를 달리함.</span></span><br><span class="line"><span class="comment">// 20개가 안되는 경우 createNetworkAclEntry 를 사용함</span></span><br><span class="line"><span class="comment">// 20개 모두 찬경우 replaceNetworkAclEntry를 통해 교체하는 방법</span></span><br><span class="line"><span class="keyword">const</span> method =</span><br><span class="line">  mode === <span class="string">&#x27;create&#x27;</span> ? <span class="string">&#x27;createNetworkAclEntry&#x27;</span> : <span class="string">&#x27;replaceNetworkAclEntry&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  ec2[method](in_params, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err.message, acl_cnt);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> reject(err.message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Create AclEntry Successful : \n&#x27;</span>, in_params); <span class="comment">// successful response</span></span><br><span class="line">      resolve(in_params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>이상한 요청을 차단하기 위해 알아보았다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/vpc-network-acls.html">네트워크 ACL</a></li><li><a href="https://bluese05.tistory.com/47">AWS VPC를 디자인해보자(2) - ACL과 Security Group을 활용한 보안 강화</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC 할당량</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/aws/">aws</category>
      
      <category domain="https://chinsun9.github.io/tags/acl/">acl</category>
      
      <category domain="https://chinsun9.github.io/tags/network/">network</category>
      
      <category domain="https://chinsun9.github.io/tags/vpc/">vpc</category>
      
      <category domain="https://chinsun9.github.io/tags/sg/">sg</category>
      
      <category domain="https://chinsun9.github.io/tags/security-groups/">security groups</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/11/AWS-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-ACL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>typescript json import</title>
      <link>https://chinsun9.github.io/2020/11/10/typescript-json-import/</link>
      <guid>https://chinsun9.github.io/2020/11/10/typescript-json-import/</guid>
      <pubDate>Tue, 10 Nov 2020 06:32:15 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;tsconfig.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;compilerOptions&quot;: &#123;</span><br><span class="line">  <span class="comment">// (...)</span></span><br><span class="line"></span><br><span class="line">  &quot;resolveJsonModule&quot;: true,</span><br><span class="line">  &quot;esModuleInterop&quot;: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>tsconfig.json</em> 의 <code>compilerOptions</code> 부분에 추가한다</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/57574481/angular-8-and-importing-json">Angular 8 and importing Json</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typescript/">typescript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/json/">json</category>
      
      <category domain="https://chinsun9.github.io/tags/import/">import</category>
      
      <category domain="https://chinsun9.github.io/tags/es6/">es6</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/typescript-json-import/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>connection vs connection pool</title>
      <link>https://chinsun9.github.io/2020/11/10/connection-vs-connection-pool/</link>
      <guid>https://chinsun9.github.io/2020/11/10/connection-vs-connection-pool/</guid>
      <pubDate>Tue, 10 Nov 2020 05:56:38 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;connection pool를 써보자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Connection-pool&quot;&gt;&lt;a href=&quot;#Connection-pool&quot; class=&quot;headerlink&quot; title=&quot;Connection pool&quot;&gt;&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>connection pool를 써보자</li></ul><h2 id="Connection-pool"><a href="#Connection-pool" class="headerlink" title="Connection pool"></a>Connection pool</h2><ul><li>기존 connection은 데이터베이스에 동시 접속 허용량을 초과하는 연결을 할 경우 에러 발생</li><li>connection pool을 사용하면 대기상태가 되었다가 수행됨</li><li>pool 에 여러 미리 생성되어 있는 connection을 가져가 쓴다</li><li>connection이 미리 생성되어있기 때문에 생성시간 소모되지 않음.</li><li>따라서 속도 빨라짐. 쉽게 다운되지 않음.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.guidearea.com/best-database-practices-single-connection-vs-connection-pool/">Database Tutorial – Single Connection vs Connection Pool</a></li><li><a href="https://brownbears.tistory.com/289">[DB]Connection Pool</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql2/">mysql2</category>
      
      <category domain="https://chinsun9.github.io/tags/connection/">connection</category>
      
      <category domain="https://chinsun9.github.io/tags/connection-pool/">connection pool</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/connection-vs-connection-pool/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql vs mysql2</title>
      <link>https://chinsun9.github.io/2020/11/10/mysql-vs-mysql2-/</link>
      <guid>https://chinsun9.github.io/2020/11/10/mysql-vs-mysql2-/</guid>
      <pubDate>Tue, 10 Nov 2020 05:38:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;mysql2를 사용해보자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mysql2-노드-패키지&quot;&gt;&lt;a href=&quot;#mysql2-노드-패키지&quot; class=&quot;headerlink&quot; title=&quot;mysql2 노드 패키지&quot;&gt;&lt;/a&gt;mysql2 노드 패키지</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>mysql2를 사용해보자</li></ul><h2 id="mysql2-노드-패키지"><a href="#mysql2-노드-패키지" class="headerlink" title="mysql2 노드 패키지"></a>mysql2 노드 패키지</h2><ul><li>기존 mysql 패키지 보다 빠름</li><li>기존 mysql를 대체하는 것이 목표라고함</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/sidorares/node-mysql2#readme">sidorares/node-mysql2</a></li><li><a href="https://npmcompare.com/compare/mysql,mysql2">Comparing mysql vs. mysql2</a></li><li><a href="https://stackoverflow.com/questions/25344661/what-is-the-difference-between-mysql-mysql2-considering-nodejs">What is the difference between MySQL &amp; MySQL2 considering NodeJS</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://chinsun9.github.io/tags/mysql2/">mysql2</category>
      
      <category domain="https://chinsun9.github.io/tags/npm/">npm</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/mysql-vs-mysql2-/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ts-node</title>
      <link>https://chinsun9.github.io/2020/11/10/ts-node/</link>
      <guid>https://chinsun9.github.io/2020/11/10/ts-node/</guid>
      <pubDate>Tue, 10 Nov 2020 00:21:23 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;figcaption&gt;&lt;span&gt;terminal&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight cmd"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node src/index.ts</span><br></pre></td></tr></table></figure><ul><li>tsc를 통해 .js파일로 만들고, js파일을 실행하는 것이 아니라</li><li>바로 .ts 파일을 실행하는 것처럼 보여준다.</li><li>따로 .js파일은 생성되지 않는다.</li></ul><h2 id="ts-node-설치"><a href="#ts-node-설치" class="headerlink" title="ts-node 설치"></a>ts-node 설치</h2><figure class="highlight cmd"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ts-node</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/TypeStrong/ts-node">TypeStrong/ts-node</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/typescript/">typescript</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/ts-node/">ts-node</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/10/ts-node/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS ELB를 사용할 때 express morgan 로깅 주의점</title>
      <link>https://chinsun9.github.io/2020/11/09/AWS-ELB%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-express-morgan-%EB%A1%9C%EA%B9%85-%EC%A3%BC%EC%9D%98%EC%A0%90/</link>
      <guid>https://chinsun9.github.io/2020/11/09/AWS-ELB%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-express-morgan-%EB%A1%9C%EA%B9%85-%EC%A3%BC%EC%9D%98%EC%A0%90/</guid>
      <pubDate>Mon, 09 Nov 2020 08:50:30 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;morgan 로깅할 때, 사용자의 ip를 기록하는&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:remote-addr&lt;/code&gt; 토큰은 req.ip 를 사용한다.&lt;/li&gt;
&lt;li&gt;ELB, 로드밸런서를 사용하면 사용자의 ip가 아니라, ELB의 ip가 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>morgan 로깅할 때, 사용자의 ip를 기록하는</li><li><code>:remote-addr</code> 토큰은 req.ip 를 사용한다.</li><li>ELB, 로드밸런서를 사용하면 사용자의 ip가 아니라, ELB의 ip가 기록된다.</li><li>그래서 사용자의 ip를 가져오려면 <code>x-forwarded-for</code> 헤더의 내용을 봐야한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ip = req.headers[<span class="string">&#x27;x-forwarded-for&#x27;</span>] || req.connection.remoteAddress;</span><br></pre></td></tr></table></figure><h2 id="morgan-custom"><a href="#morgan-custom" class="headerlink" title="morgan custom"></a>morgan custom</h2><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  morgan(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">tokens, req, res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        req.headers[<span class="string">&#x27;x-forwarded-for&#x27;</span>] || req.connection.remoteAddress,</span><br><span class="line">        req.ip, <span class="comment">// == :remote-addr</span></span><br><span class="line">        tokens.method(req, res),</span><br><span class="line">        tokens.url(req, res),</span><br><span class="line">        tokens.status(req, res),</span><br><span class="line">      ].join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      skip: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res.statusCode &lt; <span class="number">400</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><ul><li>이런식으로 커스텀할 수 있다.</li><li><code>req.headers[&#39;x-forwarded-for&#39;]</code>의 내용은</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;</span><br></pre></td></tr></table></figure><ul><li>이런식으로 가장 앞의 ip가 사용자 ip이다.</li><li>뒤로 <code>,</code>로 나열되는 ip는 프록시임으로 당황하지 말자</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  skip: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.statusCode &lt; <span class="number">400</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>morgan(f(), {})</li><li>morgan 두번째 인자로 옵션을 넣을 수 있다.</li><li>skip을 주면 특정 경우에서 로깅을 하지 않는 옵션이다</li><li><code>return res.statusCode &lt; 400;</code>이런식으로 하면 400이하의 스테이터스 코드일 때,</li><li>로깅을 하지 않는다는 의미이다.</li><li>이 경우 404, 500 같은 에러들만 로깅된다.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://expressjs.com/en/resources/middleware/morgan.html">Express morgan middleware</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/aws/">aws</category>
      
      
      <category domain="https://chinsun9.github.io/tags/aws/">aws</category>
      
      <category domain="https://chinsun9.github.io/tags/express/">express</category>
      
      <category domain="https://chinsun9.github.io/tags/elb/">elb</category>
      
      <category domain="https://chinsun9.github.io/tags/morgan/">morgan</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/AWS-ELB%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-express-morgan-%EB%A1%9C%EA%B9%85-%EC%A3%BC%EC%9D%98%EC%A0%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정규식 : 특정 문자열을 포함하는 줄, 라인 판단</title>
      <link>https://chinsun9.github.io/2020/11/09/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A8/</link>
      <guid>https://chinsun9.github.io/2020/11/09/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A8/</guid>
      <pubDate>Mon, 09 Nov 2020 08:21:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%9</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A820201109/preview.jpg" alt=" "></p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><figure class="highlight plain"><figcaption><span>log</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 1</span><br><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 2</span><br><span class="line">&quot;GET &#x2F;a HTTP&#x2F;1.1&quot; 404 hello world 1</span><br><span class="line">&quot;POST &#x2F; HTTP&#x2F;1.1&quot; 404 hello world 1</span><br><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 2</span><br><span class="line">&quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 hello world 1</span><br><span class="line">&quot;POST &#x2F;asd HTTP&#x2F;1.1&quot; 404 hello world 2</span><br></pre></td></tr></table></figure><ul><li>이런 웹 로그가 있다고 하자.</li><li>중간에 보이는 200, 404 는 status code 이다.</li><li>404 에러인 라인만 뽑아서 보고싶을 때..</li></ul><h2 id="로그파일을-한줄씩-읽으며-정규식으로-확인하기"><a href="#로그파일을-한줄씩-읽으며-정규식으로-확인하기" class="headerlink" title="로그파일을 한줄씩 읽으며 정규식으로 확인하기"></a>로그파일을 한줄씩 읽으며 정규식으로 확인하기</h2><figure class="highlight ts"><figcaption><span>app.ts 전체코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> readline <span class="keyword">from</span> <span class="string">&#x27;readline&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input_log_file_name = <span class="string">&#x27;nohup20201107.out&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input_file_path = path.join(</span><br><span class="line">  __dirname,</span><br><span class="line">  <span class="string">`../input files/<span class="subst">$&#123;input_log_file_name&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> output_file_path = path.join(</span><br><span class="line">  __dirname,</span><br><span class="line">  <span class="string">`../output files/<span class="subst">$&#123;input_log_file_name&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(input_file_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">processLineByLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileStream = fs.createReadStream(input_file_path);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: fileStream,</span><br><span class="line">    crlfDelay: <span class="literal">Infinity</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 정규식</span></span><br><span class="line">  <span class="keyword">const</span> reg404 = <span class="regexp">/^.*(404).*/</span>;</span><br><span class="line">  <span class="keyword">let</span> result_string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> line <span class="keyword">of</span> rl) &#123;</span><br><span class="line">    <span class="comment">// console.log(`Line from file: $&#123;line&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reg404.test(line)) &#123;</span><br><span class="line">      <span class="comment">//   console.log(`hello : $&#123;line&#125;`);</span></span><br><span class="line">      result_string += line + <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.writeFile(output_file_path, result_string, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;file write complete&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processLineByLine();</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>readline으로 한줄한줄 읽기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileStream = fs.createReadStream(input_file_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: fileStream,</span><br><span class="line">  crlfDelay: <span class="literal">Infinity</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>우선, 파일을 한줄씩 읽기위해 <code>readline</code>을 사용했다</li></ul><figure class="highlight ts"><figcaption><span>정규식으로 404 문자열 포함 여부 확인</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정규식</span></span><br><span class="line"><span class="keyword">const</span> reg404 = <span class="regexp">/^.*(404).*/</span>;</span><br><span class="line"><span class="keyword">let</span> result_string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> line <span class="keyword">of</span> rl) &#123;</span><br><span class="line">  <span class="comment">// console.log(`Line from file: $&#123;line&#125;`);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reg404.test(line)) &#123;</span><br><span class="line">    <span class="comment">//   console.log(`hello : $&#123;line&#125;`);</span></span><br><span class="line">    result_string += line + <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>^.*(404).*</code> 로 정규식을 새웠다.</li><li><code>^.*</code> ; 아무 문자로 시작하는 0개 이상의 문자열로 시작하고</li><li><code>(404)</code> ; 404 문자열을 중간에 포함하며</li><li><code>.*</code> ; 아무 문자열로 끝나는가</li></ul><ul><li><code>reg404.test(line)</code>로 한줄한줄 확인하고</li><li>참인 경우에 result_string 에 더하기</li></ul><figure class="highlight ts"><figcaption><span>result_string 결과 새파일로 쓰기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(output_file_path, result_string, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;file write complete&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>result_string에는 404 문자열을 포함한느 라인만 추출되었고</li><li>output_file_path에 해당 내용을 쓴다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/reg-exp/">reg exp</category>
      
      
      <category domain="https://chinsun9.github.io/tags/reg-exp/">reg exp</category>
      
      <category domain="https://chinsun9.github.io/tags/reg/">reg</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CRLF, LF</title>
      <link>https://chinsun9.github.io/2020/11/09/crlf-lf/</link>
      <guid>https://chinsun9.github.io/2020/11/09/crlf-lf/</guid>
      <pubDate>Mon, 09 Nov 2020 06:50:36 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;LF&lt;br&gt;\n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;CRLF = CR + LF&lt;br&gt;\r\n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;여러줄의 텍스트를 가진 file을 읽고 처리할 때 줄바꿈</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>LF<br>\n</p></blockquote><blockquote><p>CRLF = CR + LF<br>\r\n</p></blockquote><ul><li>여러줄의 텍스트를 가진 file을 읽고 처리할 때 줄바꿈 형식을 알고 있어야한다.</li><li>윈도우의 경우 CRLF이다.</li></ul><h2 id="vscode에서-쉽게-변환하기"><a href="#vscode에서-쉽게-변환하기" class="headerlink" title="vscode에서 쉽게 변환하기"></a>vscode에서 쉽게 변환하기</h2><p><img src="/images/crlf-lf20201109/preview.jpg" alt=" "></p><ul><li>vscode에서는 우측하단에 보면, 인코딩 형식과 줄바꿈 형식을 알려준다.</li><li>우측하단을 클릭해서 변환할 수 있다.</li><li>또는 ctrl + shift + p 에서 <code>end of line</code>을 검색해서 변환할 수 있다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://chinsun9.github.io/tags/crlf/">crlf</category>
      
      <category domain="https://chinsun9.github.io/tags/lf/">lf</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/crlf-lf/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>게시판 페이지네이션 SQL</title>
      <link>https://chinsun9.github.io/2020/11/09/%EA%B2%8C%EC%8B%9C%ED%8C%90-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-SQL/</link>
      <guid>https://chinsun9.github.io/2020/11/09/%EA%B2%8C%EC%8B%9C%ED%8C%90-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-SQL/</guid>
      <pubDate>Mon, 09 Nov 2020 03:43:19 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sql&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> page = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="string">`SELECT * FROM notice WHERE use_flag=&#x27;Y&#x27; ORDER BY idx DESC LIMIT ?,?`</span>;</span><br><span class="line"><span class="keyword">const</span> queryArgs = [<span class="number">10</span> * (page - <span class="number">1</span>), <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> client.query(query, queryArgs);</span><br></pre></td></tr></table></figure><ul><li>notice 테이블에서 <code>page</code>값에 따라 게시글 10개를 가져오는 쿼리이다</li><li>limit 을 이용해서 구현하였다.</li></ul><blockquote><p>SELECT * FROM notice LIMIT 0,10<br>// 0번째부터 10개를 가져온다는 의미이다.</p></blockquote><blockquote><p>SELECT * FROM notice LIMIT 20,10<br>// 20번째부터 10개를 가져온다는 의미이다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://github.com/chinsun9/2020-web-test/blob/a6230973aa75be8b085f2b699fe81f9d2270b8cc/backend/web/utils/myDAO.js#L27">web test</a>에서 사용한 소스코드</li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/sql/">sql</category>
      
      
      <category domain="https://chinsun9.github.io/tags/sql/">sql</category>
      
      <category domain="https://chinsun9.github.io/tags/limit/">limit</category>
      
      <category domain="https://chinsun9.github.io/tags/pagination/">pagination</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/%EA%B2%8C%EC%8B%9C%ED%8C%90-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-SQL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>inline style vs !important</title>
      <link>https://chinsun9.github.io/2020/11/09/inline-style-vs-important/</link>
      <guid>https://chinsun9.github.io/2020/11/09/inline-style-vs-important/</guid>
      <pubDate>Mon, 09 Nov 2020 00:05:37 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/inline-style-vs-important20201109/preview.jpg&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;!important 승&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;갑자기</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/inline-style-vs-important20201109/preview.jpg" alt=" "></p><blockquote><p>!important 승</p></blockquote><ul><li>갑자기 인라인에서 정의한 스타일과 <code>!important</code> 중에 누가 더 강력한지 궁금해 졌다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/web/">web</category>
      
      
      <category domain="https://chinsun9.github.io/tags/web/">web</category>
      
      <category domain="https://chinsun9.github.io/tags/css/">css</category>
      
      <category domain="https://chinsun9.github.io/tags/html/">html</category>
      
      <category domain="https://chinsun9.github.io/tags/style/">style</category>
      
      <category domain="https://chinsun9.github.io/tags/inline-styles/">inline styles</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/09/inline-style-vs-important/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Banner Maker 클론코딩</title>
      <link>https://chinsun9.github.io/2020/11/06/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/</link>
      <guid>https://chinsun9.github.io/2020/11/06/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/</guid>
      <pubDate>Fri, 06 Nov 2020 07:08:33 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/banner-maker/banner-maker&quot;&gt;banner-maker/banner-maker&lt;/a&gt;를 클론코딩해보았다.&lt;/li&gt;
&lt;li&gt;내 두번째 리액트 프로젝트..!&lt;/li&gt;
&lt;/u</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://github.com/banner-maker/banner-maker">banner-maker/banner-maker</a>를 클론코딩해보았다.</li><li>내 두번째 리액트 프로젝트..!</li></ul><h2 id="데모"><a href="#데모" class="headerlink" title="데모"></a>데모</h2><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/preview.jpg" alt=" "></p><ul><li><a href="https://chinsun9.github.io/react-banner-maker/" target="_blank">Banner Maker (React)</a></li></ul><h2 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h2><ul><li>캔버스 크기 조절</li><li>실시간 캔버스 업데이트</li><li>폰트 사이즈 조절</li><li>폰트색 조절</li><li>캔버스색에 따른 폰트색 자동조절</li><li>캔버스색 조절</li><li>랜덤 캠버스색</li><li>이미지로 다운로드</li><li>클립보드로 카피</li><li>컬러 히스토리 기능</li><li>컬러 히스토리 임포트, 익스포트 기능</li></ul><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><ul><li>타입스크립트 공부 겸 리액트도 같이 하자는 생각으로 리액트 타입스크립트를 시작했다.</li><li>velopert님의 <a href="https://velog.io/@velopert/using-react-with-typescript">리액트 프로젝트에서 타입스크립트 사용하기</a> 글을 보고 따라하다가</li><li>튜토리얼을 통해 잘 만들어진 프로젝트 구조를 기반으로 만들었다.</li><li>리액트가 아직 익숙하지 않은데 리액트의 훅이라던지 처음부터 고급??개념들을 사용하니까</li><li>사실 뭐가 좋은지, 이렇게 써서 좋은점이 무엇인지..</li><li>이 개념을 도입하기전의 것들을 시도해보지 않았기 때문에 막연한 감이 있었다.</li><li>나는 공부할때 이론보단 무조건 실기이고, 일단 만들어보면서 익히고 이해하자라는 주의이다.</li><li>그래서 이것저것 쉽게만들 수 있다고 생각한다. (나중에 보면 코드가 엄청 구릴지라도..)</li></ul><ul><li>이번에 만들면서 신경쎃던 것은</li><li>사용성..?? 인 것같다.</li></ul><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/1.jpg" alt=" "></p><ul><li>나는 보통 이미지를 ctrl c 카톡에다가 ctrl v 하여 톡방에 올리는데</li><li>그걸위한 copy clipboard 버튼을 만들었다. 저장후 이미지 올리기는 귀찮기 때문에..</li></ul><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/2.jpg" alt=" "></p><ul><li>또 랜덤 칼러 버튼을 만들어서 색을 쇼핑했다.</li></ul><figure class="highlight js"><figcaption><span>js/index.js</span><a href="https://github.com/chinsun9/html-banner-maker/commit/5cccc1594309f732ea8edd8ca08c91800d97d317">html-banner-maker/commit/5cccc1594309f732ea8edd8ca08c91800d97d317</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get color (black/white) depending on bgColor so it would be clearly seen.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">bgColor</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorByBgColor</span>(<span class="params">bgColor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!bgColor) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(bgColor.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="number">16</span>) &gt; <span class="number">0xffffff</span> / <span class="number">2</span></span><br><span class="line">    ? <span class="string">&#x27;#000&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;#fff&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>사용해보면 알겠지만 랜덤으로 생성된 배경색에 따라 폰트색도 검정색/흰색 적절한게 선택된다.</li></ul><p><img src="/images/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A920201106/3.jpg" alt=" "></p><ul><li>컬러 히스토리 기능이다.</li><li>copy 버튼이나 download 버튼을 누르면 해당 배경색과, 폰트색이 히스토리에 저장된다.</li><li>만약에 같은 최근 히스토리에 저장된 색과 같은 색이면 저장하지 않도록 하였다. 버튼을 누를때마다 증식되지 않도록..</li><li>export 버튼을 눌러 현재 저장된 컬러 히스토리를 json 파일로 내보내는 기능도있다.</li><li>깃허브 페이지를 이용해 호스팅하기때문에, 내 앱은 정적이다.</li><li>어떻게 히스토리를 저장하고 불러올까 생각하다가 json 파일로 내보내고 다시 불러오도록 만들게 되었다.</li></ul><h2 id="개선방향"><a href="#개선방향" class="headerlink" title="개선방향"></a>개선방향</h2><ul><li>칼러픽커에서 알파값을 바꿀 수 있도록 하기</li><li>폰트 변경 기능</li><li>textarea를 div안에 넣어버리기..? (html2canvas 사용해보기)</li><li>json파일로부터 컬러히스토리 임포트할때 덮어쓰기가 아니라 병합으로 불러오기</li></ul><figure class="highlight js"><figcaption><span>src/modules/common/copyToClipboard.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">copyToClipboard</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">`#myCanvas`</span>);</span><br><span class="line">  <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">    <span class="keyword">const</span> item = <span class="keyword">new</span> ClipboardItem(&#123; <span class="string">&#x27;image/png&#x27;</span>: blob &#125;);</span><br><span class="line">    navigator.clipboard.write([item]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>클립보드 복사 js 코드를 ts로 변환하지 못한 코드..</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><ul><li><a href="https://github.com/chinsun9/react-banner-maker">react-banner-maker</a></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li>리액트 타입스크립트 공부 ; <a href="https://velog.io/@velopert/using-react-with-typescript">리액트 프로젝트에서 타입스크립트 사용하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chinsun9.github.io/categories/react/">react</category>
      
      
      <category domain="https://chinsun9.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://chinsun9.github.io/tags/ts/">ts</category>
      
      <category domain="https://chinsun9.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://chinsun9.github.io/tags/react/">react</category>
      
      <category domain="https://chinsun9.github.io/tags/hook/">hook</category>
      
      <category domain="https://chinsun9.github.io/tags/clone-coding/">clone coding</category>
      
      <category domain="https://chinsun9.github.io/tags/%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/">클론코딩</category>
      
      
      <comments>https://chinsun9.github.io/2020/11/06/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
